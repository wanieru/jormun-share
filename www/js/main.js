/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={4184:(e,t)=>{var n;!function(){"use strict";var o={}.hasOwnProperty;function r(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var i=typeof n;if("string"===i||"number"===i)e.push(n);else if(Array.isArray(n)){if(n.length){var s=r.apply(null,n);s&&e.push(s)}}else if("object"===i)if(n.toString===Object.prototype.toString)for(var a in n)o.call(n,a)&&n[a]&&e.push(a);else e.push(n.toString())}}return e.join(" ")}e.exports?(r.default=r,e.exports=r):void 0===(n=function(){return r}.apply(t,[]))||(e.exports=n)}()},5648:(e,t,n)=>{"use strict";n.d(t,{Ep:()=>p,PP:()=>u,aU:()=>o,cP:()=>m,lX:()=>a,q_:()=>l});var o,r=n(7462);!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(o||(o={}));var i="beforeunload",s="popstate";function a(e){void 0===e&&(e={});var t=e.window,n=void 0===t?document.defaultView:t,a=n.history;function l(){var e=n.location,t=e.pathname,o=e.search,r=e.hash,i=a.state||{};return[i.idx,{pathname:t,search:o,hash:r,state:i.usr||null,key:i.key||"default"}]}var u=null;n.addEventListener(s,(function(){if(u)x.call(u),u=null;else{var e=o.Pop,t=l(),n=t[0],r=t[1];if(x.length){if(null!=n){var i=v-n;i&&(u={action:e,location:r,retry:function(){S(-1*i)}},S(i))}}else E(e)}}));var c=o.Pop,g=l(),v=g[0],b=g[1],y=h(),x=h();function _(e){return"string"==typeof e?e:p(e)}function w(e,t){return void 0===t&&(t=null),(0,r.Z)({pathname:b.pathname,hash:"",search:""},"string"==typeof e?m(e):e,{state:t,key:f()})}function j(e,t){return[{usr:e.state,key:e.key,idx:t},_(e)]}function C(e,t,n){return!x.length||(x.call({action:e,location:t,retry:n}),!1)}function E(e){c=e;var t=l();v=t[0],b=t[1],y.call({action:c,location:b})}function S(e){a.go(e)}return null==v&&(v=0,a.replaceState((0,r.Z)({},a.state,{idx:v}),"")),{get action(){return c},get location(){return b},createHref:_,push:function e(t,r){var i=o.Push,s=w(t,r);if(C(i,s,(function(){e(t,r)}))){var l=j(s,v+1),u=l[0],c=l[1];try{a.pushState(u,"",c)}catch(e){n.location.assign(c)}E(i)}},replace:function e(t,n){var r=o.Replace,i=w(t,n);if(C(r,i,(function(){e(t,n)}))){var s=j(i,v),l=s[0],u=s[1];a.replaceState(l,"",u),E(r)}},go:S,back:function(){S(-1)},forward:function(){S(1)},listen:function(e){return y.push(e)},block:function(e){var t=x.push(e);return 1===x.length&&n.addEventListener(i,d),function(){t(),x.length||n.removeEventListener(i,d)}}}}function l(e){void 0===e&&(e={});var t=e.window,n=void 0===t?document.defaultView:t,a=n.history;function l(){var e=m(n.location.hash.substr(1)),t=e.pathname,o=void 0===t?"/":t,r=e.search,i=void 0===r?"":r,s=e.hash,l=void 0===s?"":s,u=a.state||{};return[u.idx,{pathname:o,search:i,hash:l,state:u.usr||null,key:u.key||"default"}]}var u=null;function c(){if(u)_.call(u),u=null;else{var e=o.Pop,t=l(),n=t[0],r=t[1];if(_.length){if(null!=n){var i=b-n;i&&(u={action:e,location:r,retry:function(){O(-1*i)}},O(i))}}else S(e)}}n.addEventListener(s,c),n.addEventListener("hashchange",(function(){p(l()[1])!==p(y)&&c()}));var g=o.Pop,v=l(),b=v[0],y=v[1],x=h(),_=h();function w(e){return function(){var e=document.querySelector("base"),t="";if(e&&e.getAttribute("href")){var o=n.location.href,r=o.indexOf("#");t=-1===r?o:o.slice(0,r)}return t}()+"#"+("string"==typeof e?e:p(e))}function j(e,t){return void 0===t&&(t=null),(0,r.Z)({pathname:y.pathname,hash:"",search:""},"string"==typeof e?m(e):e,{state:t,key:f()})}function C(e,t){return[{usr:e.state,key:e.key,idx:t},w(e)]}function E(e,t,n){return!_.length||(_.call({action:e,location:t,retry:n}),!1)}function S(e){g=e;var t=l();b=t[0],y=t[1],x.call({action:g,location:y})}function O(e){a.go(e)}return null==b&&(b=0,a.replaceState((0,r.Z)({},a.state,{idx:b}),"")),{get action(){return g},get location(){return y},createHref:w,push:function e(t,r){var i=o.Push,s=j(t,r);if(E(i,s,(function(){e(t,r)}))){var l=C(s,b+1),u=l[0],c=l[1];try{a.pushState(u,"",c)}catch(e){n.location.assign(c)}S(i)}},replace:function e(t,n){var r=o.Replace,i=j(t,n);if(E(r,i,(function(){e(t,n)}))){var s=C(i,b),l=s[0],u=s[1];a.replaceState(l,"",u),S(r)}},go:O,back:function(){O(-1)},forward:function(){O(1)},listen:function(e){return x.push(e)},block:function(e){var t=_.push(e);return 1===_.length&&n.addEventListener(i,d),function(){t(),_.length||n.removeEventListener(i,d)}}}}function u(e){void 0===e&&(e={});var t=e,n=t.initialEntries,i=void 0===n?["/"]:n,s=t.initialIndex,a=i.map((function(e){return(0,r.Z)({pathname:"/",search:"",hash:"",state:null,key:f()},"string"==typeof e?m(e):e)})),l=c(null==s?a.length-1:s,0,a.length-1),u=o.Pop,d=a[l],g=h(),v=h();function b(e,t){return void 0===t&&(t=null),(0,r.Z)({pathname:d.pathname,search:"",hash:""},"string"==typeof e?m(e):e,{state:t,key:f()})}function y(e,t,n){return!v.length||(v.call({action:e,location:t,retry:n}),!1)}function x(e,t){u=e,d=t,g.call({action:u,location:d})}function _(e){var t=c(l+e,0,a.length-1),n=o.Pop,r=a[t];y(n,r,(function(){_(e)}))&&(l=t,x(n,r))}return{get index(){return l},get action(){return u},get location(){return d},createHref:function(e){return"string"==typeof e?e:p(e)},push:function e(t,n){var r=o.Push,i=b(t,n);y(r,i,(function(){e(t,n)}))&&(l+=1,a.splice(l,a.length,i),x(r,i))},replace:function e(t,n){var r=o.Replace,i=b(t,n);y(r,i,(function(){e(t,n)}))&&(a[l]=i,x(r,i))},go:_,back:function(){_(-1)},forward:function(){_(1)},listen:function(e){return g.push(e)},block:function(e){return v.push(e)}}}function c(e,t,n){return Math.min(Math.max(e,t),n)}function d(e){e.preventDefault(),e.returnValue=""}function h(){var e=[];return{get length(){return e.length},push:function(t){return e.push(t),function(){e=e.filter((function(e){return e!==t}))}},call:function(t){e.forEach((function(e){return e&&e(t)}))}}}function f(){return Math.random().toString(36).substr(2,8)}function p(e){var t=e.pathname,n=void 0===t?"/":t,o=e.search,r=void 0===o?"":o,i=e.hash,s=void 0===i?"":i;return r&&"?"!==r&&(n+="?"===r.charAt(0)?r:"?"+r),s&&"#"!==s&&(n+="#"===s.charAt(0)?s:"#"+s),n}function m(e){var t={};if(e){var n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));var o=e.indexOf("?");o>=0&&(t.search=e.substr(o),e=e.substr(0,o)),e&&(t.pathname=e)}return t}},8680:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};t.__esModule=!0,t.Ajax=void 0,t.Ajax=function(e,t){return n(this,void 0,void 0,(function(){var n,r,i;return o(this,(function(o){switch(o.label){case 0:return n={method:"POST",headers:{"Content-Type":"application/json;charset=utf-8"},body:JSON.stringify(t)},[4,fetch(e,n)];case 1:return[4,(r=o.sent()).json()];case 2:return i=o.sent(),[2,{status:r.status,body:i}]}}))}))}},6945:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};t.__esModule=!0,t.Data=void 0;var i=n(9191),s=n(6703),a=n(221),l=function(){function e(e,t){var n=this;this.published="private",this.sharedWith=[],this.deleted=!1,this.fireChangeEvent=function(){return o(n,void 0,void 0,(function(){var e,t,n;return r(this,(function(o){switch(o.label){case 0:return e=this.key.stringifyLocal(),t=this.jormun.onDataChange,[4,this.getEventPayload()];case 1:return n=o.sent(),[4,this.jormun.onAnyDataChange.triggerAsync(n)];case 2:return o.sent(),t.hasOwnProperty(e)?[4,t[e].triggerAsync(n)]:[3,4];case 3:o.sent(),o.label=4;case 4:return[2]}}))}))},this.getKey=function(){return n.key},this.getFragment=function(){return n.key.fragment},this.jormun=e,this.key=t}return e.prototype.getRaw=function(){return o(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,this.jormun.local.getValue(this.key)];case 1:return[2,e.sent()]}}))}))},e.prototype.get=function(){return o(this,void 0,void 0,(function(){var e;return r(this,(function(t){switch(t.label){case 0:return[4,this.getRaw()];case 1:return(e=t.sent())?[2,JSON.parse(e.json)]:[2,null]}}))}))},e.prototype.getEventPayload=function(){return o(this,void 0,void 0,(function(){var e;return r(this,(function(t){switch(t.label){case 0:return this.deleted?[2,{data:this,raw:null,value:null,key:this.getKey()}]:(e={data:this},[4,this.getRaw()]);case 1:return e.raw=t.sent(),[4,this.get()];case 2:return e.value=t.sent(),e.key=this.getKey(),[2,e]}}))}))},e.prototype.preset=function(e,t,n,i){return o(this,void 0,void 0,(function(){var o,s;return r(this,(function(r){switch(r.label){case 0:return this.deleted?[2]:[4,this.getRaw()];case 1:return o=r.sent(),this.published=n,s={timestamp:t,isDirty:i,json:JSON.stringify(e)},[4,this.jormun.local.setValue(this.key,s)];case 2:return r.sent(),(null==o?void 0:o.json)===s.json?[3,4]:[4,this.fireChangeEvent()];case 3:r.sent(),r.label=4;case 4:return[2]}}))}))},e.prototype.set=function(e){var t;return o(this,void 0,void 0,(function(){var n;return r(this,(function(o){switch(o.label){case 0:return[4,this.getRaw()];case 1:return n=o.sent(),[4,this.preset(e,null!==(t=null==n?void 0:n.timestamp)&&void 0!==t?t:(0,a.Unix)(),this.published,!0)];case 2:return o.sent(),[2]}}))}))},e.prototype.remove=function(){return o(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return this.getFragment()==s.Jormun.CHANGED_KEYS_KEY?[2]:[4,this.jormun.local.removeValue(this.key)];case 1:return e.sent(),delete this.jormun.data[this.key.userId][this.key.fragment],[4,this.jormun.bumpChangedKeys()];case 2:return e.sent(),this.deleted=!0,[4,this.fireChangeEvent()];case 3:return e.sent(),[2]}}))}))},e.prototype.onChange=function(e,t){var n=this.key.stringifyLocal(),o=this.jormun.onDataChange;o.hasOwnProperty(n)||(o[n]=new i.JormunEvent),o[n].on(e,t),this.getEventPayload().then((function(n){return e.call(t,n)}))},e.prototype.offChange=function(e,t){var n=this.key.stringifyLocal(),o=this.jormun.onDataChange;o.hasOwnProperty(n)&&o[n].off(e,t)},e.prototype.isPublished=function(){return this.published},e.prototype.getSharedWith=function(){return this.sharedWith},e.prototype.setSharedWith=function(e,t){for(var n in this.sharedWith=e,this.sharedWith)this.sharedWith[n]==t&&(this.sharedWith[n]=0)},e}();t.Data=l},9191:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};t.__esModule=!0,t.JormunEvent=void 0;var r=function(){function e(){this.handlers=[]}return e.prototype.on=function(e,t){this.handlers.push({handler:e,context:t})},e.prototype.off=function(e,t){this.handlers=this.handlers.filter((function(n){return n.handler!==e||n.context!==t}))},e.prototype.triggerAsync=function(e){return n(this,void 0,void 0,(function(){var t,n,r,i;return o(this,(function(o){switch(o.label){case 0:t=0,n=this.handlers,o.label=1;case 1:return t<n.length?(r=n[t],(i=r.handler.call(r.context,e))&&"object"==typeof i?[4,i]:[3,3]):[3,4];case 2:o.sent(),o.label=3;case 3:return t++,[3,1];case 4:return[2]}}))}))},e.prototype.triggerSync=function(e){for(var t=0,n=this.handlers;t<n.length;t++){var o=n[t];o.handler.call(o.context,e)}},e}();t.JormunEvent=r},5193:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};t.__esModule=!0,t.IndexedDBWrap=void 0;var i=n(5263),s=function(){function e(e){this.app=e}var t;return e.prototype.migrate=function(e){e.objectStoreNames.contains("v1")||(e.createObjectStore("v1"),e.createObjectStore("data",{keyPath:"key"}))},e.prototype.db=function(){return o(this,void 0,void 0,(function(){var e;return r(this,(function(t){switch(t.label){case 0:return this._db?[3,2]:(e=this,[4,this.createDb(this.migrate)]);case 1:e._db=t.sent(),t.label=2;case 2:return[2,this._db]}}))}))},e.prototype.createDb=function(e){return o(this,void 0,void 0,(function(){var t=this;return r(this,(function(n){return[2,new Promise((function(n,o){var r=window.indexedDB.open(t.app,1);r.onupgradeneeded=function(){return e(r.result)},r.onsuccess=function(){return n(r.result)},r.onerror=function(e){return o(e)}}))]}))}))},e.prototype.request=function(e){return o(this,void 0,void 0,(function(){return r(this,(function(t){return[2,new Promise((function(t,n){e.onsuccess=function(){return t(e.result)},e.onerror=function(e){return n(e)}}))]}))}))},e.prototype.getKeys=function(){return o(this,void 0,void 0,(function(){var e,t,n,o,s,a,l,u,c;return r(this,(function(r){switch(r.label){case 0:return[4,this.db()];case 1:return e=r.sent(),t=e.transaction("data","readonly"),n=t.objectStore("data"),[4,this.request(n.getAllKeys())];case 2:for(o=r.sent(),s=[],a=0,l=o;a<l.length;a++)u=l[a],(c=i.Key.parse(u.valueOf(),-1))&&s.push(c);return[2,s]}}))}))},e.prototype.setValue=function(e,t){return o(this,void 0,void 0,(function(){var n,o,i;return r(this,(function(r){switch(r.label){case 0:return[4,this.db()];case 1:return n=r.sent(),o=n.transaction("data","readwrite"),i=o.objectStore("data"),[4,this.request(i.put({key:e.stringifyLocal(),value:JSON.stringify(t)}))];case 2:return r.sent(),[2]}}))}))},e.prototype.setValues=function(e){return o(this,void 0,void 0,(function(){var t,n,o,i,s,a,l;return r(this,(function(r){switch(r.label){case 0:return[4,this.db()];case 1:for(s in t=r.sent(),n=t.transaction("data","readwrite"),o=n.objectStore("data"),i=[],e)i.push(s);a=0,r.label=2;case 2:return a<i.length?(l=i[a],[4,this.request(o.put({key:l,value:JSON.stringify(e[l])}))]):[3,5];case 3:r.sent(),r.label=4;case 4:return a++,[3,2];case 5:return[2]}}))}))},e.prototype.getValue=function(e){return o(this,void 0,void 0,(function(){var t,n,o,i;return r(this,(function(r){switch(r.label){case 0:return[4,this.db()];case 1:return t=r.sent(),n=t.transaction("data","readonly"),o=n.objectStore("data"),[4,this.request(o.get(e.stringifyLocal()))];case 2:return(i=r.sent())?[2,JSON.parse(i.value)]:[2,null]}}))}))},e.prototype.getValues=function(e){return o(this,void 0,void 0,(function(){var t,n,o,i,s,a,l,u,c;return r(this,(function(r){switch(r.label){case 0:return t={},[4,this.db()];case 1:n=r.sent(),o=n.transaction("data","readonly"),i=o.objectStore("data"),s=0,a=e,r.label=2;case 2:return s<a.length?(l=a[s],u=l.stringifyLocal(),[4,this.request(i.get(u))]):[3,5];case 3:c=r.sent(),t[u]=JSON.parse(c.value),r.label=4;case 4:return s++,[3,2];case 5:return[2,t]}}))}))},e.prototype.removeValue=function(e){return o(this,void 0,void 0,(function(){var t,n,o;return r(this,(function(r){switch(r.label){case 0:return[4,this.db()];case 1:return t=r.sent(),n=t.transaction("data","readwrite"),o=n.objectStore("data"),[4,this.request(o.delete(e.stringifyLocal()))];case 2:return r.sent(),[2]}}))}))},t=e,e.isAvailable=function(n){return o(void 0,void 0,void 0,(function(){var o;return r(t,(function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,new e(n).db()];case 1:return t.sent(),[2,!0];case 2:return o=t.sent(),console.log(o),[2,!1];case 3:return[2]}}))}))},e}();t.IndexedDBWrap=s},6703:function(e,t,n){"use strict";var o=this&&this.__assign||function(){return o=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},o.apply(this,arguments)},r=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))},i=this&&this.__generator||function(e,t){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};t.__esModule=!0,t.Jormun=t.JormunStatus=void 0;var s=n(3434),a=n(6945),l=n(5263),u=n(3344),c=n(3457),d=n(9191),h=n(221),f=n(5193),p=n(9354),m=n(6949),g=function(){this.initialized=!1,this.connected=!1,this.loggedIn=!1,this.empty=!1,this.syncing=!1,this.admin=!1};t.JormunStatus=g;var v=function(){function e(){var e=this;this.onDataChange={},this.onAnyDataChange=new d.JormunEvent,this.onSync=new d.JormunEvent,this.onSetup=new d.JormunEvent,this.hashedRemote=function(){return r(e,void 0,void 0,(function(){var e,t;return i(this,(function(n){switch(n.label){case 0:return[4,null===(e=this.local)||void 0===e?void 0:e.getValue(this.REMOTE_SETTINGS_KEY)];case 1:return[2,null!==(t=n.sent())&&void 0!==t?t:null]}}))}))}}return e.prototype.initialize=function(t,n,o){return void 0===o&&(o=null),r(this,void 0,void 0,(function(){var r,s;return i(this,(function(i){switch(i.label){case 0:return o?(this.local=o,[3,3]):[3,1];case 1:return[4,f.IndexedDBWrap.isAvailable(t)];case 2:i.sent()?this.local=new f.IndexedDBWrap(t):u.LocalStorageWrap.isAvailable()?this.local=new u.LocalStorageWrap:this.local=new p.MemoryStorage,i.label=3;case 3:return this.alertDelegate=null!=n?n:e.defaultAlertDelegate,this.REMOTE_SETTINGS_KEY=new l.Key(t,-9999,"REMOTE_SETTINGS"),this.data={},this.status=new g,r=this.setup,s={app:t},[4,this.local.getValue(this.REMOTE_SETTINGS_KEY)];case 4:return[4,r.apply(this,[(s.remote=i.sent(),s)])];case 5:return i.sent(),[2]}}))}))},e.getAnonymousRemote=function(t,n,o){return r(this,void 0,void 0,(function(){var r;return i(this,(function(i){switch(i.label){case 0:return[4,(r=new e).initialize(t,o,new p.MemoryStorage)];case 1:return i.sent(),[4,r.login({host:n,username:"",password:"",token:"",downloadSharedData:!1})];case 2:return i.sent(),[2,r.getRemote()]}}))}))},e.prototype.getApp=function(){return this.options.app},e.prototype.getRemote=function(){return this.remote},e.prototype.alert=function(e,t){return r(this,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return[4,this.alertDelegate({title:e,message:t,options:[]})];case 1:return n.sent(),[2]}}))}))},e.prototype.ask=function(e,t,n){return r(this,void 0,void 0,(function(){return i(this,(function(o){return[2,this.alertDelegate({title:e,message:t,options:n})]}))}))},e.prototype.setup=function(e){var t,n,o,s,l,u;return r(this,void 0,void 0,(function(){var r,d,h,f,p,m,g,v,b,y,x,_,w;return i(this,(function(i){switch(i.label){case 0:return r=null,this.options=e,e.remote?(d=new c.JormunSyncRemote(this,e),this.remote=d,[4,this.local.getValue(this.REMOTE_SETTINGS_KEY)]):[3,4];case 1:return r=i.sent(),[4,d.checkConnection()];case 2:return i.sent(),[4,this.local.setValue(this.REMOTE_SETTINGS_KEY,d.jormunOptions.remote)];case 3:i.sent(),i.label=4;case 4:return[4,this.local.getKeys()];case 5:for(p in h=i.sent(),f={},h)(m=h[p]).stringifyLocal()!=this.REMOTE_SETTINGS_KEY.stringifyLocal()&&(f.hasOwnProperty(m.userId)||(f[m.userId]={}),this.data[m.userId]&&this.data[m.userId].hasOwnProperty(m.fragment)?f[m.userId][m.fragment]=this.data[m.userId][m.fragment]:f[m.userId][m.fragment]=new a.Data(this,m));return this.data=f,this.status.initialized=!0,g=this.status,(v=!!this.remote)?[4,this.remote.connected()]:[3,7];case 6:v=i.sent(),i.label=7;case 7:return g.connected=v,this.status.loggedIn=!1,this.status.empty=!1,this.status.admin=!1,(b=this.remote)?[4,this.remote.loggedIn()]:[3,9];case 8:b=i.sent(),i.label=9;case 9:return b?(this.status.loggedIn=!0,y=this.status,[4,this.remote.empty()]):[3,21];case 10:return y.empty=null!==(n=null===(t=i.sent())||void 0===t?void 0:t.empty)&&void 0!==n&&n,this.status.admin=null!==(s=null===(o=this.remote.cachedStatus())||void 0===o?void 0:o.isAdmin)&&void 0!==s&&s,x=!1,[4,this.local.getKeys()];case 11:return i.sent().length<=1?(x=!0,[3,19]):[3,12];case 12:return r||!e.remote?[3,14]:[4,this.ask("New User","You seem to have logged in to a new user, ".concat(e.remote.username,"@").concat(e.remote.host,". Would you like to clear local data and redownload from ").concat(e.remote.username,"?"),["Yes","No"])];case 13:return _=i.sent(),x=0==_,[3,19];case 14:return!e.remote||!r||r.username==(null===(l=e.remote)||void 0===l?void 0:l.username)&&r.host==(null===(u=e.remote)||void 0===u?void 0:u.host)?[3,16]:[4,this.ask("New User","You seem to have switched from user ".concat(r.username,"@").concat(r.host," to ").concat(e.remote.username,"@").concat(e.remote.host,". Would you like to clear local data and redownload from ").concat(e.remote.username,"?"),["Yes","No"])];case 15:return _=i.sent(),x=0==_,[3,19];case 16:return(w=!r)?[4,this.isLocalDirty()]:[3,18];case 17:w=!i.sent().isDirty,i.label=18;case 18:w&&(x=!0),i.label=19;case 19:return[4,this.sync(x)];case 20:i.sent(),i.label=21;case 21:return[4,this.onSetup.triggerAsync()];case 22:return i.sent(),[2]}}))}))},e.prototype.login=function(e){return r(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return e.password=(0,s.sha512)(e.password),e.host.startsWith("http")||(e.host="https://".concat(e.host)),[4,this.setup({app:this.options.app,remote:e})];case 1:return t.sent(),[2]}}))}))},e.prototype.sync=function(t){var n,o,s;return void 0===t&&(t=!1),r(this,void 0,void 0,(function(){var r,a,u,c,d,f,p,g,v,b,y,x,_,w,j,C,E,S,O,N,T,M,k=this;return i(this,(function(i){switch(i.label){case 0:return(r=!this.remote)?[3,2]:[4,this.remote.loggedIn()];case 1:r=!i.sent(),i.label=2;case 2:return r?[2]:[4,m.Wait.until((function(){return!k.status.syncing}))];case 3:return i.sent(),this.status.syncing=!0,[4,this.onSync.triggerAsync(!0)];case 4:if(i.sent(),!t)return[3,8];a=0,u=this.fragments(0),i.label=5;case 5:return a<u.length?(c=u[a],[4,null===(n=this.me(c))||void 0===n?void 0:n.remove()]):[3,8];case 6:i.sent(),i.label=7;case 7:return a++,[3,5];case 8:return[4,this.remote.status()];case 9:return d=i.sent(),[4,this.remote.keys()];case 10:return f=i.sent(),d&&f?[4,this.setSharedWith(d,f)]:[2];case 11:return i.sent(),[4,this.compareRemoteKeys(d,f)];case 12:return p=i.sent(),t&&(p.upload=!1,p.download=!0),p.download&&p.upload?[4,this.ask("Syncing","The local and remote data cannot be combined. Which do you want to keep?",["Local (".concat(p.localVersion,")"),"Remote (".concat(p.remoteVersion,")"),"Cancel"])]:[3,14];case 13:0==(g=i.sent())?p.download=!1:(1==g||(p.download=!1),p.upload=!1),i.label=14;case 14:return p.upload?p.missingLocal.length>0?[4,this.remote.delete(p.missingLocal)]:[3,16]:[3,23];case 15:i.sent(),i.label=16;case 16:return[4,this.getUploadData(d,p.newerLocal.concat(p.missingRemote))];case 17:return v=i.sent(),[4,this.remote.set(v)];case 18:for(x in b=i.sent(),y=[],b)y.push(x);_=0,i.label=19;case 19:return _<y.length?(w=y[_],(j=l.Key.parse(w,d.userId))?(C=j.stringifyRemote(d.userId),[4,(E=this.data[j.userId][j.fragment]).preset(v[C],b[w],E.isPublished(),!1)]):[3,21]):[3,22];case 20:i.sent(),i.label=21;case 21:return _++,[3,19];case 22:return[3,27];case 23:return p.download?[4,this.removeLocalKeys(p.missingRemote)]:[3,27];case 24:return i.sent(),(S=p.missingLocal.concat(p.newerRemote)).length>0?[4,this.remote.get(S)]:[3,27];case 25:return(O=i.sent())?[4,this.processDataResponse(d,f,O)]:[3,27];case 26:i.sent(),i.label=27;case 27:return(null===(o=this.options.remote)||void 0===o?void 0:o.downloadSharedData)?[4,this.removeLocalKeys(p.deleteShared)]:[3,31];case 28:return i.sent(),p.newShared.length>0?[4,this.remote.get(p.newShared)]:[3,31];case 29:return(O=i.sent())?[4,this.processDataResponse(d,f,O)]:[3,31];case 30:i.sent(),i.label=31;case 31:return(N=this.me(e.CHANGED_KEYS_KEY))?[4,N.getRaw()]:[3,34];case 32:return T=i.sent(),M=null!==(s=null==T?void 0:T.timestamp)&&void 0!==s?s:(0,h.Unix)(),[4,N.preset(M,M,N.isPublished(),!1)];case 33:i.sent(),i.label=34;case 34:return this.status.syncing=!1,[4,this.onSync.triggerAsync(!1)];case 35:return i.sent(),[2]}}))}))},e.prototype.compareRemoteKeys=function(t,n){var o,s,a,u,c;return r(this,void 0,void 0,(function(){var r,d,f,p,m,g,v,b,y,x,_,w,j,C,E,S,O,N,T,M,k,R,P,I,A,D,B,F,L,U,K;return i(this,(function(i){switch(i.label){case 0:return[4,this.add(e.CHANGED_KEYS_KEY,(0,h.Unix)())];case 1:if(i.sent(),r=[],d=[],f=[],p=[],m=[],g=[],v=0,b=!1,y=0,x={},!t||!n)return[3,15];for(w in _=[],n)_.push(w);j=0,i.label=2;case 2:return j<_.length?(D=_[j],C=l.Key.parse(D,t.userId),E=l.Key.parse(D,-1),C&&E?(S=E.userId==t.userId,O=n[D].timestamp,y=Math.max(O,y),this.data.hasOwnProperty(C.userId)&&this.data[C.userId].hasOwnProperty(C.fragment)?[3,3]:((S?r:m).push(C),[3,5])):[3,5]):[3,6];case 3:return[4,this.data[C.userId][C.fragment].getRaw()];case 4:(B=i.sent())&&(x[C.stringifyLocal()]=B),S&&null!==(o=null==B?void 0:B.isDirty)&&void 0!==o&&o&&f.push(C),N=null!==(s=null==B?void 0:B.timestamp)&&void 0!==s?s:0,O!=N&&(S?p:m).push(C),i.label=5;case 5:return j++,[3,2];case 6:for(M in T=[],this.data)T.push(M);k=0,i.label=7;case 7:if(!(k<T.length))return[3,14];for(I in R=T[k],P=[],this.data[R])P.push(I);A=0,i.label=8;case 8:return A<P.length?(L=P[A],D=this.data[R][L].getKey(),null===(a=x[D.stringifyLocal()])||void 0===a?[3,9]:(F=a,[3,11])):[3,13];case 9:return[4,this.data[R][L].getRaw()];case 10:F=i.sent(),i.label=11;case 11:B=F,b=b||null!==(u=null==B?void 0:B.isDirty)&&void 0!==u&&u,v=Math.max(v,B.timestamp),n&&!n.hasOwnProperty(D.stringifyRemote(null!==(c=null==t?void 0:t.userId)&&void 0!==c?c:-1))&&("0"==R?B.isDirty?f.push(D):d.push(D):g.push(D)),i.label=12;case 12:return A++,[3,8];case 13:return k++,[3,7];case 14:for(L in this.data[t.userId])g.push(this.data[t.userId][L].getKey());i.label=15;case 15:return U=!1,K=!1,f.length>0&&(K=!0),p.length>0&&(U=!0),d.find((function(t){return t.fragment==e.CHANGED_KEYS_KEY}))&&(K=!0,this.fragments(0).length>0&&(U=!0)),[2,{download:U,upload:K,missingLocal:r,missingRemote:d,newerLocal:f,newerRemote:p,newShared:m,deleteShared:g,localVersion:this.timeToVersion(v,b),remoteVersion:this.timeToVersion(y,!1)}]}}))}))},e.prototype.timeToVersion=function(e,t){var n=new Date(e);return"".concat(n.getFullYear().toString().substr(2),"-").concat((n.getMonth()+1).toString().padStart(2,"0"),"-").concat(n.getDate().toString().padStart(2,"0"),"-").concat(n.getHours().toString().padStart(2,"0"),":").concat(n.getMinutes().toString().padStart(2,"0")).concat(t?":new":"")},e.prototype.different=function(){return r(this,void 0,void 0,(function(){var e,t,n,o;return i(this,(function(r){switch(r.label){case 0:return(e=!this.remote)?[3,2]:[4,this.remote.loggedIn()];case 1:e=!r.sent(),r.label=2;case 2:return e?[2,{different:!1,comparison:null}]:[4,this.remote.status()];case 3:return t=r.sent(),[4,this.remote.keys()];case 4:return n=r.sent(),t&&n?(this.setSharedWith(t,n),[4,this.compareRemoteKeys(t,n)]):[2,{different:!1,comparison:null}];case 5:return[2,{different:(o=r.sent()).download||o.upload,comparison:o}]}}))}))},e.prototype.isLocalDirty=function(){return r(this,void 0,void 0,(function(){var e,t,n,o,r,s,a,l;return i(this,(function(i){switch(i.label){case 0:if(e=0,t=!1,!this.data.hasOwnProperty("0"))return[3,4];for(o in n=[],this.data[0])n.push(o);r=0,i.label=1;case 1:return r<n.length?(s=n[r],this.data[0][s]?[4,this.data[0][s].getRaw()]:[3,3]):[3,4];case 2:(a=i.sent())&&(a.isDirty&&(t=!0),a.timestamp>e&&(e=a.timestamp)),i.label=3;case 3:return r++,[3,1];case 4:return l=this.timeToVersion(e,t),[2,{isDirty:t,localVersion:l}]}}))}))},e.prototype.getUploadData=function(e,t){return r(this,void 0,void 0,(function(){var n,o,r,s,a,l,u,c,d;return i(this,(function(i){switch(i.label){case 0:for(r in n={},o=[],t)o.push(r);s=0,i.label=1;case 1:return s<o.length?(a=o[s],l=t[a],u=l.stringifyRemote(e.userId),c=n,d=u,[4,this.data[l.userId][l.fragment].get()]):[3,4];case 2:c[d]=i.sent(),i.label=3;case 3:return s++,[3,1];case 4:return[2,n]}}))}))},e.prototype.removeLocalKeys=function(e){return r(this,void 0,void 0,(function(){var t,n,o,r,s;return i(this,(function(i){switch(i.label){case 0:for(n in t=[],e)t.push(n);o=0,i.label=1;case 1:return o<t.length?(r=t[o],(s=e[r]).stringifyLocal()==this.REMOTE_SETTINGS_KEY.stringifyLocal()?[3,3]:[4,this.data[s.userId][s.fragment].remove()]):[3,4];case 2:i.sent(),delete this.data[s.userId][s.fragment],i.label=3;case 3:return o++,[3,1];case 4:return[2]}}))}))},e.prototype.processDataResponse=function(e,t,n){return r(this,void 0,void 0,(function(){var o,r,s,u,c;return i(this,(function(i){switch(i.label){case 0:for(r in o=[],n)o.push(r);s=0,i.label=1;case 1:return s<o.length?(u=o[s],(c=l.Key.parse(u,e.userId))?(this.data.hasOwnProperty(c.userId)||(this.data[c.userId]={}),this.data[c.userId].hasOwnProperty(c.fragment)||(this.data[c.userId][c.fragment]=new a.Data(this,c)),[4,this.data[c.userId][c.fragment].preset(n[u],t[u].timestamp,t[u].public,!1)]):[3,3]):[3,4];case 2:i.sent(),this.data[c.userId][c.fragment].setSharedWith(t[u].sharedWith,e.userId),i.label=3;case 3:return s++,[3,1];case 4:return[2]}}))}))},e.prototype.setSharedWith=function(e,t){return r(this,void 0,void 0,(function(){var n,o,r,s,a,u,c;return i(this,(function(i){switch(i.label){case 0:for(o in n=[],t)n.push(o);r=0,i.label=1;case 1:return r<n.length?(s=n[r],(a=l.Key.parse(s,e.userId))?(this.data.hasOwnProperty(a.userId)||(this.data[a.userId]={}),this.data[a.userId].hasOwnProperty(a.fragment)?[4,(u=this.data[a.userId][a.fragment]).getRaw()]:[3,5]):[3,5]):[3,6];case 2:return(c=i.sent())?[4,u.preset(JSON.parse(c.json),c.timestamp,t[s].public,c.isDirty)]:[3,4];case 3:i.sent(),i.label=4;case 4:u.setSharedWith(t[s].sharedWith,e.userId),i.label=5;case 5:return r++,[3,1];case 6:return[2]}}))}))},e.prototype.add=function(e,t){return r(this,void 0,void 0,(function(){return i(this,(function(n){switch(n.label){case 0:return this.data.hasOwnProperty(0)||(this.data[0]={}),this.data[0].hasOwnProperty(e)?[3,3]:(this.data[0][e]=new a.Data(this,new l.Key(this.options.app,0,e)),[4,this.data[0][e].preset(t,-(0,h.Unix)(),"private",!0)]);case 1:return n.sent(),[4,this.bumpChangedKeys()];case 2:n.sent(),n.label=3;case 3:return[2,this.data[0][e]]}}))}))},e.prototype.me=function(e){var t;return this.data.hasOwnProperty(0)&&null!==(t=this.data[0][e])&&void 0!==t?t:null},e.prototype.user=function(e,t){var n;return this.data.hasOwnProperty(e)&&null!==(n=this.data[e][t])&&void 0!==n?n:null},e.prototype.bumpChangedKeys=function(){return r(this,void 0,void 0,(function(){return i(this,(function(t){switch(t.label){case 0:return[4,this.add(e.CHANGED_KEYS_KEY,(0,h.Unix)())];case 1:return[4,t.sent().set((0,h.Unix)())];case 2:return t.sent(),[2]}}))}))},e.prototype.users=function(){var e=[];for(var t in this.data)e.push(parseInt(t));return e},e.prototype.fragments=function(t){var n=[];if(this.data.hasOwnProperty(t))for(var o in this.data[t])o!=e.CHANGED_KEYS_KEY&&n.push(o);return n},e.defaultAlertDelegate=function(e){return r(this,void 0,void 0,(function(){var t;return i(this,(function(n){if(e.options.length<1)return alert(e.message),[2,-1];for(t=0;;t=(t+1)%e.options.length)if(window.confirm("".concat(e.message,"\n\n").concat(e.options.join(" | "),"\n\n").concat(e.options[t],"?")))return[2,t];return[2]}))}))},e.prototype.friends=function(){var e,t,n;return null!==(n=null===(t=null===(e=this.remote)||void 0===e?void 0:e.cachedStatus())||void 0===t?void 0:t.friends)&&void 0!==n?n:null},e.prototype.export=function(){var e;return r(this,void 0,void 0,(function(){var t,n,o,r,s,a;return i(this,(function(i){switch(i.label){case 0:t={},n=0,o=this.fragments(0),i.label=1;case 1:return n<o.length?(r=o[n],s=t,a=r,[4,null===(e=this.me(r))||void 0===e?void 0:e.get()]):[3,4];case 2:s[a]=i.sent(),i.label=3;case 3:return n++,[3,1];case 4:return[2,JSON.stringify(t)]}}))}))},e.prototype.import=function(e){var t;return r(this,void 0,void 0,(function(){var n,o,r,s,a,l,u,c;return i(this,(function(i){switch(i.label){case 0:return[4,this.ask("Import new data?","Do you want to import this data? This will clear your current local data.",["Yes","No"])];case 1:if(0!=i.sent())return[2];i.label=2;case 2:i.trys.push([2,11,,12]),n=JSON.parse(e),o=0,r=this.fragments(0),i.label=3;case 3:return o<r.length?(u=r[o],[4,null===(t=this.me(u))||void 0===t?void 0:t.remove()]):[3,6];case 4:i.sent(),i.label=5;case 5:return o++,[3,3];case 6:for(a in s=[],n)s.push(a);l=0,i.label=7;case 7:return l<s.length?(u=s[l],[4,this.add(u,n[u])]):[3,10];case 8:i.sent(),i.label=9;case 9:return l++,[3,7];case 10:return this.alert("Import success!",""),[3,12];case 11:return c=i.sent(),this.alert("Import failed",c),[3,12];case 12:return[2]}}))}))},e.prototype.getStatus=function(){return o({},this.status)},e.CHANGED_KEYS_KEY="CHANGED_KEYS",e}();t.Jormun=v},3457:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};t.__esModule=!0,t.JormunSyncRemote=void 0;var i=n(3434),s=n(8680),a=n(221),l=function(){function e(e,t){this.checkingConnection=null,this.cache={},this.cacheTime=2e3,this.checkedConnection=!1,this.jormun=e,this.jormunOptions=t,this.checkConnection()}return e.prototype.checkConnection=function(){var e,t,n;return o(this,void 0,void 0,(function(){var o,i,s,a,l;return r(this,(function(r){switch(r.label){case 0:return null==this.checkingConnection?[3,2]:[4,this.checkingConnection];case 1:return r.sent(),[2];case 2:return this.checkedConnection?[3,8]:(o=null,this.checkingConnection=new Promise((function(e){return o=e})),[4,this.empty()]);case 3:return i=r.sent(),this.isConnected=!!i,this.isConnected&&!(null==i?void 0:i.empty)&&(null===(e=this.jormunOptions.remote)||void 0===e?void 0:e.password)&&this.jormunOptions.remote.username?[4,this.login()]:[3,5];case 4:s=r.sent(),this.jormunOptions.remote.token=null!==(t=null==s?void 0:s.token)&&void 0!==t?t:"",this.jormunOptions.remote.password="",r.label=5;case 5:return a=this,(l=this.isConnected&&!!(null===(n=this.jormunOptions.remote)||void 0===n?void 0:n.token))?[4,this.status()]:[3,7];case 6:l=!!r.sent(),r.label=7;case 7:a.isLoggedIn=l,this.checkedConnection=!0,o(),r.label=8;case 8:return[2]}}))}))},e.prototype.statusToString=function(e){switch(e){case 200:return"OK";case 400:return"Invalid Request";case 401:return"Invalid Login";case 404:return"Not Found";case 413:return"Storage Space Exceeded";case 429:return"Too Many Requests - Please Wait A Bit";case 500:return"Server Error";case 503:return"Server is down for maintanence"}return e.toString().startsWith("2")?"Probably OK":e.toString().startsWith("4")?"Unknown Request Error":e.toString().startsWith("5")?"Unknown Server Error":"Unknown Error"},e.prototype.request=function(e){return o(this,void 0,void 0,(function(){var t,n,o;return r(this,(function(r){switch(r.label){case 0:if(!this.jormunOptions.remote)return[2,null];if(!e.hasParameters&&!e.hasSideEffects&&this.cache.hasOwnProperty(e.endpoint)&&(0,a.Unix)()-this.cache[e.endpoint].timestamp<this.cacheTime)return[2,this.cache[e.endpoint].result];t=this.jormunOptions.remote.host+"/api/"+e.endpoint,r.label=1;case 1:return r.trys.push([1,5,,6]),[4,(0,s.Ajax)(t,e.data)];case 2:return null==(n=r.sent())?[2,null]:200==n.status?[3,4]:[4,this.jormun.alert("".concat(e.endpoint," ").concat(n.status),"".concat(this.statusToString(n.status)," ").concat(n.body.message?" - ".concat(n.body.message):""))];case 3:return r.sent(),[2,null];case 4:return e.hasSideEffects&&(this.cache={}),e.hasParameters||e.hasSideEffects||(this.cache[e.endpoint]={timestamp:(0,a.Unix)(),result:n.body}),[2,n.body];case 5:return o=r.sent(),this.jormun.alert("Network Error",o.toString()),[3,6];case 6:return[2,null]}}))}))},e.prototype.baseRequest=function(e){var t,n,o,r;void 0===e&&(e={});var i={username:null!==(n=null===(t=this.jormunOptions.remote)||void 0===t?void 0:t.username)&&void 0!==n?n:"",token:null!==(r=null===(o=this.jormunOptions.remote)||void 0===o?void 0:o.token)&&void 0!==r?r:"",app:this.jormunOptions.app};for(var s in e)i[s]=e[s];return i},e.prototype.adminRequest=function(e){var t,n,o,r;void 0===e&&(e={});var i={username:null!==(n=null===(t=this.jormunOptions.remote)||void 0===t?void 0:t.username)&&void 0!==n?n:"",token:null!==(r=null===(o=this.jormunOptions.remote)||void 0===o?void 0:o.token)&&void 0!==r?r:""};for(var s in e)i[s]=e[s];return i},e.prototype.passwordRequest=function(e){var t,n,o,r;void 0===e&&(e={});var i={username:null!==(n=null===(t=this.jormunOptions.remote)||void 0===t?void 0:t.username)&&void 0!==n?n:"",password:null!==(r=null===(o=this.jormunOptions.remote)||void 0===o?void 0:o.password)&&void 0!==r?r:"",app:this.jormunOptions.app};for(var s in e)i[s]=e[s];return i},e.prototype.cacheStatus=function(){var e;return o(this,void 0,void 0,(function(){var t;return r(this,(function(n){switch(n.label){case 0:return null===(e=this.cachedStatus())||void 0===e?[3,1]:(t=e,[3,3]);case 1:return[4,this.status()];case 2:t=n.sent(),n.label=3;case 3:return[2,t]}}))}))},e.prototype.cachedStatus=function(){return this.statusCache},e.prototype.loggedIn=function(){return o(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,this.checkConnection()];case 1:return e.sent(),[2,this.isLoggedIn]}}))}))},e.prototype.connected=function(){return o(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,this.checkConnection()];case 1:return e.sent(),[2,this.isConnected]}}))}))},e.prototype.status=function(){return o(this,void 0,void 0,(function(){var e;return r(this,(function(t){switch(t.label){case 0:return e=this,[4,this.request({endpoint:"status",data:this.baseRequest(),hasSideEffects:!1,hasParameters:!1})];case 1:return e.statusCache=t.sent(),[2,this.statusCache]}}))}))},e.prototype.keys=function(){return o(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,this.request({endpoint:"keys",data:this.baseRequest(),hasSideEffects:!1,hasParameters:!1})];case 1:return[2,e.sent()]}}))}))},e.prototype.get=function(e){return o(this,void 0,void 0,(function(){var t,n,o;return r(this,(function(r){switch(r.label){case 0:if(!this.cacheStatus()||!this.statusCache)return[2,null];for(n in t=[],e)t.push(e[n].stringifyRemote(this.statusCache.userId));return o=this.baseRequest({keys:t}),[4,this.request({endpoint:"get",data:o,hasSideEffects:!1,hasParameters:!0})];case 1:return[2,r.sent()]}}))}))},e.prototype.set=function(e){return o(this,void 0,void 0,(function(){var t;return r(this,(function(n){switch(n.label){case 0:return t=this.baseRequest({data:e}),[4,this.request({endpoint:"set",data:t,hasSideEffects:!0,hasParameters:!0})];case 1:return[2,n.sent()]}}))}))},e.prototype.delete=function(e){return o(this,void 0,void 0,(function(){var t,n,o;return r(this,(function(r){switch(r.label){case 0:if(!this.cacheStatus()||!this.statusCache)return[2,null];for(n in t=[],e)t.push(e[n].stringifyRemote(this.statusCache.userId));return o=this.baseRequest({keys:t}),[4,this.request({endpoint:"delete",data:o,hasSideEffects:!0,hasParameters:!0})];case 1:return[2,r.sent()]}}))}))},e.prototype.share=function(e,t){return o(this,void 0,void 0,(function(){var n,o,i;return r(this,(function(r){switch(r.label){case 0:if(!this.cacheStatus()||!this.statusCache)return[2,null];for(o in n=[],e)n.push(e[o].stringifyRemote(this.statusCache.userId));return i=this.baseRequest({keys:n,users:t}),[4,this.request({endpoint:"share",data:i,hasSideEffects:!0,hasParameters:!0})];case 1:return[2,r.sent()]}}))}))},e.prototype.unshare=function(e,t){return o(this,void 0,void 0,(function(){var n,o,i;return r(this,(function(r){switch(r.label){case 0:if(!this.cacheStatus()||!this.statusCache)return[2,null];for(o in n=[],e)n.push(e[o].stringifyRemote(this.statusCache.userId));return i=this.baseRequest({keys:n,users:t}),[4,this.request({endpoint:"unshare",data:i,hasSideEffects:!0,hasParameters:!0})];case 1:return[2,r.sent()]}}))}))},e.prototype.leave=function(e){return o(this,void 0,void 0,(function(){var t,n,o;return r(this,(function(r){switch(r.label){case 0:if(!this.cacheStatus()||!this.statusCache)return[2,null];for(n in t=[],e)t.push(e[n].stringifyRemote(this.statusCache.userId));return o=this.baseRequest({keys:t}),[4,this.request({endpoint:"leave",data:o,hasSideEffects:!0,hasParameters:!0})];case 1:return[2,r.sent()]}}))}))},e.prototype.password=function(e,t){return o(this,void 0,void 0,(function(){var n;return r(this,(function(o){switch(o.label){case 0:return e=(0,i.sha512)(e),t=(0,i.sha512)(t),n=this.adminRequest({password:e,newPassword:t}),[4,this.request({endpoint:"password",data:n,hasSideEffects:!0,hasParameters:!0})];case 1:return[2,o.sent()]}}))}))},e.prototype.register=function(e,t,n,s,a){return o(this,void 0,void 0,(function(){var o;return r(this,(function(r){switch(r.label){case 0:return e=(0,i.sha512)(e),n=(0,i.sha512)(n),o=this.adminRequest({newUsername:t,newPassword:n,size:s,isAdmin:a,password:e}),[4,this.request({endpoint:"register",data:o,hasSideEffects:!0,hasParameters:!0})];case 1:return[2,r.sent()]}}))}))},e.prototype.empty=function(){return o(this,void 0,void 0,(function(){return r(this,(function(e){switch(e.label){case 0:return[4,this.request({endpoint:"empty",data:{},hasSideEffects:!1,hasParameters:!1})];case 1:return[2,e.sent()]}}))}))},e.prototype.setup=function(e,t){return o(this,void 0,void 0,(function(){var n;return r(this,(function(o){switch(o.label){case 0:return t=(0,i.sha512)(t),n={username:e,password:t},[4,this.request({endpoint:"setup",data:n,hasSideEffects:!0,hasParameters:!0})];case 1:return[2,o.sent()]}}))}))},e.prototype.ban=function(e,t){return o(this,void 0,void 0,(function(){var n;return r(this,(function(o){switch(o.label){case 0:return t=(0,i.sha512)(t),n=this.adminRequest({bannedUsername:e,password:t}),[4,this.request({endpoint:"ban",data:n,hasSideEffects:!0,hasParameters:!0})];case 1:return[2,o.sent()]}}))}))},e.prototype.rename=function(e,t){return o(this,void 0,void 0,(function(){var n;return r(this,(function(o){switch(o.label){case 0:return n=this.adminRequest({oldUsername:e,newUsername:t}),[4,this.request({endpoint:"rename",data:n,hasSideEffects:!0,hasParameters:!0})];case 1:return[2,o.sent()]}}))}))},e.prototype.resize=function(e,t){return o(this,void 0,void 0,(function(){var n;return r(this,(function(o){switch(o.label){case 0:return n=this.adminRequest({targetUsername:e,newSize:t}),[4,this.request({endpoint:"resize",data:n,hasSideEffects:!0,hasParameters:!0})];case 1:return[2,o.sent()]}}))}))},e.prototype.users=function(){return o(this,void 0,void 0,(function(){var e;return r(this,(function(t){switch(t.label){case 0:return e=this.adminRequest(),[4,this.request({endpoint:"users",data:e,hasSideEffects:!1,hasParameters:!1})];case 1:return[2,t.sent()]}}))}))},e.prototype.browse=function(e,t){return o(this,void 0,void 0,(function(){return r(this,(function(n){switch(n.label){case 0:return[4,this.request({endpoint:"browse",data:{app:this.jormunOptions.app,limit:e,offset:t},hasSideEffects:!1,hasParameters:!0})];case 1:return[2,n.sent()]}}))}))},e.prototype.publish=function(e){return o(this,void 0,void 0,(function(){var t,n,o,i,s,a;return r(this,(function(r){switch(r.label){case 0:if(!this.cacheStatus()||!this.statusCache)return[2,null];for(t={},n=0,o=e;n<o.length;n++)i=o[n],s=i.key.stringifyRemote(this.statusCache.userId),t[s]=i.publicity;return a=this.baseRequest({keys:t}),[4,this.request({endpoint:"publish",data:a,hasSideEffects:!0,hasParameters:!0})];case 1:return[2,r.sent()]}}))}))},e.prototype.peek=function(e){return o(this,void 0,void 0,(function(){var t,n,o;return r(this,(function(r){switch(r.label){case 0:for(n in t=[],e)t.push(e[n].stringifyRemote(0));return o={app:this.jormunOptions.app,keys:t},[4,this.request({endpoint:"peek",data:o,hasSideEffects:!1,hasParameters:!0})];case 1:return[2,r.sent()]}}))}))},e.prototype.login=function(){return o(this,void 0,void 0,(function(){var e;return r(this,(function(t){switch(t.label){case 0:return e=this.passwordRequest(),[4,this.request({endpoint:"login",data:e,hasSideEffects:!0,hasParameters:!0})];case 1:return[2,t.sent()]}}))}))},e.prototype.logout=function(){return o(this,void 0,void 0,(function(){var e;return r(this,(function(t){switch(t.label){case 0:return e=this.baseRequest(),[4,this.request({endpoint:"logout",data:e,hasSideEffects:!0,hasParameters:!1})];case 1:return[2,t.sent()]}}))}))},e.prototype.invite=function(e){return o(this,void 0,void 0,(function(){var t,n,o;return r(this,(function(r){switch(r.label){case 0:if(!this.cacheStatus()||!this.statusCache)return[2,null];for(n in t=[],e)t.push(e[n].stringifyRemote(this.statusCache.userId));return o=this.baseRequest({keys:t}),[4,this.request({endpoint:"invite",data:o,hasSideEffects:!0,hasParameters:!0})];case 1:return[2,r.sent()]}}))}))},e.prototype.uninvite=function(e){return o(this,void 0,void 0,(function(){var t;return r(this,(function(n){switch(n.label){case 0:return t=this.baseRequest({tokenIds:e}),[4,this.request({endpoint:"uninvite",data:t,hasSideEffects:!0,hasParameters:!0})];case 1:return[2,n.sent()]}}))}))},e.prototype.invitation=function(e){return o(this,void 0,void 0,(function(){var t;return r(this,(function(n){switch(n.label){case 0:return t={app:this.jormunOptions.app,guestToken:e},[4,this.request({endpoint:"invitation",data:t,hasSideEffects:!1,hasParameters:!0})];case 1:return[2,n.sent()]}}))}))},e.prototype.getAsGuest=function(e,t){return o(this,void 0,void 0,(function(){var n,o,i;return r(this,(function(r){switch(r.label){case 0:for(o in n=[],e)n.push(e[o].stringifyLocal());return i=this.baseRequest({token:t,username:"",keys:n}),[4,this.request({endpoint:"get",data:i,hasSideEffects:!1,hasParameters:!0})];case 1:return[2,r.sent()]}}))}))},e.prototype.setAsGuest=function(e,t){return o(this,void 0,void 0,(function(){var n;return r(this,(function(o){switch(o.label){case 0:return n=this.baseRequest({token:t,username:"",data:e}),[4,this.request({endpoint:"set",data:n,hasSideEffects:!0,hasParameters:!0})];case 1:return[2,o.sent()]}}))}))},e}();t.JormunSyncRemote=l},5263:(e,t)=>{"use strict";t.__esModule=!0,t.Key=void 0;var n=function(){function e(e,t,n){this.app=e,this.userId=t,this.fragment=n}return e.parse=function(t,n){var o=JSON.parse(t);if(!Array.isArray(o))return null;if(3!=o.length)return null;if(isNaN(parseInt(o[1])))return null;var r=new e(o[0].toString(),parseInt(o[1]),o[2].toString());return r.userId==n&&(r.userId=0),r},e.parseAll=function(t,n){for(var o=[],r=0,i=t;r<i.length;r++){var s=i[r],a=e.parse(s,n);a&&o.push(a)}return o},e.prototype.stringifyLocal=function(){return JSON.stringify([this.app.toString(),parseInt(this.userId),this.fragment.toString()])},e.prototype.stringifyRemote=function(e){var t=this.userId;0==this.userId&&(this.userId=e);var n=this.stringifyLocal();return this.userId=t,n},e}();t.Key=n},3344:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};t.__esModule=!0,t.LocalStorageWrap=void 0;var i=n(5263),s=function(){function e(){var t,n,o;this.keys={},this.version=null!==(n=JSON.parse(null!==(t=localStorage.getItem(e.VER_KEY))&&void 0!==t?t:"null"))&&void 0!==n?n:1,this.migrate(),localStorage.setItem(e.VER_KEY,JSON.stringify(this.version)),this.keys=JSON.parse(null!==(o=localStorage.getItem(e.KEYS_KEY))&&void 0!==o?o:"{}")}return e.isAvailable=function(){try{return new e,!0}catch(e){return console.log(e),!1}},e.prototype.migrate=function(){1==this.version&&this.version++,2==this.version&&this.version++},e.prototype.addKey=function(t){this.keys[t]||(this.keys[t]=1,localStorage.setItem(e.KEYS_KEY,JSON.stringify(this.keys)))},e.prototype.removeKey=function(t){this.keys[t]&&(delete this.keys[t],localStorage.setItem(e.KEYS_KEY,JSON.stringify(this.keys)))},e.prototype.getKeys=function(){return o(this,void 0,void 0,(function(){var e,t,n;return r(this,(function(o){for(t in e=[],this.keys)(n=i.Key.parse(t,0))&&e.push(n);return[2,e]}))}))},e.prototype.setValue=function(e,t){return o(this,void 0,void 0,(function(){var n;return r(this,(function(o){return n=e.stringifyLocal(),this.addKey(n),localStorage.setItem(n,JSON.stringify(t)),[2]}))}))},e.prototype.setValues=function(e){return o(this,void 0,void 0,(function(){var t;return r(this,(function(n){for(t in e)this.addKey(t),localStorage.setItem(t,JSON.stringify(e[t]));return[2]}))}))},e.prototype.getValue=function(e){var t;return o(this,void 0,void 0,(function(){return r(this,(function(n){return[2,JSON.parse(null!==(t=localStorage.getItem(e.stringifyLocal()))&&void 0!==t?t:"null")]}))}))},e.prototype.getValues=function(e){var t;return o(this,void 0,void 0,(function(){var n,o;return r(this,(function(r){for(o in n={},e)n[e[o].stringifyLocal()]=JSON.parse(null!==(t=localStorage.getItem(e[o].stringifyLocal()))&&void 0!==t?t:"null");return[2,n]}))}))},e.prototype.removeValue=function(e){return o(this,void 0,void 0,(function(){return r(this,(function(t){return this.removeKey(e.stringifyLocal()),localStorage.removeItem(e.stringifyLocal()),[2]}))}))},e.KEYS_KEY="$$KEYS$$",e.VER_KEY="$$VERSION$$",e}();t.LocalStorageWrap=s},9354:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};t.__esModule=!0,t.MemoryStorage=void 0;var i=n(5263),s=function(){function e(){this.data={}}return e.prototype.getKeys=function(){return o(this,void 0,void 0,(function(){var e,t,n;return r(this,(function(o){for(t in e=[],this.data)(n=i.Key.parse(t,0))&&e.push(n);return[2,e]}))}))},e.prototype.setValue=function(e,t){return o(this,void 0,void 0,(function(){return r(this,(function(n){return this.data[e.stringifyLocal()]=JSON.stringify(t),[2]}))}))},e.prototype.setValues=function(e){return o(this,void 0,void 0,(function(){var t,n,o,s,a;return r(this,(function(r){switch(r.label){case 0:for(n in t=[],e)t.push(n);o=0,r.label=1;case 1:return o<t.length?(s=t[o],(a=i.Key.parse(s,0))?[4,this.setValue(a,e[s])]:[3,3]):[3,4];case 2:r.sent(),r.label=3;case 3:return o++,[3,1];case 4:return[2]}}))}))},e.prototype.getValue=function(e){return o(this,void 0,void 0,(function(){var t;return r(this,(function(n){return t=e.stringifyLocal(),this.data[t]?[2,JSON.parse(this.data[t])]:[2,null]}))}))},e.prototype.getValues=function(e){return o(this,void 0,void 0,(function(){var t,n,o,i,s,a,l;return r(this,(function(r){switch(r.label){case 0:t={},n=0,o=e,r.label=1;case 1:return n<o.length?(i=o[n],s=i.stringifyLocal(),a=t,l=s,[4,this.getValue(i)]):[3,4];case 2:a[l]=r.sent(),r.label=3;case 3:return n++,[3,1];case 4:return[2,t]}}))}))},e.prototype.removeValue=function(e){return o(this,void 0,void 0,(function(){var t;return r(this,(function(n){return t=e.stringifyLocal(),this.data.hasOwnProperty(t)&&delete this.data[t],[2]}))}))},e}();t.MemoryStorage=s},221:(e,t)=>{"use strict";t.__esModule=!0,t.Unix=void 0,t.Unix=function(){return(new Date).getTime()}},6949:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((r=(r=s.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};t.__esModule=!0,t.Wait=void 0;var r=function(){function e(){}return e.secs=function(e){return n(this,void 0,void 0,(function(){return o(this,(function(t){return[2,new Promise((function(t){return window.setTimeout((function(){return t()}),1e3*e)}))]}))}))},e.until=function(e){return n(this,void 0,void 0,(function(){return o(this,(function(t){return[2,new Promise((function(t){var n=window.setInterval((function(){e()&&(window.clearInterval(n),t())}),1)}))]}))}))},e}();t.Wait=r},3434:(e,t,n)=>{var o;!function(){"use strict";var t="input is invalid type",r="object"==typeof window,i=r?window:{};i.JS_SHA512_NO_WINDOW&&(r=!1);var s=!r&&"object"==typeof self;!i.JS_SHA512_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node?i=n.g:s&&(i=self);var a=!i.JS_SHA512_NO_COMMON_JS&&e.exports,l=n.amdO,u=!i.JS_SHA512_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,c="0123456789abcdef".split(""),d=[-2147483648,8388608,32768,128],h=[24,16,8,0],f=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591],p=["hex","array","digest","arrayBuffer"],m=[];!i.JS_SHA512_NO_NODE_JS&&Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),!u||!i.JS_SHA512_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(e){return"object"==typeof e&&e.buffer&&e.buffer.constructor===ArrayBuffer});var g=function(e,t){return function(n){return new x(t,!0).update(n)[e]()}},v=function(e){var t=g("hex",e);t.create=function(){return new x(e)},t.update=function(e){return t.create().update(e)};for(var n=0;n<p.length;++n){var o=p[n];t[o]=g(o,e)}return t},b=function(e,t){return function(n,o){return new _(n,t,!0).update(o)[e]()}},y=function(e){var t=b("hex",e);t.create=function(t){return new _(t,e)},t.update=function(e,n){return t.create(e).update(n)};for(var n=0;n<p.length;++n){var o=p[n];t[o]=b(o,e)}return t};function x(e,t){t?(m[0]=m[1]=m[2]=m[3]=m[4]=m[5]=m[6]=m[7]=m[8]=m[9]=m[10]=m[11]=m[12]=m[13]=m[14]=m[15]=m[16]=m[17]=m[18]=m[19]=m[20]=m[21]=m[22]=m[23]=m[24]=m[25]=m[26]=m[27]=m[28]=m[29]=m[30]=m[31]=m[32]=0,this.blocks=m):this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],384==e?(this.h0h=3418070365,this.h0l=3238371032,this.h1h=1654270250,this.h1l=914150663,this.h2h=2438529370,this.h2l=812702999,this.h3h=355462360,this.h3l=4144912697,this.h4h=1731405415,this.h4l=4290775857,this.h5h=2394180231,this.h5l=1750603025,this.h6h=3675008525,this.h6l=1694076839,this.h7h=1203062813,this.h7l=3204075428):256==e?(this.h0h=573645204,this.h0l=4230739756,this.h1h=2673172387,this.h1l=3360449730,this.h2h=596883563,this.h2l=1867755857,this.h3h=2520282905,this.h3l=1497426621,this.h4h=2519219938,this.h4l=2827943907,this.h5h=3193839141,this.h5l=1401305490,this.h6h=721525244,this.h6l=746961066,this.h7h=246885852,this.h7l=2177182882):224==e?(this.h0h=2352822216,this.h0l=424955298,this.h1h=1944164710,this.h1l=2312950998,this.h2h=502970286,this.h2l=855612546,this.h3h=1738396948,this.h3l=1479516111,this.h4h=258812777,this.h4l=2077511080,this.h5h=2011393907,this.h5l=79989058,this.h6h=1067287976,this.h6l=1780299464,this.h7h=286451373,this.h7l=2446758561):(this.h0h=1779033703,this.h0l=4089235720,this.h1h=3144134277,this.h1l=2227873595,this.h2h=1013904242,this.h2l=4271175723,this.h3h=2773480762,this.h3l=1595750129,this.h4h=1359893119,this.h4l=2917565137,this.h5h=2600822924,this.h5l=725511199,this.h6h=528734635,this.h6l=4215389547,this.h7h=1541459225,this.h7l=327033209),this.bits=e,this.block=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1}function _(e,n,o){var r,i=typeof e;if("string"!==i){if("object"!==i)throw new Error(t);if(null===e)throw new Error(t);if(u&&e.constructor===ArrayBuffer)e=new Uint8Array(e);else if(!(Array.isArray(e)||u&&ArrayBuffer.isView(e)))throw new Error(t);r=!0}var s=e.length;if(!r){for(var a,l=[],c=(s=e.length,0),d=0;d<s;++d)(a=e.charCodeAt(d))<128?l[c++]=a:a<2048?(l[c++]=192|a>>6,l[c++]=128|63&a):a<55296||a>=57344?(l[c++]=224|a>>12,l[c++]=128|a>>6&63,l[c++]=128|63&a):(a=65536+((1023&a)<<10|1023&e.charCodeAt(++d)),l[c++]=240|a>>18,l[c++]=128|a>>12&63,l[c++]=128|a>>6&63,l[c++]=128|63&a);e=l}e.length>128&&(e=new x(n,!0).update(e).array());var h=[],f=[];for(d=0;d<128;++d){var p=e[d]||0;h[d]=92^p,f[d]=54^p}x.call(this,n,o),this.update(f),this.oKeyPad=h,this.inner=!0,this.sharedMemory=o}x.prototype.update=function(e){if(this.finalized)throw new Error("finalize already called");var n,o=typeof e;if("string"!==o){if("object"!==o)throw new Error(t);if(null===e)throw new Error(t);if(u&&e.constructor===ArrayBuffer)e=new Uint8Array(e);else if(!(Array.isArray(e)||u&&ArrayBuffer.isView(e)))throw new Error(t);n=!0}for(var r,i,s=0,a=e.length,l=this.blocks;s<a;){if(this.hashed&&(this.hashed=!1,l[0]=this.block,l[1]=l[2]=l[3]=l[4]=l[5]=l[6]=l[7]=l[8]=l[9]=l[10]=l[11]=l[12]=l[13]=l[14]=l[15]=l[16]=l[17]=l[18]=l[19]=l[20]=l[21]=l[22]=l[23]=l[24]=l[25]=l[26]=l[27]=l[28]=l[29]=l[30]=l[31]=l[32]=0),n)for(i=this.start;s<a&&i<128;++s)l[i>>2]|=e[s]<<h[3&i++];else for(i=this.start;s<a&&i<128;++s)(r=e.charCodeAt(s))<128?l[i>>2]|=r<<h[3&i++]:r<2048?(l[i>>2]|=(192|r>>6)<<h[3&i++],l[i>>2]|=(128|63&r)<<h[3&i++]):r<55296||r>=57344?(l[i>>2]|=(224|r>>12)<<h[3&i++],l[i>>2]|=(128|r>>6&63)<<h[3&i++],l[i>>2]|=(128|63&r)<<h[3&i++]):(r=65536+((1023&r)<<10|1023&e.charCodeAt(++s)),l[i>>2]|=(240|r>>18)<<h[3&i++],l[i>>2]|=(128|r>>12&63)<<h[3&i++],l[i>>2]|=(128|r>>6&63)<<h[3&i++],l[i>>2]|=(128|63&r)<<h[3&i++]);this.lastByteIndex=i,this.bytes+=i-this.start,i>=128?(this.block=l[32],this.start=i-128,this.hash(),this.hashed=!0):this.start=i}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this},x.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var e=this.blocks,t=this.lastByteIndex;e[32]=this.block,e[t>>2]|=d[3&t],this.block=e[32],t>=112&&(this.hashed||this.hash(),e[0]=this.block,e[1]=e[2]=e[3]=e[4]=e[5]=e[6]=e[7]=e[8]=e[9]=e[10]=e[11]=e[12]=e[13]=e[14]=e[15]=e[16]=e[17]=e[18]=e[19]=e[20]=e[21]=e[22]=e[23]=e[24]=e[25]=e[26]=e[27]=e[28]=e[29]=e[30]=e[31]=e[32]=0),e[30]=this.hBytes<<3|this.bytes>>>29,e[31]=this.bytes<<3,this.hash()}},x.prototype.hash=function(){var e,t,n,o,r,i,s,a,l,u,c,d,h,p,m,g,v,b,y,x,_,w,j,C,E,S=this.h0h,O=this.h0l,N=this.h1h,T=this.h1l,M=this.h2h,k=this.h2l,R=this.h3h,P=this.h3l,I=this.h4h,A=this.h4l,D=this.h5h,B=this.h5l,F=this.h6h,L=this.h6l,U=this.h7h,K=this.h7l,W=this.blocks;for(e=32;e<160;e+=2)t=((x=W[e-30])>>>1|(_=W[e-29])<<31)^(x>>>8|_<<24)^x>>>7,n=(_>>>1|x<<31)^(_>>>8|x<<24)^(_>>>7|x<<25),o=((x=W[e-4])>>>19|(_=W[e-3])<<13)^(_>>>29|x<<3)^x>>>6,r=(_>>>19|x<<13)^(x>>>29|_<<3)^(_>>>6|x<<26),x=W[e-32],_=W[e-31],l=((w=W[e-14])>>>16)+(x>>>16)+(t>>>16)+(o>>>16)+((a=(65535&w)+(65535&x)+(65535&t)+(65535&o)+((s=((j=W[e-13])>>>16)+(_>>>16)+(n>>>16)+(r>>>16)+((i=(65535&j)+(65535&_)+(65535&n)+(65535&r))>>>16))>>>16))>>>16),W[e]=l<<16|65535&a,W[e+1]=s<<16|65535&i;var H=S,z=O,V=N,q=T,$=M,J=k,G=R,Y=P,Z=I,X=A,Q=D,ee=B,te=F,ne=L,oe=U,re=K;for(g=V&$,v=q&J,e=0;e<160;e+=8)t=(H>>>28|z<<4)^(z>>>2|H<<30)^(z>>>7|H<<25),n=(z>>>28|H<<4)^(H>>>2|z<<30)^(H>>>7|z<<25),o=(Z>>>14|X<<18)^(Z>>>18|X<<14)^(X>>>9|Z<<23),r=(X>>>14|Z<<18)^(X>>>18|Z<<14)^(Z>>>9|X<<23),b=(u=H&V)^H&$^g,y=(c=z&q)^z&J^v,C=Z&Q^~Z&te,E=X&ee^~X&ne,x=W[e],_=W[e+1],x=(l=((w=f[e])>>>16)+(x>>>16)+(C>>>16)+(o>>>16)+(oe>>>16)+((a=(65535&w)+(65535&x)+(65535&C)+(65535&o)+(65535&oe)+((s=((j=f[e+1])>>>16)+(_>>>16)+(E>>>16)+(r>>>16)+(re>>>16)+((i=(65535&j)+(65535&_)+(65535&E)+(65535&r)+(65535&re))>>>16))>>>16))>>>16))<<16|65535&a,_=s<<16|65535&i,w=(l=(b>>>16)+(t>>>16)+((a=(65535&b)+(65535&t)+((s=(y>>>16)+(n>>>16)+((i=(65535&y)+(65535&n))>>>16))>>>16))>>>16))<<16|65535&a,j=s<<16|65535&i,oe=(l=(G>>>16)+(x>>>16)+((a=(65535&G)+(65535&x)+((s=(Y>>>16)+(_>>>16)+((i=(65535&Y)+(65535&_))>>>16))>>>16))>>>16))<<16|65535&a,re=s<<16|65535&i,t=((G=(l=(w>>>16)+(x>>>16)+((a=(65535&w)+(65535&x)+((s=(j>>>16)+(_>>>16)+((i=(65535&j)+(65535&_))>>>16))>>>16))>>>16))<<16|65535&a)>>>28|(Y=s<<16|65535&i)<<4)^(Y>>>2|G<<30)^(Y>>>7|G<<25),n=(Y>>>28|G<<4)^(G>>>2|Y<<30)^(G>>>7|Y<<25),o=(oe>>>14|re<<18)^(oe>>>18|re<<14)^(re>>>9|oe<<23),r=(re>>>14|oe<<18)^(re>>>18|oe<<14)^(oe>>>9|re<<23),b=(d=G&H)^G&V^u,y=(h=Y&z)^Y&q^c,C=oe&Z^~oe&Q,E=re&X^~re&ee,x=W[e+2],_=W[e+3],x=(l=((w=f[e+2])>>>16)+(x>>>16)+(C>>>16)+(o>>>16)+(te>>>16)+((a=(65535&w)+(65535&x)+(65535&C)+(65535&o)+(65535&te)+((s=((j=f[e+3])>>>16)+(_>>>16)+(E>>>16)+(r>>>16)+(ne>>>16)+((i=(65535&j)+(65535&_)+(65535&E)+(65535&r)+(65535&ne))>>>16))>>>16))>>>16))<<16|65535&a,_=s<<16|65535&i,w=(l=(b>>>16)+(t>>>16)+((a=(65535&b)+(65535&t)+((s=(y>>>16)+(n>>>16)+((i=(65535&y)+(65535&n))>>>16))>>>16))>>>16))<<16|65535&a,j=s<<16|65535&i,te=(l=($>>>16)+(x>>>16)+((a=(65535&$)+(65535&x)+((s=(J>>>16)+(_>>>16)+((i=(65535&J)+(65535&_))>>>16))>>>16))>>>16))<<16|65535&a,ne=s<<16|65535&i,t=(($=(l=(w>>>16)+(x>>>16)+((a=(65535&w)+(65535&x)+((s=(j>>>16)+(_>>>16)+((i=(65535&j)+(65535&_))>>>16))>>>16))>>>16))<<16|65535&a)>>>28|(J=s<<16|65535&i)<<4)^(J>>>2|$<<30)^(J>>>7|$<<25),n=(J>>>28|$<<4)^($>>>2|J<<30)^($>>>7|J<<25),o=(te>>>14|ne<<18)^(te>>>18|ne<<14)^(ne>>>9|te<<23),r=(ne>>>14|te<<18)^(ne>>>18|te<<14)^(te>>>9|ne<<23),b=(p=$&G)^$&H^d,y=(m=J&Y)^J&z^h,C=te&oe^~te&Z,E=ne&re^~ne&X,x=W[e+4],_=W[e+5],x=(l=((w=f[e+4])>>>16)+(x>>>16)+(C>>>16)+(o>>>16)+(Q>>>16)+((a=(65535&w)+(65535&x)+(65535&C)+(65535&o)+(65535&Q)+((s=((j=f[e+5])>>>16)+(_>>>16)+(E>>>16)+(r>>>16)+(ee>>>16)+((i=(65535&j)+(65535&_)+(65535&E)+(65535&r)+(65535&ee))>>>16))>>>16))>>>16))<<16|65535&a,_=s<<16|65535&i,w=(l=(b>>>16)+(t>>>16)+((a=(65535&b)+(65535&t)+((s=(y>>>16)+(n>>>16)+((i=(65535&y)+(65535&n))>>>16))>>>16))>>>16))<<16|65535&a,j=s<<16|65535&i,Q=(l=(V>>>16)+(x>>>16)+((a=(65535&V)+(65535&x)+((s=(q>>>16)+(_>>>16)+((i=(65535&q)+(65535&_))>>>16))>>>16))>>>16))<<16|65535&a,ee=s<<16|65535&i,t=((V=(l=(w>>>16)+(x>>>16)+((a=(65535&w)+(65535&x)+((s=(j>>>16)+(_>>>16)+((i=(65535&j)+(65535&_))>>>16))>>>16))>>>16))<<16|65535&a)>>>28|(q=s<<16|65535&i)<<4)^(q>>>2|V<<30)^(q>>>7|V<<25),n=(q>>>28|V<<4)^(V>>>2|q<<30)^(V>>>7|q<<25),o=(Q>>>14|ee<<18)^(Q>>>18|ee<<14)^(ee>>>9|Q<<23),r=(ee>>>14|Q<<18)^(ee>>>18|Q<<14)^(Q>>>9|ee<<23),b=(g=V&$)^V&G^p,y=(v=q&J)^q&Y^m,C=Q&te^~Q&oe,E=ee&ne^~ee&re,x=W[e+6],_=W[e+7],x=(l=((w=f[e+6])>>>16)+(x>>>16)+(C>>>16)+(o>>>16)+(Z>>>16)+((a=(65535&w)+(65535&x)+(65535&C)+(65535&o)+(65535&Z)+((s=((j=f[e+7])>>>16)+(_>>>16)+(E>>>16)+(r>>>16)+(X>>>16)+((i=(65535&j)+(65535&_)+(65535&E)+(65535&r)+(65535&X))>>>16))>>>16))>>>16))<<16|65535&a,_=s<<16|65535&i,w=(l=(b>>>16)+(t>>>16)+((a=(65535&b)+(65535&t)+((s=(y>>>16)+(n>>>16)+((i=(65535&y)+(65535&n))>>>16))>>>16))>>>16))<<16|65535&a,j=s<<16|65535&i,Z=(l=(H>>>16)+(x>>>16)+((a=(65535&H)+(65535&x)+((s=(z>>>16)+(_>>>16)+((i=(65535&z)+(65535&_))>>>16))>>>16))>>>16))<<16|65535&a,X=s<<16|65535&i,H=(l=(w>>>16)+(x>>>16)+((a=(65535&w)+(65535&x)+((s=(j>>>16)+(_>>>16)+((i=(65535&j)+(65535&_))>>>16))>>>16))>>>16))<<16|65535&a,z=s<<16|65535&i;l=(S>>>16)+(H>>>16)+((a=(65535&S)+(65535&H)+((s=(O>>>16)+(z>>>16)+((i=(65535&O)+(65535&z))>>>16))>>>16))>>>16),this.h0h=l<<16|65535&a,this.h0l=s<<16|65535&i,l=(N>>>16)+(V>>>16)+((a=(65535&N)+(65535&V)+((s=(T>>>16)+(q>>>16)+((i=(65535&T)+(65535&q))>>>16))>>>16))>>>16),this.h1h=l<<16|65535&a,this.h1l=s<<16|65535&i,l=(M>>>16)+($>>>16)+((a=(65535&M)+(65535&$)+((s=(k>>>16)+(J>>>16)+((i=(65535&k)+(65535&J))>>>16))>>>16))>>>16),this.h2h=l<<16|65535&a,this.h2l=s<<16|65535&i,l=(R>>>16)+(G>>>16)+((a=(65535&R)+(65535&G)+((s=(P>>>16)+(Y>>>16)+((i=(65535&P)+(65535&Y))>>>16))>>>16))>>>16),this.h3h=l<<16|65535&a,this.h3l=s<<16|65535&i,l=(I>>>16)+(Z>>>16)+((a=(65535&I)+(65535&Z)+((s=(A>>>16)+(X>>>16)+((i=(65535&A)+(65535&X))>>>16))>>>16))>>>16),this.h4h=l<<16|65535&a,this.h4l=s<<16|65535&i,l=(D>>>16)+(Q>>>16)+((a=(65535&D)+(65535&Q)+((s=(B>>>16)+(ee>>>16)+((i=(65535&B)+(65535&ee))>>>16))>>>16))>>>16),this.h5h=l<<16|65535&a,this.h5l=s<<16|65535&i,l=(F>>>16)+(te>>>16)+((a=(65535&F)+(65535&te)+((s=(L>>>16)+(ne>>>16)+((i=(65535&L)+(65535&ne))>>>16))>>>16))>>>16),this.h6h=l<<16|65535&a,this.h6l=s<<16|65535&i,l=(U>>>16)+(oe>>>16)+((a=(65535&U)+(65535&oe)+((s=(K>>>16)+(re>>>16)+((i=(65535&K)+(65535&re))>>>16))>>>16))>>>16),this.h7h=l<<16|65535&a,this.h7l=s<<16|65535&i},x.prototype.hex=function(){this.finalize();var e=this.h0h,t=this.h0l,n=this.h1h,o=this.h1l,r=this.h2h,i=this.h2l,s=this.h3h,a=this.h3l,l=this.h4h,u=this.h4l,d=this.h5h,h=this.h5l,f=this.h6h,p=this.h6l,m=this.h7h,g=this.h7l,v=this.bits,b=c[e>>28&15]+c[e>>24&15]+c[e>>20&15]+c[e>>16&15]+c[e>>12&15]+c[e>>8&15]+c[e>>4&15]+c[15&e]+c[t>>28&15]+c[t>>24&15]+c[t>>20&15]+c[t>>16&15]+c[t>>12&15]+c[t>>8&15]+c[t>>4&15]+c[15&t]+c[n>>28&15]+c[n>>24&15]+c[n>>20&15]+c[n>>16&15]+c[n>>12&15]+c[n>>8&15]+c[n>>4&15]+c[15&n]+c[o>>28&15]+c[o>>24&15]+c[o>>20&15]+c[o>>16&15]+c[o>>12&15]+c[o>>8&15]+c[o>>4&15]+c[15&o]+c[r>>28&15]+c[r>>24&15]+c[r>>20&15]+c[r>>16&15]+c[r>>12&15]+c[r>>8&15]+c[r>>4&15]+c[15&r]+c[i>>28&15]+c[i>>24&15]+c[i>>20&15]+c[i>>16&15]+c[i>>12&15]+c[i>>8&15]+c[i>>4&15]+c[15&i]+c[s>>28&15]+c[s>>24&15]+c[s>>20&15]+c[s>>16&15]+c[s>>12&15]+c[s>>8&15]+c[s>>4&15]+c[15&s];return v>=256&&(b+=c[a>>28&15]+c[a>>24&15]+c[a>>20&15]+c[a>>16&15]+c[a>>12&15]+c[a>>8&15]+c[a>>4&15]+c[15&a]),v>=384&&(b+=c[l>>28&15]+c[l>>24&15]+c[l>>20&15]+c[l>>16&15]+c[l>>12&15]+c[l>>8&15]+c[l>>4&15]+c[15&l]+c[u>>28&15]+c[u>>24&15]+c[u>>20&15]+c[u>>16&15]+c[u>>12&15]+c[u>>8&15]+c[u>>4&15]+c[15&u]+c[d>>28&15]+c[d>>24&15]+c[d>>20&15]+c[d>>16&15]+c[d>>12&15]+c[d>>8&15]+c[d>>4&15]+c[15&d]+c[h>>28&15]+c[h>>24&15]+c[h>>20&15]+c[h>>16&15]+c[h>>12&15]+c[h>>8&15]+c[h>>4&15]+c[15&h]),512==v&&(b+=c[f>>28&15]+c[f>>24&15]+c[f>>20&15]+c[f>>16&15]+c[f>>12&15]+c[f>>8&15]+c[f>>4&15]+c[15&f]+c[p>>28&15]+c[p>>24&15]+c[p>>20&15]+c[p>>16&15]+c[p>>12&15]+c[p>>8&15]+c[p>>4&15]+c[15&p]+c[m>>28&15]+c[m>>24&15]+c[m>>20&15]+c[m>>16&15]+c[m>>12&15]+c[m>>8&15]+c[m>>4&15]+c[15&m]+c[g>>28&15]+c[g>>24&15]+c[g>>20&15]+c[g>>16&15]+c[g>>12&15]+c[g>>8&15]+c[g>>4&15]+c[15&g]),b},x.prototype.toString=x.prototype.hex,x.prototype.digest=function(){this.finalize();var e=this.h0h,t=this.h0l,n=this.h1h,o=this.h1l,r=this.h2h,i=this.h2l,s=this.h3h,a=this.h3l,l=this.h4h,u=this.h4l,c=this.h5h,d=this.h5l,h=this.h6h,f=this.h6l,p=this.h7h,m=this.h7l,g=this.bits,v=[e>>24&255,e>>16&255,e>>8&255,255&e,t>>24&255,t>>16&255,t>>8&255,255&t,n>>24&255,n>>16&255,n>>8&255,255&n,o>>24&255,o>>16&255,o>>8&255,255&o,r>>24&255,r>>16&255,r>>8&255,255&r,i>>24&255,i>>16&255,i>>8&255,255&i,s>>24&255,s>>16&255,s>>8&255,255&s];return g>=256&&v.push(a>>24&255,a>>16&255,a>>8&255,255&a),g>=384&&v.push(l>>24&255,l>>16&255,l>>8&255,255&l,u>>24&255,u>>16&255,u>>8&255,255&u,c>>24&255,c>>16&255,c>>8&255,255&c,d>>24&255,d>>16&255,d>>8&255,255&d),512==g&&v.push(h>>24&255,h>>16&255,h>>8&255,255&h,f>>24&255,f>>16&255,f>>8&255,255&f,p>>24&255,p>>16&255,p>>8&255,255&p,m>>24&255,m>>16&255,m>>8&255,255&m),v},x.prototype.array=x.prototype.digest,x.prototype.arrayBuffer=function(){this.finalize();var e=this.bits,t=new ArrayBuffer(e/8),n=new DataView(t);return n.setUint32(0,this.h0h),n.setUint32(4,this.h0l),n.setUint32(8,this.h1h),n.setUint32(12,this.h1l),n.setUint32(16,this.h2h),n.setUint32(20,this.h2l),n.setUint32(24,this.h3h),e>=256&&n.setUint32(28,this.h3l),e>=384&&(n.setUint32(32,this.h4h),n.setUint32(36,this.h4l),n.setUint32(40,this.h5h),n.setUint32(44,this.h5l)),512==e&&(n.setUint32(48,this.h6h),n.setUint32(52,this.h6l),n.setUint32(56,this.h7h),n.setUint32(60,this.h7l)),t},x.prototype.clone=function(){var e=new x(this.bits,!1);return this.copyTo(e),e},x.prototype.copyTo=function(e){var t=0,n=["h0h","h0l","h1h","h1l","h2h","h2l","h3h","h3l","h4h","h4l","h5h","h5l","h6h","h6l","h7h","h7l","start","bytes","hBytes","finalized","hashed","lastByteIndex"];for(t=0;t<n.length;++t)e[n[t]]=this[n[t]];for(t=0;t<this.blocks.length;++t)e.blocks[t]=this.blocks[t]},_.prototype=new x,_.prototype.finalize=function(){if(x.prototype.finalize.call(this),this.inner){this.inner=!1;var e=this.array();x.call(this,this.bits,this.sharedMemory),this.update(this.oKeyPad),this.update(e),x.prototype.finalize.call(this)}},_.prototype.clone=function(){var e=new _([],this.bits,!1);this.copyTo(e),e.inner=this.inner;for(var t=0;t<this.oKeyPad.length;++t)e.oKeyPad[t]=this.oKeyPad[t];return e};var w=v(512);w.sha512=w,w.sha384=v(384),w.sha512_256=v(256),w.sha512_224=v(224),w.sha512.hmac=y(512),w.sha384.hmac=y(384),w.sha512_256.hmac=y(256),w.sha512_224.hmac=y(224),a?e.exports=w:(i.sha512=w.sha512,i.sha384=w.sha384,i.sha512_256=w.sha512_256,i.sha512_224=w.sha512_224,l&&(void 0===(o=function(){return w}.call(w,n,w,e))||(e.exports=o)))}()},9748:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Children:()=>W,Component:()=>a.Component,Fragment:()=>a.Fragment,PureComponent:()=>D,StrictMode:()=>we,Suspense:()=>V,SuspenseList:()=>J,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:()=>fe,cloneElement:()=>ve,createContext:()=>a.createContext,createElement:()=>a.createElement,createFactory:()=>me,createPortal:()=>X,createRef:()=>a.createRef,default:()=>Ne,findDOMNode:()=>ye,flushSync:()=>_e,forwardRef:()=>U,hydrate:()=>re,isValidElement:()=>ge,lazy:()=>$,memo:()=>B,render:()=>oe,startTransition:()=>je,unmountComponentAtNode:()=>be,unstable_batchedUpdates:()=>xe,useCallback:()=>C,useContext:()=>E,useDebugValue:()=>S,useDeferredValue:()=>Ce,useEffect:()=>y,useErrorBoundary:()=>O,useImperativeHandle:()=>w,useInsertionEffect:()=>Se,useLayoutEffect:()=>x,useMemo:()=>j,useReducer:()=>b,useRef:()=>_,useState:()=>v,useSyncExternalStore:()=>Oe,useTransition:()=>Ee,version:()=>pe});var o,r,i,s,a=n(6400),l=0,u=[],c=[],d=a.options.__b,h=a.options.__r,f=a.options.diffed,p=a.options.__c,m=a.options.unmount;function g(e,t){a.options.__h&&a.options.__h(r,e,l||t),l=0;var n=r.__H||(r.__H={__:[],__h:[]});return e>=n.__.length&&n.__.push({__V:c}),n.__[e]}function v(e){return l=1,b(P,e)}function b(e,t,n){var i=g(o++,2);return i.t=e,i.__c||(i.__=[n?n(t):P(void 0,t),function(e){var t=i.t(i.__[0],e);i.__[0]!==t&&(i.__=[t,i.__[1]],i.__c.setState({}))}],i.__c=r),i.__}function y(e,t){var n=g(o++,3);!a.options.__s&&R(n.__H,t)&&(n.__=e,n.u=t,r.__H.__h.push(n))}function x(e,t){var n=g(o++,4);!a.options.__s&&R(n.__H,t)&&(n.__=e,n.u=t,r.__h.push(n))}function _(e){return l=5,j((function(){return{current:e}}),[])}function w(e,t,n){l=6,x((function(){return"function"==typeof e?(e(t()),function(){return e(null)}):e?(e.current=t(),function(){return e.current=null}):void 0}),null==n?n:n.concat(e))}function j(e,t){var n=g(o++,7);return R(n.__H,t)?(n.__V=e(),n.u=t,n.__h=e,n.__V):n.__}function C(e,t){return l=8,j((function(){return e}),t)}function E(e){var t=r.context[e.__c],n=g(o++,9);return n.c=e,t?(null==n.__&&(n.__=!0,t.sub(r)),t.props.value):e.__}function S(e,t){a.options.useDebugValue&&a.options.useDebugValue(t?t(e):e)}function O(e){var t=g(o++,10),n=v();return t.__=e,r.componentDidCatch||(r.componentDidCatch=function(e){t.__&&t.__(e),n[1](e)}),[n[0],function(){n[1](void 0)}]}function N(){for(var e;e=u.shift();)if(e.__P)try{e.__H.__h.forEach(M),e.__H.__h.forEach(k),e.__H.__h=[]}catch(t){e.__H.__h=[],a.options.__e(t,e.__v)}}a.options.__b=function(e){r=null,d&&d(e)},a.options.__r=function(e){h&&h(e),o=0;var t=(r=e.__c).__H;t&&(i===r?(t.__h=[],r.__h=[],t.__.forEach((function(e){e.__V=c,e.u=void 0}))):(t.__h.forEach(M),t.__h.forEach(k),t.__h=[])),i=r},a.options.diffed=function(e){f&&f(e);var t=e.__c;t&&t.__H&&(t.__H.__h.length&&(1!==u.push(t)&&s===a.options.requestAnimationFrame||((s=a.options.requestAnimationFrame)||function(e){var t,n=function(){clearTimeout(o),T&&cancelAnimationFrame(t),setTimeout(e)},o=setTimeout(n,100);T&&(t=requestAnimationFrame(n))})(N)),t.__H.__.forEach((function(e){e.u&&(e.__H=e.u),e.__V!==c&&(e.__=e.__V),e.u=void 0,e.__V=c}))),i=r=null},a.options.__c=function(e,t){t.some((function(e){try{e.__h.forEach(M),e.__h=e.__h.filter((function(e){return!e.__||k(e)}))}catch(n){t.some((function(e){e.__h&&(e.__h=[])})),t=[],a.options.__e(n,e.__v)}})),p&&p(e,t)},a.options.unmount=function(e){m&&m(e);var t,n=e.__c;n&&n.__H&&(n.__H.__.forEach((function(e){try{M(e)}catch(e){t=e}})),t&&a.options.__e(t,n.__v))};var T="function"==typeof requestAnimationFrame;function M(e){var t=r,n=e.__c;"function"==typeof n&&(e.__c=void 0,n()),r=t}function k(e){var t=r;e.__c=e.__(),r=t}function R(e,t){return!e||e.length!==t.length||t.some((function(t,n){return t!==e[n]}))}function P(e,t){return"function"==typeof t?t(e):t}function I(e,t){for(var n in t)e[n]=t[n];return e}function A(e,t){for(var n in e)if("__source"!==n&&!(n in t))return!0;for(var o in t)if("__source"!==o&&e[o]!==t[o])return!0;return!1}function D(e){this.props=e}function B(e,t){function n(e){var n=this.props.ref,o=n==e.ref;return!o&&n&&(n.call?n(null):n.current=null),t?!t(this.props,e)||!o:A(this.props,e)}function o(t){return this.shouldComponentUpdate=n,(0,a.createElement)(e,t)}return o.displayName="Memo("+(e.displayName||e.name)+")",o.prototype.isReactComponent=!0,o.__f=!0,o}(D.prototype=new a.Component).isPureReactComponent=!0,D.prototype.shouldComponentUpdate=function(e,t){return A(this.props,e)||A(this.state,t)};var F=a.options.__b;a.options.__b=function(e){e.type&&e.type.__f&&e.ref&&(e.props.ref=e.ref,e.ref=null),F&&F(e)};var L="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.forward_ref")||3911;function U(e){function t(t){var n=I({},t);return delete n.ref,e(n,t.ref||null)}return t.$$typeof=L,t.render=t,t.prototype.isReactComponent=t.__f=!0,t.displayName="ForwardRef("+(e.displayName||e.name)+")",t}var K=function(e,t){return null==e?null:(0,a.toChildArray)((0,a.toChildArray)(e).map(t))},W={map:K,forEach:K,count:function(e){return e?(0,a.toChildArray)(e).length:0},only:function(e){var t=(0,a.toChildArray)(e);if(1!==t.length)throw"Children.only";return t[0]},toArray:a.toChildArray},H=a.options.__e;a.options.__e=function(e,t,n,o){if(e.then)for(var r,i=t;i=i.__;)if((r=i.__c)&&r.__c)return null==t.__e&&(t.__e=n.__e,t.__k=n.__k),r.__c(e,t);H(e,t,n,o)};var z=a.options.unmount;function V(){this.__u=0,this.t=null,this.__b=null}function q(e){var t=e.__.__c;return t&&t.__a&&t.__a(e)}function $(e){var t,n,o;function r(r){if(t||(t=e()).then((function(e){n=e.default||e}),(function(e){o=e})),o)throw o;if(!n)throw t;return(0,a.createElement)(n,r)}return r.displayName="Lazy",r.__f=!0,r}function J(){this.u=null,this.o=null}a.options.unmount=function(e){var t=e.__c;t&&t.__R&&t.__R(),t&&!0===e.__h&&(e.type=null),z&&z(e)},(V.prototype=new a.Component).__c=function(e,t){var n=t.__c,o=this;null==o.t&&(o.t=[]),o.t.push(n);var r=q(o.__v),i=!1,s=function(){i||(i=!0,n.__R=null,r?r(a):a())};n.__R=s;var a=function(){if(!--o.__u){if(o.state.__a){var e=o.state.__a;o.__v.__k[0]=function e(t,n,o){return t&&(t.__v=null,t.__k=t.__k&&t.__k.map((function(t){return e(t,n,o)})),t.__c&&t.__c.__P===n&&(t.__e&&o.insertBefore(t.__e,t.__d),t.__c.__e=!0,t.__c.__P=o)),t}(e,e.__c.__P,e.__c.__O)}var t;for(o.setState({__a:o.__b=null});t=o.t.pop();)t.forceUpdate()}},l=!0===t.__h;o.__u++||l||o.setState({__a:o.__b=o.__v.__k[0]}),e.then(s,s)},V.prototype.componentWillUnmount=function(){this.t=[]},V.prototype.render=function(e,t){if(this.__b){if(this.__v.__k){var n=document.createElement("div"),o=this.__v.__k[0].__c;this.__v.__k[0]=function e(t,n,o){return t&&(t.__c&&t.__c.__H&&(t.__c.__H.__.forEach((function(e){"function"==typeof e.__c&&e.__c()})),t.__c.__H=null),null!=(t=I({},t)).__c&&(t.__c.__P===o&&(t.__c.__P=n),t.__c=null),t.__k=t.__k&&t.__k.map((function(t){return e(t,n,o)}))),t}(this.__b,n,o.__O=o.__P)}this.__b=null}var r=t.__a&&(0,a.createElement)(a.Fragment,null,e.fallback);return r&&(r.__h=null),[(0,a.createElement)(a.Fragment,null,t.__a?null:e.children),r]};var G=function(e,t,n){if(++n[1]===n[0]&&e.o.delete(t),e.props.revealOrder&&("t"!==e.props.revealOrder[0]||!e.o.size))for(n=e.u;n;){for(;n.length>3;)n.pop()();if(n[1]<n[0])break;e.u=n=n[2]}};function Y(e){return this.getChildContext=function(){return e.context},e.children}function Z(e){var t=this,n=e.i;t.componentWillUnmount=function(){(0,a.render)(null,t.l),t.l=null,t.i=null},t.i&&t.i!==n&&t.componentWillUnmount(),e.__v?(t.l||(t.i=n,t.l={nodeType:1,parentNode:n,childNodes:[],appendChild:function(e){this.childNodes.push(e),t.i.appendChild(e)},insertBefore:function(e,n){this.childNodes.push(e),t.i.appendChild(e)},removeChild:function(e){this.childNodes.splice(this.childNodes.indexOf(e)>>>1,1),t.i.removeChild(e)}}),(0,a.render)((0,a.createElement)(Y,{context:t.context},e.__v),t.l)):t.l&&t.componentWillUnmount()}function X(e,t){var n=(0,a.createElement)(Z,{__v:e,i:t});return n.containerInfo=t,n}(J.prototype=new a.Component).__a=function(e){var t=this,n=q(t.__v),o=t.o.get(e);return o[0]++,function(r){var i=function(){t.props.revealOrder?(o.push(r),G(t,e,o)):r()};n?n(i):i()}},J.prototype.render=function(e){this.u=null,this.o=new Map;var t=(0,a.toChildArray)(e.children);e.revealOrder&&"b"===e.revealOrder[0]&&t.reverse();for(var n=t.length;n--;)this.o.set(t[n],this.u=[1,0,this.u]);return e.children},J.prototype.componentDidUpdate=J.prototype.componentDidMount=function(){var e=this;this.o.forEach((function(t,n){G(e,n,t)}))};var Q="undefined"!=typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103,ee=/^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|shape|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/,te="undefined"!=typeof document,ne=function(e){return("undefined"!=typeof Symbol&&"symbol"==typeof Symbol()?/fil|che|rad/i:/fil|che|ra/i).test(e)};function oe(e,t,n){return null==t.__k&&(t.textContent=""),(0,a.render)(e,t),"function"==typeof n&&n(),e?e.__c:null}function re(e,t,n){return(0,a.hydrate)(e,t),"function"==typeof n&&n(),e?e.__c:null}a.Component.prototype.isReactComponent={},["componentWillMount","componentWillReceiveProps","componentWillUpdate"].forEach((function(e){Object.defineProperty(a.Component.prototype,e,{configurable:!0,get:function(){return this["UNSAFE_"+e]},set:function(t){Object.defineProperty(this,e,{configurable:!0,writable:!0,value:t})}})}));var ie=a.options.event;function se(){}function ae(){return this.cancelBubble}function le(){return this.defaultPrevented}a.options.event=function(e){return ie&&(e=ie(e)),e.persist=se,e.isPropagationStopped=ae,e.isDefaultPrevented=le,e.nativeEvent=e};var ue,ce={configurable:!0,get:function(){return this.class}},de=a.options.vnode;a.options.vnode=function(e){var t=e.type,n=e.props,o=n;if("string"==typeof t){var r=-1===t.indexOf("-");for(var i in o={},n){var s=n[i];te&&"children"===i&&"noscript"===t||"value"===i&&"defaultValue"in n&&null==s||("defaultValue"===i&&"value"in n&&null==n.value?i="value":"download"===i&&!0===s?s="":/ondoubleclick/i.test(i)?i="ondblclick":/^onchange(textarea|input)/i.test(i+t)&&!ne(n.type)?i="oninput":/^onfocus$/i.test(i)?i="onfocusin":/^onblur$/i.test(i)?i="onfocusout":/^on(Ani|Tra|Tou|BeforeInp|Compo)/.test(i)?i=i.toLowerCase():r&&ee.test(i)?i=i.replace(/[A-Z0-9]/,"-$&").toLowerCase():null===s&&(s=void 0),/^oninput$/i.test(i)&&(i=i.toLowerCase(),o[i]&&(i="oninputCapture")),o[i]=s)}"select"==t&&o.multiple&&Array.isArray(o.value)&&(o.value=(0,a.toChildArray)(n.children).forEach((function(e){e.props.selected=-1!=o.value.indexOf(e.props.value)}))),"select"==t&&null!=o.defaultValue&&(o.value=(0,a.toChildArray)(n.children).forEach((function(e){e.props.selected=o.multiple?-1!=o.defaultValue.indexOf(e.props.value):o.defaultValue==e.props.value}))),e.props=o,n.class!=n.className&&(ce.enumerable="className"in n,null!=n.className&&(o.class=n.className),Object.defineProperty(o,"className",ce))}e.$$typeof=Q,de&&de(e)};var he=a.options.__r;a.options.__r=function(e){he&&he(e),ue=e.__c};var fe={ReactCurrentDispatcher:{current:{readContext:function(e){return ue.__n[e.__c].props.value}}}},pe="17.0.2";function me(e){return a.createElement.bind(null,e)}function ge(e){return!!e&&e.$$typeof===Q}function ve(e){return ge(e)?a.cloneElement.apply(null,arguments):e}function be(e){return!!e.__k&&((0,a.render)(null,e),!0)}function ye(e){return e&&(e.base||1===e.nodeType&&e)||null}var xe=function(e,t){return e(t)},_e=function(e,t){return e(t)},we=a.Fragment;function je(e){e()}function Ce(e){return e}function Ee(){return[!1,je]}var Se=x;function Oe(e,t){var n=v(t),o=n[0],r=n[1];return y((function(){return e((function(){r(t())}))}),[e,t]),o}const Ne={useState:v,useReducer:b,useEffect:y,useLayoutEffect:x,useInsertionEffect:x,useTransition:Ee,useDeferredValue:Ce,useSyncExternalStore:Oe,startTransition:je,useRef:_,useImperativeHandle:w,useMemo:j,useCallback:C,useContext:E,useDebugValue:S,version:"17.0.2",Children:W,render:oe,hydrate:re,unmountComponentAtNode:be,createPortal:X,createElement:a.createElement,createContext:a.createContext,createFactory:me,cloneElement:ve,createRef:a.createRef,Fragment:a.Fragment,isValidElement:ge,findDOMNode:ye,Component:a.Component,PureComponent:D,memo:B,forwardRef:U,flushSync:_e,unstable_batchedUpdates:xe,StrictMode:a.Fragment,Suspense:V,SuspenseList:J,lazy:$,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:fe}},6400:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Component:()=>y,Fragment:()=>b,cloneElement:()=>U,createContext:()=>K,createElement:()=>m,createRef:()=>v,h:()=>m,hydrate:()=>L,isValidElement:()=>s,options:()=>r,render:()=>F,toChildArray:()=>S});var o,r,i,s,a,l,u,c={},d=[],h=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function f(e,t){for(var n in t)e[n]=t[n];return e}function p(e){var t=e.parentNode;t&&t.removeChild(e)}function m(e,t,n){var r,i,s,a={};for(s in t)"key"==s?r=t[s]:"ref"==s?i=t[s]:a[s]=t[s];if(arguments.length>2&&(a.children=arguments.length>3?o.call(arguments,2):n),"function"==typeof e&&null!=e.defaultProps)for(s in e.defaultProps)void 0===a[s]&&(a[s]=e.defaultProps[s]);return g(e,a,r,i,null)}function g(e,t,n,o,s){var a={type:e,props:t,key:n,ref:o,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==s?++i:s};return null==s&&null!=r.vnode&&r.vnode(a),a}function v(){return{current:null}}function b(e){return e.children}function y(e,t){this.props=e,this.context=t}function x(e,t){if(null==t)return e.__?x(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return"function"==typeof e.type?x(e):null}function _(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return _(e)}}function w(e){(!e.__d&&(e.__d=!0)&&a.push(e)&&!j.__r++||l!==r.debounceRendering)&&((l=r.debounceRendering)||setTimeout)(j)}function j(){for(var e;j.__r=a.length;)e=a.sort((function(e,t){return e.__v.__b-t.__v.__b})),a=[],e.some((function(e){var t,n,o,r,i,s;e.__d&&(i=(r=(t=e).__v).__e,(s=t.__P)&&(n=[],(o=f({},r)).__v=r.__v+1,R(s,r,o,t.__n,void 0!==s.ownerSVGElement,null!=r.__h?[i]:null,n,null==i?x(r):i,r.__h),P(n,r),r.__e!=i&&_(r)))}))}function C(e,t,n,o,r,i,s,a,l,u){var h,f,p,m,v,y,_,w=o&&o.__k||d,j=w.length;for(n.__k=[],h=0;h<t.length;h++)if(null!=(m=n.__k[h]=null==(m=t[h])||"boolean"==typeof m?null:"string"==typeof m||"number"==typeof m||"bigint"==typeof m?g(null,m,null,null,m):Array.isArray(m)?g(b,{children:m},null,null,null):m.__b>0?g(m.type,m.props,m.key,null,m.__v):m)){if(m.__=n,m.__b=n.__b+1,null===(p=w[h])||p&&m.key==p.key&&m.type===p.type)w[h]=void 0;else for(f=0;f<j;f++){if((p=w[f])&&m.key==p.key&&m.type===p.type){w[f]=void 0;break}p=null}R(e,m,p=p||c,r,i,s,a,l,u),v=m.__e,(f=m.ref)&&p.ref!=f&&(_||(_=[]),p.ref&&_.push(p.ref,null,m),_.push(f,m.__c||v,m)),null!=v?(null==y&&(y=v),"function"==typeof m.type&&m.__k===p.__k?m.__d=l=E(m,l,e):l=O(e,m,p,w,v,l),"function"==typeof n.type&&(n.__d=l)):l&&p.__e==l&&l.parentNode!=e&&(l=x(p))}for(n.__e=y,h=j;h--;)null!=w[h]&&("function"==typeof n.type&&null!=w[h].__e&&w[h].__e==n.__d&&(n.__d=x(o,h+1)),D(w[h],w[h]));if(_)for(h=0;h<_.length;h++)A(_[h],_[++h],_[++h])}function E(e,t,n){for(var o,r=e.__k,i=0;r&&i<r.length;i++)(o=r[i])&&(o.__=e,t="function"==typeof o.type?E(o,t,n):O(n,o,o,r,o.__e,t));return t}function S(e,t){return t=t||[],null==e||"boolean"==typeof e||(Array.isArray(e)?e.some((function(e){S(e,t)})):t.push(e)),t}function O(e,t,n,o,r,i){var s,a,l;if(void 0!==t.__d)s=t.__d,t.__d=void 0;else if(null==n||r!=i||null==r.parentNode)e:if(null==i||i.parentNode!==e)e.appendChild(r),s=null;else{for(a=i,l=0;(a=a.nextSibling)&&l<o.length;l+=2)if(a==r)break e;e.insertBefore(r,i),s=i}return void 0!==s?s:r.nextSibling}function N(e,t,n){"-"===t[0]?e.setProperty(t,n):e[t]=null==n?"":"number"!=typeof n||h.test(t)?n:n+"px"}function T(e,t,n,o,r){var i;e:if("style"===t)if("string"==typeof n)e.style.cssText=n;else{if("string"==typeof o&&(e.style.cssText=o=""),o)for(t in o)n&&t in n||N(e.style,t,"");if(n)for(t in n)o&&n[t]===o[t]||N(e.style,t,n[t])}else if("o"===t[0]&&"n"===t[1])i=t!==(t=t.replace(/Capture$/,"")),t=t.toLowerCase()in e?t.toLowerCase().slice(2):t.slice(2),e.l||(e.l={}),e.l[t+i]=n,n?o||e.addEventListener(t,i?k:M,i):e.removeEventListener(t,i?k:M,i);else if("dangerouslySetInnerHTML"!==t){if(r)t=t.replace(/xlink(H|:h)/,"h").replace(/sName$/,"s");else if("href"!==t&&"list"!==t&&"form"!==t&&"tabIndex"!==t&&"download"!==t&&t in e)try{e[t]=null==n?"":n;break e}catch(e){}"function"==typeof n||(null!=n&&(!1!==n||"a"===t[0]&&"r"===t[1])?e.setAttribute(t,n):e.removeAttribute(t))}}function M(e){this.l[e.type+!1](r.event?r.event(e):e)}function k(e){this.l[e.type+!0](r.event?r.event(e):e)}function R(e,t,n,o,i,s,a,l,u){var c,d,h,p,m,g,v,x,_,w,j,E,S,O=t.type;if(void 0!==t.constructor)return null;null!=n.__h&&(u=n.__h,l=t.__e=n.__e,t.__h=null,s=[l]),(c=r.__b)&&c(t);try{e:if("function"==typeof O){if(x=t.props,_=(c=O.contextType)&&o[c.__c],w=c?_?_.props.value:c.__:o,n.__c?v=(d=t.__c=n.__c).__=d.__E:("prototype"in O&&O.prototype.render?t.__c=d=new O(x,w):(t.__c=d=new y(x,w),d.constructor=O,d.render=B),_&&_.sub(d),d.props=x,d.state||(d.state={}),d.context=w,d.__n=o,h=d.__d=!0,d.__h=[]),null==d.__s&&(d.__s=d.state),null!=O.getDerivedStateFromProps&&(d.__s==d.state&&(d.__s=f({},d.__s)),f(d.__s,O.getDerivedStateFromProps(x,d.__s))),p=d.props,m=d.state,h)null==O.getDerivedStateFromProps&&null!=d.componentWillMount&&d.componentWillMount(),null!=d.componentDidMount&&d.__h.push(d.componentDidMount);else{if(null==O.getDerivedStateFromProps&&x!==p&&null!=d.componentWillReceiveProps&&d.componentWillReceiveProps(x,w),!d.__e&&null!=d.shouldComponentUpdate&&!1===d.shouldComponentUpdate(x,d.__s,w)||t.__v===n.__v){d.props=x,d.state=d.__s,t.__v!==n.__v&&(d.__d=!1),d.__v=t,t.__e=n.__e,t.__k=n.__k,t.__k.forEach((function(e){e&&(e.__=t)})),d.__h.length&&a.push(d);break e}null!=d.componentWillUpdate&&d.componentWillUpdate(x,d.__s,w),null!=d.componentDidUpdate&&d.__h.push((function(){d.componentDidUpdate(p,m,g)}))}if(d.context=w,d.props=x,d.__v=t,d.__P=e,j=r.__r,E=0,"prototype"in O&&O.prototype.render)d.state=d.__s,d.__d=!1,j&&j(t),c=d.render(d.props,d.state,d.context);else do{d.__d=!1,j&&j(t),c=d.render(d.props,d.state,d.context),d.state=d.__s}while(d.__d&&++E<25);d.state=d.__s,null!=d.getChildContext&&(o=f(f({},o),d.getChildContext())),h||null==d.getSnapshotBeforeUpdate||(g=d.getSnapshotBeforeUpdate(p,m)),S=null!=c&&c.type===b&&null==c.key?c.props.children:c,C(e,Array.isArray(S)?S:[S],t,n,o,i,s,a,l,u),d.base=t.__e,t.__h=null,d.__h.length&&a.push(d),v&&(d.__E=d.__=null),d.__e=!1}else null==s&&t.__v===n.__v?(t.__k=n.__k,t.__e=n.__e):t.__e=I(n.__e,t,n,o,i,s,a,u);(c=r.diffed)&&c(t)}catch(e){t.__v=null,(u||null!=s)&&(t.__e=l,t.__h=!!u,s[s.indexOf(l)]=null),r.__e(e,t,n)}}function P(e,t){r.__c&&r.__c(t,e),e.some((function(t){try{e=t.__h,t.__h=[],e.some((function(e){e.call(t)}))}catch(e){r.__e(e,t.__v)}}))}function I(e,t,n,r,i,s,a,l){var u,d,h,f=n.props,m=t.props,g=t.type,v=0;if("svg"===g&&(i=!0),null!=s)for(;v<s.length;v++)if((u=s[v])&&"setAttribute"in u==!!g&&(g?u.localName===g:3===u.nodeType)){e=u,s[v]=null;break}if(null==e){if(null===g)return document.createTextNode(m);e=i?document.createElementNS("http://www.w3.org/2000/svg",g):document.createElement(g,m.is&&m),s=null,l=!1}if(null===g)f===m||l&&e.data===m||(e.data=m);else{if(s=s&&o.call(e.childNodes),d=(f=n.props||c).dangerouslySetInnerHTML,h=m.dangerouslySetInnerHTML,!l){if(null!=s)for(f={},v=0;v<e.attributes.length;v++)f[e.attributes[v].name]=e.attributes[v].value;(h||d)&&(h&&(d&&h.__html==d.__html||h.__html===e.innerHTML)||(e.innerHTML=h&&h.__html||""))}if(function(e,t,n,o,r){var i;for(i in n)"children"===i||"key"===i||i in t||T(e,i,null,n[i],o);for(i in t)r&&"function"!=typeof t[i]||"children"===i||"key"===i||"value"===i||"checked"===i||n[i]===t[i]||T(e,i,t[i],n[i],o)}(e,m,f,i,l),h)t.__k=[];else if(v=t.props.children,C(e,Array.isArray(v)?v:[v],t,n,r,i&&"foreignObject"!==g,s,a,s?s[0]:n.__k&&x(n,0),l),null!=s)for(v=s.length;v--;)null!=s[v]&&p(s[v]);l||("value"in m&&void 0!==(v=m.value)&&(v!==e.value||"progress"===g&&!v||"option"===g&&v!==f.value)&&T(e,"value",v,f.value,!1),"checked"in m&&void 0!==(v=m.checked)&&v!==e.checked&&T(e,"checked",v,f.checked,!1))}return e}function A(e,t,n){try{"function"==typeof e?e(t):e.current=t}catch(e){r.__e(e,n)}}function D(e,t,n){var o,i;if(r.unmount&&r.unmount(e),(o=e.ref)&&(o.current&&o.current!==e.__e||A(o,null,t)),null!=(o=e.__c)){if(o.componentWillUnmount)try{o.componentWillUnmount()}catch(e){r.__e(e,t)}o.base=o.__P=null}if(o=e.__k)for(i=0;i<o.length;i++)o[i]&&D(o[i],t,"function"!=typeof e.type);n||null==e.__e||p(e.__e),e.__e=e.__d=void 0}function B(e,t,n){return this.constructor(e,n)}function F(e,t,n){var i,s,a;r.__&&r.__(e,t),s=(i="function"==typeof n)?null:n&&n.__k||t.__k,a=[],R(t,e=(!i&&n||t).__k=m(b,null,[e]),s||c,c,void 0!==t.ownerSVGElement,!i&&n?[n]:s?null:t.firstChild?o.call(t.childNodes):null,a,!i&&n?n:s?s.__e:t.firstChild,i),P(a,e)}function L(e,t){F(e,t,L)}function U(e,t,n){var r,i,s,a=f({},e.props);for(s in t)"key"==s?r=t[s]:"ref"==s?i=t[s]:a[s]=t[s];return arguments.length>2&&(a.children=arguments.length>3?o.call(arguments,2):n),g(e.type,a,r||e.key,i||e.ref,null)}function K(e,t){var n={__c:t="__cC"+u++,__:e,Consumer:function(e,t){return e.children(t)},Provider:function(e){var n,o;return this.getChildContext||(n=[],(o={})[t]=this,this.getChildContext=function(){return o},this.shouldComponentUpdate=function(e){this.props.value!==e.value&&n.some(w)},this.sub=function(e){n.push(e);var t=e.componentWillUnmount;e.componentWillUnmount=function(){n.splice(n.indexOf(e),1),t&&t.call(e)}}),e.children}};return n.Provider.__=n.Consumer.contextType=n}o=d.slice,r={__e:function(e,t,n,o){for(var r,i,s;t=t.__;)if((r=t.__c)&&!r.__)try{if((i=r.constructor)&&null!=i.getDerivedStateFromError&&(r.setState(i.getDerivedStateFromError(e)),s=r.__d),null!=r.componentDidCatch&&(r.componentDidCatch(e,o||{}),s=r.__d),s)return r.__E=r}catch(t){e=t}throw e}},i=0,s=function(e){return null!=e&&void 0===e.constructor},y.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=f({},this.state),"function"==typeof e&&(e=e(f({},n),this.props)),e&&f(n,e),null!=e&&this.__v&&(t&&this.__h.push(t),w(this))},y.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),w(this))},y.prototype.render=b,a=[],j.__r=0,u=0},6584:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Fragment:()=>o.Fragment,jsx:()=>i,jsxDEV:()=>i,jsxs:()=>i});var o=n(6400),r=0;function i(e,t,n,i,s){var a,l,u={};for(l in t)"ref"==l?a=t[l]:u[l]=t[l];var c={type:e,props:u,key:n,ref:a,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:--r,__source:s,__self:i};if("function"==typeof e&&(a=e.defaultProps))for(l in a)void 0===u[l]&&(u[l]=a[l]);return o.options.vnode&&o.options.vnode(c),c}},2703:(e,t,n)=>{"use strict";var o=n(414);function r(){}function i(){}i.resetWarningCache=r,e.exports=function(){function e(e,t,n,r,i,s){if(s!==o){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:r};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},9590:e=>{var t="undefined"!=typeof Element,n="function"==typeof Map,o="function"==typeof Set,r="function"==typeof ArrayBuffer&&!!ArrayBuffer.isView;function i(e,s){if(e===s)return!0;if(e&&s&&"object"==typeof e&&"object"==typeof s){if(e.constructor!==s.constructor)return!1;var a,l,u,c;if(Array.isArray(e)){if((a=e.length)!=s.length)return!1;for(l=a;0!=l--;)if(!i(e[l],s[l]))return!1;return!0}if(n&&e instanceof Map&&s instanceof Map){if(e.size!==s.size)return!1;for(c=e.entries();!(l=c.next()).done;)if(!s.has(l.value[0]))return!1;for(c=e.entries();!(l=c.next()).done;)if(!i(l.value[1],s.get(l.value[0])))return!1;return!0}if(o&&e instanceof Set&&s instanceof Set){if(e.size!==s.size)return!1;for(c=e.entries();!(l=c.next()).done;)if(!s.has(l.value[0]))return!1;return!0}if(r&&ArrayBuffer.isView(e)&&ArrayBuffer.isView(s)){if((a=e.length)!=s.length)return!1;for(l=a;0!=l--;)if(e[l]!==s[l])return!1;return!0}if(e.constructor===RegExp)return e.source===s.source&&e.flags===s.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===s.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===s.toString();if((a=(u=Object.keys(e)).length)!==Object.keys(s).length)return!1;for(l=a;0!=l--;)if(!Object.prototype.hasOwnProperty.call(s,u[l]))return!1;if(t&&e instanceof Element)return!1;for(l=a;0!=l--;)if(("_owner"!==u[l]&&"__v"!==u[l]&&"__o"!==u[l]||!e.$$typeof)&&!i(e[u[l]],s[u[l]]))return!1;return!0}return e!=e&&s!=s}e.exports=function(e,t){try{return i(e,t)}catch(e){if((e.message||"").match(/stack|recursion/i))return console.warn("react-fast-compare cannot handle circular refs"),!1;throw e}}},5455:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Manager:()=>s,Popper:()=>Ee,Reference:()=>Ne,usePopper:()=>_e});var o=n(9748),r=o.createContext(),i=o.createContext();function s(e){var t=e.children,n=o.useState(null),s=n[0],a=n[1],l=o.useRef(!1);o.useEffect((function(){return function(){l.current=!0}}),[]);var u=o.useCallback((function(e){l.current||a(e)}),[]);return o.createElement(r.Provider,{value:s},o.createElement(i.Provider,{value:u},t))}var a=function(e){return Array.isArray(e)?e[0]:e},l=function(e){if("function"==typeof e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return e.apply(void 0,n)}},u=function(e,t){if("function"==typeof e)return l(e,t);null!=e&&(e.current=t)},c=function(e){return e.reduce((function(e,t){var n=t[0],o=t[1];return e[n]=o,e}),{})},d="undefined"!=typeof window&&window.document&&window.document.createElement?o.useLayoutEffect:o.useEffect;function h(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function f(e){return e instanceof h(e).Element||e instanceof Element}function p(e){return e instanceof h(e).HTMLElement||e instanceof HTMLElement}function m(e){return"undefined"!=typeof ShadowRoot&&(e instanceof h(e).ShadowRoot||e instanceof ShadowRoot)}var g=Math.max,v=Math.min,b=Math.round;function y(e,t){void 0===t&&(t=!1);var n=e.getBoundingClientRect(),o=1,r=1;if(p(e)&&t){var i=e.offsetHeight,s=e.offsetWidth;s>0&&(o=b(n.width)/s||1),i>0&&(r=b(n.height)/i||1)}return{width:n.width/o,height:n.height/r,top:n.top/r,right:n.right/o,bottom:n.bottom/r,left:n.left/o,x:n.left/o,y:n.top/r}}function x(e){var t=h(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function _(e){return e?(e.nodeName||"").toLowerCase():null}function w(e){return((f(e)?e.ownerDocument:e.document)||window.document).documentElement}function j(e){return y(w(e)).left+x(e).scrollLeft}function C(e){return h(e).getComputedStyle(e)}function E(e){var t=C(e),n=t.overflow,o=t.overflowX,r=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+r+o)}function S(e,t,n){void 0===n&&(n=!1);var o,r,i=p(t),s=p(t)&&function(e){var t=e.getBoundingClientRect(),n=b(t.width)/e.offsetWidth||1,o=b(t.height)/e.offsetHeight||1;return 1!==n||1!==o}(t),a=w(t),l=y(e,s),u={scrollLeft:0,scrollTop:0},c={x:0,y:0};return(i||!i&&!n)&&(("body"!==_(t)||E(a))&&(u=(o=t)!==h(o)&&p(o)?{scrollLeft:(r=o).scrollLeft,scrollTop:r.scrollTop}:x(o)),p(t)?((c=y(t,!0)).x+=t.clientLeft,c.y+=t.clientTop):a&&(c.x=j(a))),{x:l.left+u.scrollLeft-c.x,y:l.top+u.scrollTop-c.y,width:l.width,height:l.height}}function O(e){var t=y(e),n=e.offsetWidth,o=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-o)<=1&&(o=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:o}}function N(e){return"html"===_(e)?e:e.assignedSlot||e.parentNode||(m(e)?e.host:null)||w(e)}function T(e){return["html","body","#document"].indexOf(_(e))>=0?e.ownerDocument.body:p(e)&&E(e)?e:T(N(e))}function M(e,t){var n;void 0===t&&(t=[]);var o=T(e),r=o===(null==(n=e.ownerDocument)?void 0:n.body),i=h(o),s=r?[i].concat(i.visualViewport||[],E(o)?o:[]):o,a=t.concat(s);return r?a:a.concat(M(N(s)))}function k(e){return["table","td","th"].indexOf(_(e))>=0}function R(e){return p(e)&&"fixed"!==C(e).position?e.offsetParent:null}function P(e){for(var t=h(e),n=R(e);n&&k(n)&&"static"===C(n).position;)n=R(n);return n&&("html"===_(n)||"body"===_(n)&&"static"===C(n).position)?t:n||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&p(e)&&"fixed"===C(e).position)return null;var n=N(e);for(m(n)&&(n=n.host);p(n)&&["html","body"].indexOf(_(n))<0;){var o=C(n);if("none"!==o.transform||"none"!==o.perspective||"paint"===o.contain||-1!==["transform","perspective"].indexOf(o.willChange)||t&&"filter"===o.willChange||t&&o.filter&&"none"!==o.filter)return n;n=n.parentNode}return null}(e)||t}var I="top",A="bottom",D="right",B="left",F="auto",L=[I,A,D,B],U="start",K="end",W="viewport",H="popper",z=L.reduce((function(e,t){return e.concat([t+"-"+U,t+"-"+K])}),[]),V=[].concat(L,[F]).reduce((function(e,t){return e.concat([t,t+"-"+U,t+"-"+K])}),[]),q=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function $(e){var t=new Map,n=new Set,o=[];function r(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var o=t.get(e);o&&r(o)}})),o.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||r(e)})),o}var J={placement:"bottom",modifiers:[],strategy:"absolute"};function G(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Y(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,o=void 0===n?[]:n,r=t.defaultOptions,i=void 0===r?J:r;return function(e,t,n){void 0===n&&(n=i);var r,s,a={placement:"bottom",orderedModifiers:[],options:Object.assign({},J,i),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},l=[],u=!1,c={state:a,setOptions:function(n){var r="function"==typeof n?n(a.options):n;d(),a.options=Object.assign({},i,a.options,r),a.scrollParents={reference:f(e)?M(e):e.contextElement?M(e.contextElement):[],popper:M(t)};var s,u,h=function(e){var t=$(e);return q.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((s=[].concat(o,a.options.modifiers),u=s.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(u).map((function(e){return u[e]}))));return a.orderedModifiers=h.filter((function(e){return e.enabled})),a.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,o=void 0===n?{}:n,r=e.effect;if("function"==typeof r){var i=r({state:a,name:t,instance:c,options:o});l.push(i||function(){})}})),c.update()},forceUpdate:function(){if(!u){var e=a.elements,t=e.reference,n=e.popper;if(G(t,n)){a.rects={reference:S(t,P(n),"fixed"===a.options.strategy),popper:O(n)},a.reset=!1,a.placement=a.options.placement,a.orderedModifiers.forEach((function(e){return a.modifiersData[e.name]=Object.assign({},e.data)}));for(var o=0;o<a.orderedModifiers.length;o++)if(!0!==a.reset){var r=a.orderedModifiers[o],i=r.fn,s=r.options,l=void 0===s?{}:s,d=r.name;"function"==typeof i&&(a=i({state:a,options:l,name:d,instance:c})||a)}else a.reset=!1,o=-1}}},update:(r=function(){return new Promise((function(e){c.forceUpdate(),e(a)}))},function(){return s||(s=new Promise((function(e){Promise.resolve().then((function(){s=void 0,e(r())}))}))),s}),destroy:function(){d(),u=!0}};if(!G(e,t))return c;function d(){l.forEach((function(e){return e()})),l=[]}return c.setOptions(n).then((function(e){!u&&n.onFirstUpdate&&n.onFirstUpdate(e)})),c}}var Z={passive:!0};function X(e){return e.split("-")[0]}function Q(e){return e.split("-")[1]}function ee(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function te(e){var t,n=e.reference,o=e.element,r=e.placement,i=r?X(r):null,s=r?Q(r):null,a=n.x+n.width/2-o.width/2,l=n.y+n.height/2-o.height/2;switch(i){case I:t={x:a,y:n.y-o.height};break;case A:t={x:a,y:n.y+n.height};break;case D:t={x:n.x+n.width,y:l};break;case B:t={x:n.x-o.width,y:l};break;default:t={x:n.x,y:n.y}}var u=i?ee(i):null;if(null!=u){var c="y"===u?"height":"width";switch(s){case U:t[u]=t[u]-(n[c]/2-o[c]/2);break;case K:t[u]=t[u]+(n[c]/2-o[c]/2)}}return t}var ne={top:"auto",right:"auto",bottom:"auto",left:"auto"};function oe(e){var t,n=e.popper,o=e.popperRect,r=e.placement,i=e.variation,s=e.offsets,a=e.position,l=e.gpuAcceleration,u=e.adaptive,c=e.roundOffsets,d=e.isFixed,f=s.x,p=void 0===f?0:f,m=s.y,g=void 0===m?0:m,v="function"==typeof c?c({x:p,y:g}):{x:p,y:g};p=v.x,g=v.y;var y=s.hasOwnProperty("x"),x=s.hasOwnProperty("y"),_=B,j=I,E=window;if(u){var S=P(n),O="clientHeight",N="clientWidth";S===h(n)&&"static"!==C(S=w(n)).position&&"absolute"===a&&(O="scrollHeight",N="scrollWidth"),(r===I||(r===B||r===D)&&i===K)&&(j=A,g-=(d&&S===E&&E.visualViewport?E.visualViewport.height:S[O])-o.height,g*=l?1:-1),r!==B&&(r!==I&&r!==A||i!==K)||(_=D,p-=(d&&S===E&&E.visualViewport?E.visualViewport.width:S[N])-o.width,p*=l?1:-1)}var T,M=Object.assign({position:a},u&&ne),k=!0===c?function(e){var t=e.x,n=e.y,o=window.devicePixelRatio||1;return{x:b(t*o)/o||0,y:b(n*o)/o||0}}({x:p,y:g}):{x:p,y:g};return p=k.x,g=k.y,l?Object.assign({},M,((T={})[j]=x?"0":"",T[_]=y?"0":"",T.transform=(E.devicePixelRatio||1)<=1?"translate("+p+"px, "+g+"px)":"translate3d("+p+"px, "+g+"px, 0)",T)):Object.assign({},M,((t={})[j]=x?g+"px":"",t[_]=y?p+"px":"",t.transform="",t))}var re={left:"right",right:"left",bottom:"top",top:"bottom"};function ie(e){return e.replace(/left|right|bottom|top/g,(function(e){return re[e]}))}var se={start:"end",end:"start"};function ae(e){return e.replace(/start|end/g,(function(e){return se[e]}))}function le(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&m(n)){var o=t;do{if(o&&e.isSameNode(o))return!0;o=o.parentNode||o.host}while(o)}return!1}function ue(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function ce(e,t){return t===W?ue(function(e){var t=h(e),n=w(e),o=t.visualViewport,r=n.clientWidth,i=n.clientHeight,s=0,a=0;return o&&(r=o.width,i=o.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(s=o.offsetLeft,a=o.offsetTop)),{width:r,height:i,x:s+j(e),y:a}}(e)):f(t)?function(e){var t=y(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):ue(function(e){var t,n=w(e),o=x(e),r=null==(t=e.ownerDocument)?void 0:t.body,i=g(n.scrollWidth,n.clientWidth,r?r.scrollWidth:0,r?r.clientWidth:0),s=g(n.scrollHeight,n.clientHeight,r?r.scrollHeight:0,r?r.clientHeight:0),a=-o.scrollLeft+j(e),l=-o.scrollTop;return"rtl"===C(r||n).direction&&(a+=g(n.clientWidth,r?r.clientWidth:0)-i),{width:i,height:s,x:a,y:l}}(w(e)))}function de(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function he(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}function fe(e,t){void 0===t&&(t={});var n=t,o=n.placement,r=void 0===o?e.placement:o,i=n.boundary,s=void 0===i?"clippingParents":i,a=n.rootBoundary,l=void 0===a?W:a,u=n.elementContext,c=void 0===u?H:u,d=n.altBoundary,h=void 0!==d&&d,m=n.padding,b=void 0===m?0:m,x=de("number"!=typeof b?b:he(b,L)),j=c===H?"reference":H,E=e.rects.popper,S=e.elements[h?j:c],O=function(e,t,n){var o="clippingParents"===t?function(e){var t=M(N(e)),n=["absolute","fixed"].indexOf(C(e).position)>=0&&p(e)?P(e):e;return f(n)?t.filter((function(e){return f(e)&&le(e,n)&&"body"!==_(e)})):[]}(e):[].concat(t),r=[].concat(o,[n]),i=r[0],s=r.reduce((function(t,n){var o=ce(e,n);return t.top=g(o.top,t.top),t.right=v(o.right,t.right),t.bottom=v(o.bottom,t.bottom),t.left=g(o.left,t.left),t}),ce(e,i));return s.width=s.right-s.left,s.height=s.bottom-s.top,s.x=s.left,s.y=s.top,s}(f(S)?S:S.contextElement||w(e.elements.popper),s,l),T=y(e.elements.reference),k=te({reference:T,element:E,strategy:"absolute",placement:r}),R=ue(Object.assign({},E,k)),B=c===H?R:T,F={top:O.top-B.top+x.top,bottom:B.bottom-O.bottom+x.bottom,left:O.left-B.left+x.left,right:B.right-O.right+x.right},U=e.modifiersData.offset;if(c===H&&U){var K=U[r];Object.keys(F).forEach((function(e){var t=[D,A].indexOf(e)>=0?1:-1,n=[I,A].indexOf(e)>=0?"y":"x";F[e]+=K[n]*t}))}return F}function pe(e,t,n){return g(e,v(t,n))}function me(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function ge(e){return[I,D,A,B].some((function(t){return e[t]>=0}))}var ve=Y({defaultModifiers:[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,o=e.options,r=o.scroll,i=void 0===r||r,s=o.resize,a=void 0===s||s,l=h(t.elements.popper),u=[].concat(t.scrollParents.reference,t.scrollParents.popper);return i&&u.forEach((function(e){e.addEventListener("scroll",n.update,Z)})),a&&l.addEventListener("resize",n.update,Z),function(){i&&u.forEach((function(e){e.removeEventListener("scroll",n.update,Z)})),a&&l.removeEventListener("resize",n.update,Z)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=te({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,o=n.gpuAcceleration,r=void 0===o||o,i=n.adaptive,s=void 0===i||i,a=n.roundOffsets,l=void 0===a||a,u={placement:X(t.placement),variation:Q(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:r,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,oe(Object.assign({},u,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:s,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,oe(Object.assign({},u,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},o=t.attributes[e]||{},r=t.elements[e];p(r)&&_(r)&&(Object.assign(r.style,n),Object.keys(o).forEach((function(e){var t=o[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var o=t.elements[e],r=t.attributes[e]||{},i=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});p(o)&&_(o)&&(Object.assign(o.style,i),Object.keys(r).forEach((function(e){o.removeAttribute(e)})))}))}},requires:["computeStyles"]},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,o=e.name,r=n.offset,i=void 0===r?[0,0]:r,s=V.reduce((function(e,n){return e[n]=function(e,t,n){var o=X(e),r=[B,I].indexOf(o)>=0?-1:1,i="function"==typeof n?n(Object.assign({},t,{placement:e})):n,s=i[0],a=i[1];return s=s||0,a=(a||0)*r,[B,D].indexOf(o)>=0?{x:a,y:s}:{x:s,y:a}}(n,t.rects,i),e}),{}),a=s[t.placement],l=a.x,u=a.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=l,t.modifiersData.popperOffsets.y+=u),t.modifiersData[o]=s}},{name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,o=e.name;if(!t.modifiersData[o]._skip){for(var r=n.mainAxis,i=void 0===r||r,s=n.altAxis,a=void 0===s||s,l=n.fallbackPlacements,u=n.padding,c=n.boundary,d=n.rootBoundary,h=n.altBoundary,f=n.flipVariations,p=void 0===f||f,m=n.allowedAutoPlacements,g=t.options.placement,v=X(g),b=l||(v!==g&&p?function(e){if(X(e)===F)return[];var t=ie(e);return[ae(e),t,ae(t)]}(g):[ie(g)]),y=[g].concat(b).reduce((function(e,n){return e.concat(X(n)===F?function(e,t){void 0===t&&(t={});var n=t,o=n.placement,r=n.boundary,i=n.rootBoundary,s=n.padding,a=n.flipVariations,l=n.allowedAutoPlacements,u=void 0===l?V:l,c=Q(o),d=c?a?z:z.filter((function(e){return Q(e)===c})):L,h=d.filter((function(e){return u.indexOf(e)>=0}));0===h.length&&(h=d);var f=h.reduce((function(t,n){return t[n]=fe(e,{placement:n,boundary:r,rootBoundary:i,padding:s})[X(n)],t}),{});return Object.keys(f).sort((function(e,t){return f[e]-f[t]}))}(t,{placement:n,boundary:c,rootBoundary:d,padding:u,flipVariations:p,allowedAutoPlacements:m}):n)}),[]),x=t.rects.reference,_=t.rects.popper,w=new Map,j=!0,C=y[0],E=0;E<y.length;E++){var S=y[E],O=X(S),N=Q(S)===U,T=[I,A].indexOf(O)>=0,M=T?"width":"height",k=fe(t,{placement:S,boundary:c,rootBoundary:d,altBoundary:h,padding:u}),R=T?N?D:B:N?A:I;x[M]>_[M]&&(R=ie(R));var P=ie(R),K=[];if(i&&K.push(k[O]<=0),a&&K.push(k[R]<=0,k[P]<=0),K.every((function(e){return e}))){C=S,j=!1;break}w.set(S,K)}if(j)for(var W=function(e){var t=y.find((function(t){var n=w.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return C=t,"break"},H=p?3:1;H>0&&"break"!==W(H);H--);t.placement!==C&&(t.modifiersData[o]._skip=!0,t.placement=C,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,o=e.name,r=n.mainAxis,i=void 0===r||r,s=n.altAxis,a=void 0!==s&&s,l=n.boundary,u=n.rootBoundary,c=n.altBoundary,d=n.padding,h=n.tether,f=void 0===h||h,p=n.tetherOffset,m=void 0===p?0:p,b=fe(t,{boundary:l,rootBoundary:u,padding:d,altBoundary:c}),y=X(t.placement),x=Q(t.placement),_=!x,w=ee(y),j="x"===w?"y":"x",C=t.modifiersData.popperOffsets,E=t.rects.reference,S=t.rects.popper,N="function"==typeof m?m(Object.assign({},t.rects,{placement:t.placement})):m,T="number"==typeof N?{mainAxis:N,altAxis:N}:Object.assign({mainAxis:0,altAxis:0},N),M=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,k={x:0,y:0};if(C){if(i){var R,F="y"===w?I:B,L="y"===w?A:D,K="y"===w?"height":"width",W=C[w],H=W+b[F],z=W-b[L],V=f?-S[K]/2:0,q=x===U?E[K]:S[K],$=x===U?-S[K]:-E[K],J=t.elements.arrow,G=f&&J?O(J):{width:0,height:0},Y=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},Z=Y[F],te=Y[L],ne=pe(0,E[K],G[K]),oe=_?E[K]/2-V-ne-Z-T.mainAxis:q-ne-Z-T.mainAxis,re=_?-E[K]/2+V+ne+te+T.mainAxis:$+ne+te+T.mainAxis,ie=t.elements.arrow&&P(t.elements.arrow),se=ie?"y"===w?ie.clientTop||0:ie.clientLeft||0:0,ae=null!=(R=null==M?void 0:M[w])?R:0,le=W+re-ae,ue=pe(f?v(H,W+oe-ae-se):H,W,f?g(z,le):z);C[w]=ue,k[w]=ue-W}if(a){var ce,de="x"===w?I:B,he="x"===w?A:D,me=C[j],ge="y"===j?"height":"width",ve=me+b[de],be=me-b[he],ye=-1!==[I,B].indexOf(y),xe=null!=(ce=null==M?void 0:M[j])?ce:0,_e=ye?ve:me-E[ge]-S[ge]-xe+T.altAxis,we=ye?me+E[ge]+S[ge]-xe-T.altAxis:be,je=f&&ye?function(e,t,n){var o=pe(e,t,n);return o>n?n:o}(_e,me,we):pe(f?_e:ve,me,f?we:be);C[j]=je,k[j]=je-me}t.modifiersData[o]=k}},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,o=e.name,r=e.options,i=n.elements.arrow,s=n.modifiersData.popperOffsets,a=X(n.placement),l=ee(a),u=[B,D].indexOf(a)>=0?"height":"width";if(i&&s){var c=function(e,t){return de("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:he(e,L))}(r.padding,n),d=O(i),h="y"===l?I:B,f="y"===l?A:D,p=n.rects.reference[u]+n.rects.reference[l]-s[l]-n.rects.popper[u],m=s[l]-n.rects.reference[l],g=P(i),v=g?"y"===l?g.clientHeight||0:g.clientWidth||0:0,b=p/2-m/2,y=c[h],x=v-d[u]-c[f],_=v/2-d[u]/2+b,w=pe(y,_,x),j=l;n.modifiersData[o]=((t={})[j]=w,t.centerOffset=w-_,t)}},effect:function(e){var t=e.state,n=e.options.element,o=void 0===n?"[data-popper-arrow]":n;null!=o&&("string"!=typeof o||(o=t.elements.popper.querySelector(o)))&&le(t.elements.popper,o)&&(t.elements.arrow=o)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,o=t.rects.reference,r=t.rects.popper,i=t.modifiersData.preventOverflow,s=fe(t,{elementContext:"reference"}),a=fe(t,{altBoundary:!0}),l=me(s,o),u=me(a,r,i),c=ge(l),d=ge(u);t.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:u,isReferenceHidden:c,hasPopperEscaped:d},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":c,"data-popper-escaped":d})}}]}),be=n(9590),ye=n.n(be),xe=[],_e=function(e,t,n){void 0===n&&(n={});var r=o.useRef(null),i={onFirstUpdate:n.onFirstUpdate,placement:n.placement||"bottom",strategy:n.strategy||"absolute",modifiers:n.modifiers||xe},s=o.useState({styles:{popper:{position:i.strategy,left:"0",top:"0"},arrow:{position:"absolute"}},attributes:{}}),a=s[0],l=s[1],u=o.useMemo((function(){return{name:"updateState",enabled:!0,phase:"write",fn:function(e){var t=e.state,n=Object.keys(t.elements);o.flushSync((function(){l({styles:c(n.map((function(e){return[e,t.styles[e]||{}]}))),attributes:c(n.map((function(e){return[e,t.attributes[e]]})))})}))},requires:["computeStyles"]}}),[]),h=o.useMemo((function(){var e={onFirstUpdate:i.onFirstUpdate,placement:i.placement,strategy:i.strategy,modifiers:[].concat(i.modifiers,[u,{name:"applyStyles",enabled:!1}])};return ye()(r.current,e)?r.current||e:(r.current=e,e)}),[i.onFirstUpdate,i.placement,i.strategy,i.modifiers,u]),f=o.useRef();return d((function(){f.current&&f.current.setOptions(h)}),[h]),d((function(){if(null!=e&&null!=t){var o=(n.createPopper||ve)(e,t,h);return f.current=o,function(){o.destroy(),f.current=null}}}),[e,t,n.createPopper]),{state:f.current?f.current.state:null,styles:a.styles,attributes:a.attributes,update:f.current?f.current.update:null,forceUpdate:f.current?f.current.forceUpdate:null}},we=function(){},je=function(){return Promise.resolve(null)},Ce=[];function Ee(e){var t=e.placement,n=void 0===t?"bottom":t,i=e.strategy,s=void 0===i?"absolute":i,l=e.modifiers,c=void 0===l?Ce:l,d=e.referenceElement,h=e.onFirstUpdate,f=e.innerRef,p=e.children,m=o.useContext(r),g=o.useState(null),v=g[0],b=g[1],y=o.useState(null),x=y[0],_=y[1];o.useEffect((function(){u(f,v)}),[f,v]);var w=o.useMemo((function(){return{placement:n,strategy:s,onFirstUpdate:h,modifiers:[].concat(c,[{name:"arrow",enabled:null!=x,options:{element:x}}])}}),[n,s,h,c,x]),j=_e(d||m,v,w),C=j.state,E=j.styles,S=j.forceUpdate,O=j.update,N=o.useMemo((function(){return{ref:b,style:E.popper,placement:C?C.placement:n,hasPopperEscaped:C&&C.modifiersData.hide?C.modifiersData.hide.hasPopperEscaped:null,isReferenceHidden:C&&C.modifiersData.hide?C.modifiersData.hide.isReferenceHidden:null,arrowProps:{style:E.arrow,ref:_},forceUpdate:S||we,update:O||je}}),[b,_,n,C,E,O,S]);return a(p)(N)}var Se=n(2473),Oe=n.n(Se);function Ne(e){var t=e.children,n=e.innerRef,r=o.useContext(i),s=o.useCallback((function(e){u(n,e),l(r,e)}),[n,r]);return o.useEffect((function(){return function(){return u(n,null)}}),[]),o.useEffect((function(){Oe()(Boolean(r),"`Reference` should not be used outside of a `Manager` component.")}),[r]),a(t)({ref:s})}},9711:(e,t,n)=>{"use strict";n.r(t),n.d(t,{BrowserRouter:()=>c,HashRouter:()=>d,Link:()=>f,MemoryRouter:()=>i.MemoryRouter,NavLink:()=>p,Navigate:()=>i.Navigate,NavigationType:()=>r.aU,Outlet:()=>i.Outlet,Route:()=>i.Route,Router:()=>i.Router,Routes:()=>i.Routes,UNSAFE_LocationContext:()=>i.UNSAFE_LocationContext,UNSAFE_NavigationContext:()=>i.UNSAFE_NavigationContext,UNSAFE_RouteContext:()=>i.UNSAFE_RouteContext,createPath:()=>r.Ep,createRoutesFromChildren:()=>i.createRoutesFromChildren,createSearchParams:()=>v,generatePath:()=>i.generatePath,matchPath:()=>i.matchPath,matchRoutes:()=>i.matchRoutes,parsePath:()=>r.cP,renderMatches:()=>i.renderMatches,resolvePath:()=>i.resolvePath,unstable_HistoryRouter:()=>h,useHref:()=>i.useHref,useInRouterContext:()=>i.useInRouterContext,useLinkClickHandler:()=>m,useLocation:()=>i.useLocation,useMatch:()=>i.useMatch,useNavigate:()=>i.useNavigate,useNavigationType:()=>i.useNavigationType,useOutlet:()=>i.useOutlet,useOutletContext:()=>i.useOutletContext,useParams:()=>i.useParams,useResolvedPath:()=>i.useResolvedPath,useRoutes:()=>i.useRoutes,useSearchParams:()=>g});var o=n(9748),r=n(5648),i=n(6974);function s(){return s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},s.apply(this,arguments)}function a(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}const l=["onClick","reloadDocument","replace","state","target","to"],u=["aria-current","caseSensitive","className","end","style","to","children"];function c(e){let{basename:t,children:n,window:s}=e,a=(0,o.useRef)();null==a.current&&(a.current=(0,r.lX)({window:s}));let l=a.current,[u,c]=(0,o.useState)({action:l.action,location:l.location});return(0,o.useLayoutEffect)((()=>l.listen(c)),[l]),(0,o.createElement)(i.Router,{basename:t,children:n,location:u.location,navigationType:u.action,navigator:l})}function d(e){let{basename:t,children:n,window:s}=e,a=(0,o.useRef)();null==a.current&&(a.current=(0,r.q_)({window:s}));let l=a.current,[u,c]=(0,o.useState)({action:l.action,location:l.location});return(0,o.useLayoutEffect)((()=>l.listen(c)),[l]),(0,o.createElement)(i.Router,{basename:t,children:n,location:u.location,navigationType:u.action,navigator:l})}function h(e){let{basename:t,children:n,history:r}=e;const[s,a]=(0,o.useState)({action:r.action,location:r.location});return(0,o.useLayoutEffect)((()=>r.listen(a)),[r]),(0,o.createElement)(i.Router,{basename:t,children:n,location:s.location,navigationType:s.action,navigator:r})}const f=(0,o.forwardRef)((function(e,t){let{onClick:n,reloadDocument:r,replace:u=!1,state:c,target:d,to:h}=e,f=a(e,l),p=(0,i.useHref)(h),g=m(h,{replace:u,state:c,target:d});return(0,o.createElement)("a",s({},f,{href:p,onClick:function(e){n&&n(e),e.defaultPrevented||r||g(e)},ref:t,target:d}))})),p=(0,o.forwardRef)((function(e,t){let{"aria-current":n="page",caseSensitive:r=!1,className:l="",end:c=!1,style:d,to:h,children:p}=e,m=a(e,u),g=(0,i.useLocation)(),v=(0,i.useResolvedPath)(h),b=g.pathname,y=v.pathname;r||(b=b.toLowerCase(),y=y.toLowerCase());let x,_=b===y||!c&&b.startsWith(y)&&"/"===b.charAt(y.length),w=_?n:void 0;x="function"==typeof l?l({isActive:_}):[l,_?"active":null].filter(Boolean).join(" ");let j="function"==typeof d?d({isActive:_}):d;return(0,o.createElement)(f,s({},m,{"aria-current":w,className:x,ref:t,style:j,to:h}),"function"==typeof p?p({isActive:_}):p)}));function m(e,t){let{target:n,replace:s,state:a}=void 0===t?{}:t,l=(0,i.useNavigate)(),u=(0,i.useLocation)(),c=(0,i.useResolvedPath)(e);return(0,o.useCallback)((t=>{if(!(0!==t.button||n&&"_self"!==n||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(t))){t.preventDefault();let n=!!s||(0,r.Ep)(u)===(0,r.Ep)(c);l(e,{replace:n,state:a})}}),[u,l,c,s,a,n,e])}function g(e){let t=(0,o.useRef)(v(e)),n=(0,i.useLocation)(),r=(0,o.useMemo)((()=>{let e=v(n.search);for(let n of t.current.keys())e.has(n)||t.current.getAll(n).forEach((t=>{e.append(n,t)}));return e}),[n.search]),s=(0,i.useNavigate)();return[r,(0,o.useCallback)(((e,t)=>{s("?"+v(e),t)}),[s])]}function v(e){return void 0===e&&(e=""),new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce(((t,n)=>{let o=e[n];return t.concat(Array.isArray(o)?o.map((e=>[n,e])):[[n,o]])}),[]))}},6974:(e,t,n)=>{"use strict";n.r(t),n.d(t,{MemoryRouter:()=>B,Navigate:()=>F,NavigationType:()=>o.aU,Outlet:()=>L,Route:()=>U,Router:()=>K,Routes:()=>W,UNSAFE_LocationContext:()=>s,UNSAFE_NavigationContext:()=>i,UNSAFE_RouteContext:()=>a,createPath:()=>o.Ep,createRoutesFromChildren:()=>H,generatePath:()=>u,matchPath:()=>g,matchRoutes:()=>c,parsePath:()=>o.cP,renderMatches:()=>z,resolvePath:()=>v,useHref:()=>C,useInRouterContext:()=>E,useLocation:()=>S,useMatch:()=>N,useNavigate:()=>T,useNavigationType:()=>O,useOutlet:()=>R,useOutletContext:()=>k,useParams:()=>P,useResolvedPath:()=>I,useRoutes:()=>A});var o=n(5648),r=n(9748);const i=(0,r.createContext)(null),s=(0,r.createContext)(null),a=(0,r.createContext)({outlet:null,matches:[]});function l(e,t){if(!e)throw new Error(t)}function u(e,t){return void 0===t&&(t={}),e.replace(/:(\w+)/g,((e,n)=>(null==t[n]&&l(!1),t[n]))).replace(/\/*\*$/,(e=>null==t["*"]?"":t["*"].replace(/^\/*/,"/")))}function c(e,t,n){void 0===n&&(n="/");let r=y(("string"==typeof t?(0,o.cP)(t):t).pathname||"/",n);if(null==r)return null;let i=d(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){return e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]))?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(i);let s=null;for(let e=0;null==s&&e<i.length;++e)s=m(i[e],r);return s}function d(e,t,n,o){return void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===o&&(o=""),e.forEach(((e,r)=>{let i={relativePath:e.path||"",caseSensitive:!0===e.caseSensitive,childrenIndex:r,route:e};i.relativePath.startsWith("/")&&(i.relativePath.startsWith(o)||l(!1),i.relativePath=i.relativePath.slice(o.length));let s=x([o,i.relativePath]),a=n.concat(i);e.children&&e.children.length>0&&(!0===e.index&&l(!1),d(e.children,t,a,s)),(null!=e.path||e.index)&&t.push({path:s,score:p(s,e.index),routesMeta:a})})),t}const h=/^:\w+$/,f=e=>"*"===e;function p(e,t){let n=e.split("/"),o=n.length;return n.some(f)&&(o+=-2),t&&(o+=2),n.filter((e=>!f(e))).reduce(((e,t)=>e+(h.test(t)?3:""===t?1:10)),o)}function m(e,t){let{routesMeta:n}=e,o={},r="/",i=[];for(let e=0;e<n.length;++e){let s=n[e],a=e===n.length-1,l="/"===r?t:t.slice(r.length)||"/",u=g({path:s.relativePath,caseSensitive:s.caseSensitive,end:a},l);if(!u)return null;Object.assign(o,u.params);let c=s.route;i.push({params:o,pathname:x([r,u.pathname]),pathnameBase:_(x([r,u.pathnameBase])),route:c}),"/"!==u.pathnameBase&&(r=x([r,u.pathnameBase]))}return i}function g(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,o]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0);let o=[],r="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/:(\w+)/g,((e,t)=>(o.push(t),"([^\\/]+)")));return e.endsWith("*")?(o.push("*"),r+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):r+=n?"\\/*$":"(?:(?=[.~-]|%[0-9A-F]{2})|\\b|\\/|$)",[new RegExp(r,t?void 0:"i"),o]}(e.path,e.caseSensitive,e.end),r=t.match(n);if(!r)return null;let i=r[0],s=i.replace(/(.)\/+$/,"$1"),a=r.slice(1);return{params:o.reduce(((e,t,n)=>{if("*"===t){let e=a[n]||"";s=i.slice(0,i.length-e.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(t){return e}}(a[n]||""),e}),{}),pathname:i,pathnameBase:s,pattern:e}}function v(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:i=""}="string"==typeof e?(0,o.cP)(e):e,s=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:s,search:w(r),hash:j(i)}}function b(e,t,n){let r,i="string"==typeof e?(0,o.cP)(e):e,s=""===e||""===i.pathname?"/":i.pathname;if(null==s)r=n;else{let e=t.length-1;if(s.startsWith("..")){let t=s.split("/");for(;".."===t[0];)t.shift(),e-=1;i.pathname=t.join("/")}r=e>=0?t[e]:"/"}let a=v(i,r);return s&&"/"!==s&&s.endsWith("/")&&!a.pathname.endsWith("/")&&(a.pathname+="/"),a}function y(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=e.charAt(t.length);return n&&"/"!==n?null:e.slice(t.length)||"/"}const x=e=>e.join("/").replace(/\/\/+/g,"/"),_=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),w=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",j=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";function C(e){E()||l(!1);let{basename:t,navigator:n}=(0,r.useContext)(i),{hash:s,pathname:a,search:u}=I(e),c=a;if("/"!==t){let n=function(e){return""===e||""===e.pathname?"/":"string"==typeof e?(0,o.cP)(e).pathname:e.pathname}(e),r=null!=n&&n.endsWith("/");c="/"===a?t+(r?"/":""):x([t,a])}return n.createHref({pathname:c,search:u,hash:s})}function E(){return null!=(0,r.useContext)(s)}function S(){return E()||l(!1),(0,r.useContext)(s).location}function O(){return(0,r.useContext)(s).navigationType}function N(e){E()||l(!1);let{pathname:t}=S();return(0,r.useMemo)((()=>g(e,t)),[t,e])}function T(){E()||l(!1);let{basename:e,navigator:t}=(0,r.useContext)(i),{matches:n}=(0,r.useContext)(a),{pathname:o}=S(),s=JSON.stringify(n.map((e=>e.pathnameBase))),u=(0,r.useRef)(!1);return(0,r.useEffect)((()=>{u.current=!0})),(0,r.useCallback)((function(n,r){if(void 0===r&&(r={}),!u.current)return;if("number"==typeof n)return void t.go(n);let i=b(n,JSON.parse(s),o);"/"!==e&&(i.pathname=x([e,i.pathname])),(r.replace?t.replace:t.push)(i,r.state)}),[e,t,s,o])}const M=(0,r.createContext)(null);function k(){return(0,r.useContext)(M)}function R(e){let t=(0,r.useContext)(a).outlet;return t?(0,r.createElement)(M.Provider,{value:e},t):t}function P(){let{matches:e}=(0,r.useContext)(a),t=e[e.length-1];return t?t.params:{}}function I(e){let{matches:t}=(0,r.useContext)(a),{pathname:n}=S(),o=JSON.stringify(t.map((e=>e.pathnameBase)));return(0,r.useMemo)((()=>b(e,JSON.parse(o),n)),[e,o,n])}function A(e,t){E()||l(!1);let{matches:n}=(0,r.useContext)(a),i=n[n.length-1],s=i?i.params:{},u=(i&&i.pathname,i?i.pathnameBase:"/");i&&i.route;let d,h=S();if(t){var f;let e="string"==typeof t?(0,o.cP)(t):t;"/"===u||(null==(f=e.pathname)?void 0:f.startsWith(u))||l(!1),d=e}else d=h;let p=d.pathname||"/",m=c(e,{pathname:"/"===u?p:p.slice(u.length)||"/"});return D(m&&m.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:x([u,e.pathname]),pathnameBase:"/"===e.pathnameBase?u:x([u,e.pathnameBase])}))),n)}function D(e,t){return void 0===t&&(t=[]),null==e?null:e.reduceRight(((n,o,i)=>(0,r.createElement)(a.Provider,{children:void 0!==o.route.element?o.route.element:n,value:{outlet:n,matches:t.concat(e.slice(0,i+1))}})),null)}function B(e){let{basename:t,children:n,initialEntries:i,initialIndex:s}=e,a=(0,r.useRef)();null==a.current&&(a.current=(0,o.PP)({initialEntries:i,initialIndex:s}));let l=a.current,[u,c]=(0,r.useState)({action:l.action,location:l.location});return(0,r.useLayoutEffect)((()=>l.listen(c)),[l]),(0,r.createElement)(K,{basename:t,children:n,location:u.location,navigationType:u.action,navigator:l})}function F(e){let{to:t,replace:n,state:o}=e;E()||l(!1);let i=T();return(0,r.useEffect)((()=>{i(t,{replace:n,state:o})})),null}function L(e){return R(e.context)}function U(e){l(!1)}function K(e){let{basename:t="/",children:n=null,location:a,navigationType:u=o.aU.Pop,navigator:c,static:d=!1}=e;E()&&l(!1);let h=_(t),f=(0,r.useMemo)((()=>({basename:h,navigator:c,static:d})),[h,c,d]);"string"==typeof a&&(a=(0,o.cP)(a));let{pathname:p="/",search:m="",hash:g="",state:v=null,key:b="default"}=a,x=(0,r.useMemo)((()=>{let e=y(p,h);return null==e?null:{pathname:e,search:m,hash:g,state:v,key:b}}),[h,p,m,g,v,b]);return null==x?null:(0,r.createElement)(i.Provider,{value:f},(0,r.createElement)(s.Provider,{children:n,value:{location:x,navigationType:u}}))}function W(e){let{children:t,location:n}=e;return A(H(t),n)}function H(e){let t=[];return r.Children.forEach(e,(e=>{if(!(0,r.isValidElement)(e))return;if(e.type===r.Fragment)return void t.push.apply(t,H(e.props.children));e.type!==U&&l(!1);let n={caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path};e.props.children&&(n.children=H(e.props.children)),t.push(n)})),t}function z(e){return D(e)}},7305:(e,t,n)=>{"use strict";n.r(t),n.d(t,{CSSTransition:()=>_,ReplaceTransition:()=>T,SwitchTransition:()=>F,Transition:()=>b,TransitionGroup:()=>O,config:()=>u});var o=n(7462);function r(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}function i(e,t){return i=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},i(e,t)}function s(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,i(e,t)}function a(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}var l=n(9748);const u={disabled:!1},c=l.default.createContext(null);var d="unmounted",h="exited",f="entering",p="entered",m="exiting",g=function(e){function t(t,n){var o;o=e.call(this,t,n)||this;var r,i=n&&!n.isMounting?t.enter:t.appear;return o.appearStatus=null,t.in?i?(r=h,o.appearStatus=f):r=p:r=t.unmountOnExit||t.mountOnEnter?d:h,o.state={status:r},o.nextCallback=null,o}s(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===d?{status:h}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==f&&n!==p&&(t=f):n!==f&&n!==p||(t=m)}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,o=this.props.timeout;return e=t=n=o,null!=o&&"number"!=typeof o&&(e=o.exit,t=o.enter,n=void 0!==o.appear?o.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),t===f?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&this.state.status===h&&this.setState({status:d})},n.performEnter=function(e){var t=this,n=this.props.enter,o=this.context?this.context.isMounting:e,r=this.props.nodeRef?[o]:[l.default.findDOMNode(this),o],i=r[0],s=r[1],a=this.getTimeouts(),c=o?a.appear:a.enter;!e&&!n||u.disabled?this.safeSetState({status:p},(function(){t.props.onEntered(i)})):(this.props.onEnter(i,s),this.safeSetState({status:f},(function(){t.props.onEntering(i,s),t.onTransitionEnd(c,(function(){t.safeSetState({status:p},(function(){t.props.onEntered(i,s)}))}))})))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),o=this.props.nodeRef?void 0:l.default.findDOMNode(this);t&&!u.disabled?(this.props.onExit(o),this.safeSetState({status:m},(function(){e.props.onExiting(o),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:h},(function(){e.props.onExited(o)}))}))}))):this.safeSetState({status:h},(function(){e.props.onExited(o)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(o){n&&(n=!1,t.nextCallback=null,e(o))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:l.default.findDOMNode(this),o=null==e&&!this.props.addEndListener;if(n&&!o){if(this.props.addEndListener){var r=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],i=r[0],s=r[1];this.props.addEndListener(i,s)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if(e===d)return null;var t=this.props,n=t.children,o=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,r(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return l.default.createElement(c.Provider,{value:null},"function"==typeof n?n(e,o):l.default.cloneElement(l.default.Children.only(n),o))},t}(l.default.Component);function v(){}g.contextType=c,g.propTypes={},g.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:v,onEntering:v,onEntered:v,onExit:v,onExiting:v,onExited:v},g.UNMOUNTED=d,g.EXITED=h,g.ENTERING=f,g.ENTERED=p,g.EXITING=m;const b=g;var y=function(e,t){return e&&t&&t.split(" ").forEach((function(t){return o=t,void((n=e).classList?n.classList.remove(o):"string"==typeof n.className?n.className=a(n.className,o):n.setAttribute("class",a(n.className&&n.className.baseVal||"",o)));var n,o}))},x=function(e){function t(){for(var t,n=arguments.length,o=new Array(n),r=0;r<n;r++)o[r]=arguments[r];return(t=e.call.apply(e,[this].concat(o))||this).appliedClasses={appear:{},enter:{},exit:{}},t.onEnter=function(e,n){var o=t.resolveArguments(e,n),r=o[0],i=o[1];t.removeClasses(r,"exit"),t.addClass(r,i?"appear":"enter","base"),t.props.onEnter&&t.props.onEnter(e,n)},t.onEntering=function(e,n){var o=t.resolveArguments(e,n),r=o[0],i=o[1]?"appear":"enter";t.addClass(r,i,"active"),t.props.onEntering&&t.props.onEntering(e,n)},t.onEntered=function(e,n){var o=t.resolveArguments(e,n),r=o[0],i=o[1]?"appear":"enter";t.removeClasses(r,i),t.addClass(r,i,"done"),t.props.onEntered&&t.props.onEntered(e,n)},t.onExit=function(e){var n=t.resolveArguments(e)[0];t.removeClasses(n,"appear"),t.removeClasses(n,"enter"),t.addClass(n,"exit","base"),t.props.onExit&&t.props.onExit(e)},t.onExiting=function(e){var n=t.resolveArguments(e)[0];t.addClass(n,"exit","active"),t.props.onExiting&&t.props.onExiting(e)},t.onExited=function(e){var n=t.resolveArguments(e)[0];t.removeClasses(n,"exit"),t.addClass(n,"exit","done"),t.props.onExited&&t.props.onExited(e)},t.resolveArguments=function(e,n){return t.props.nodeRef?[t.props.nodeRef.current,e]:[e,n]},t.getClassNames=function(e){var n=t.props.classNames,o="string"==typeof n,r=o?(o&&n?n+"-":"")+e:n[e];return{baseClassName:r,activeClassName:o?r+"-active":n[e+"Active"],doneClassName:o?r+"-done":n[e+"Done"]}},t}s(t,e);var n=t.prototype;return n.addClass=function(e,t,n){var o=this.getClassNames(t)[n+"ClassName"],r=this.getClassNames("enter").doneClassName;"appear"===t&&"done"===n&&r&&(o+=" "+r),"active"===n&&e&&e.scrollTop,o&&(this.appliedClasses[t][n]=o,function(e,t){e&&t&&t.split(" ").forEach((function(t){return o=t,void((n=e).classList?n.classList.add(o):function(e,t){return e.classList?!!t&&e.classList.contains(t):-1!==(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")}(n,o)||("string"==typeof n.className?n.className=n.className+" "+o:n.setAttribute("class",(n.className&&n.className.baseVal||"")+" "+o)));var n,o}))}(e,o))},n.removeClasses=function(e,t){var n=this.appliedClasses[t],o=n.base,r=n.active,i=n.done;this.appliedClasses[t]={},o&&y(e,o),r&&y(e,r),i&&y(e,i)},n.render=function(){var e=this.props,t=(e.classNames,r(e,["classNames"]));return l.default.createElement(b,(0,o.Z)({},t,{onEnter:this.onEnter,onEntered:this.onEntered,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}))},t}(l.default.Component);x.defaultProps={classNames:""},x.propTypes={};const _=x;function w(e,t){var n=Object.create(null);return e&&l.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&(0,l.isValidElement)(e)?t(e):e}(e)})),n}function j(e,t,n){return null!=n[t]?n[t]:e.props[t]}function C(e,t,n){var o=w(e.children),r=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var o,r=Object.create(null),i=[];for(var s in e)s in t?i.length&&(r[s]=i,i=[]):i.push(s);var a={};for(var l in t){if(r[l])for(o=0;o<r[l].length;o++){var u=r[l][o];a[r[l][o]]=n(u)}a[l]=n(l)}for(o=0;o<i.length;o++)a[i[o]]=n(i[o]);return a}(t,o);return Object.keys(r).forEach((function(i){var s=r[i];if((0,l.isValidElement)(s)){var a=i in t,u=i in o,c=t[i],d=(0,l.isValidElement)(c)&&!c.props.in;!u||a&&!d?u||!a||d?u&&a&&(0,l.isValidElement)(c)&&(r[i]=(0,l.cloneElement)(s,{onExited:n.bind(null,s),in:c.props.in,exit:j(s,"exit",e),enter:j(s,"enter",e)})):r[i]=(0,l.cloneElement)(s,{in:!1}):r[i]=(0,l.cloneElement)(s,{onExited:n.bind(null,s),in:!0,exit:j(s,"exit",e),enter:j(s,"enter",e)})}})),r}var E=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},S=function(e){function t(t,n){var o,r=(o=e.call(this,t,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(o));return o.state={contextValue:{isMounting:!0},handleExited:r,firstRender:!0},o}s(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,o,r=t.children,i=t.handleExited;return{children:t.firstRender?(n=e,o=i,w(n.children,(function(e){return(0,l.cloneElement)(e,{onExited:o.bind(null,e),in:!0,appear:j(e,"appear",n),enter:j(e,"enter",n),exit:j(e,"exit",n)})}))):C(e,r,i),firstRender:!1}},n.handleExited=function(e,t){var n=w(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=(0,o.Z)({},t.children);return delete n[e.key],{children:n}})))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,o=r(e,["component","childFactory"]),i=this.state.contextValue,s=E(this.state.children).map(n);return delete o.appear,delete o.enter,delete o.exit,null===t?l.default.createElement(c.Provider,{value:i},s):l.default.createElement(c.Provider,{value:i},l.default.createElement(t,o,s))},t}(l.default.Component);S.propTypes={},S.defaultProps={component:"div",childFactory:function(e){return e}};const O=S;var N=function(e){function t(){for(var t,n=arguments.length,o=new Array(n),r=0;r<n;r++)o[r]=arguments[r];return(t=e.call.apply(e,[this].concat(o))||this).handleEnter=function(){for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];return t.handleLifecycle("onEnter",0,n)},t.handleEntering=function(){for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];return t.handleLifecycle("onEntering",0,n)},t.handleEntered=function(){for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];return t.handleLifecycle("onEntered",0,n)},t.handleExit=function(){for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];return t.handleLifecycle("onExit",1,n)},t.handleExiting=function(){for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];return t.handleLifecycle("onExiting",1,n)},t.handleExited=function(){for(var e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];return t.handleLifecycle("onExited",1,n)},t}s(t,e);var n=t.prototype;return n.handleLifecycle=function(e,t,n){var o,r=this.props.children,i=l.default.Children.toArray(r)[t];if(i.props[e]&&(o=i.props)[e].apply(o,n),this.props[e]){var s=i.props.nodeRef?void 0:l.default.findDOMNode(this);this.props[e](s)}},n.render=function(){var e=this.props,t=e.children,n=e.in,o=r(e,["children","in"]),i=l.default.Children.toArray(t),s=i[0],a=i[1];return delete o.onEnter,delete o.onEntering,delete o.onEntered,delete o.onExit,delete o.onExiting,delete o.onExited,l.default.createElement(O,o,n?l.default.cloneElement(s,{key:"first",onEnter:this.handleEnter,onEntering:this.handleEntering,onEntered:this.handleEntered}):l.default.cloneElement(a,{key:"second",onEnter:this.handleExit,onEntering:this.handleExiting,onEntered:this.handleExited}))},t}(l.default.Component);N.propTypes={};const T=N;var M,k,R="out-in",P="in-out",I=function(e,t,n){return function(){var o;e.props[t]&&(o=e.props)[t].apply(o,arguments),n()}},A=((M={})["out-in"]=function(e){var t=e.current,n=e.changeState;return l.default.cloneElement(t,{in:!1,onExited:I(t,"onExited",(function(){n(f,null)}))})},M[P]=function(e){var t=e.current,n=e.changeState,o=e.children;return[t,l.default.cloneElement(o,{in:!0,onEntered:I(o,"onEntered",(function(){n(f)}))})]},M),D=((k={})["out-in"]=function(e){var t=e.children,n=e.changeState;return l.default.cloneElement(t,{in:!0,onEntered:I(t,"onEntered",(function(){n(p,l.default.cloneElement(t,{in:!0}))}))})},k[P]=function(e){var t=e.current,n=e.children,o=e.changeState;return[l.default.cloneElement(t,{in:!1,onExited:I(t,"onExited",(function(){o(p,l.default.cloneElement(n,{in:!0}))}))}),l.default.cloneElement(n,{in:!0})]},k),B=function(e){function t(){for(var t,n=arguments.length,o=new Array(n),r=0;r<n;r++)o[r]=arguments[r];return(t=e.call.apply(e,[this].concat(o))||this).state={status:p,current:null},t.appeared=!1,t.changeState=function(e,n){void 0===n&&(n=t.state.current),t.setState({status:e,current:n})},t}s(t,e);var n=t.prototype;return n.componentDidMount=function(){this.appeared=!0},t.getDerivedStateFromProps=function(e,t){return null==e.children?{current:null}:t.status===f&&e.mode===P?{status:f}:!t.current||((n=t.current)===(o=e.children)||l.default.isValidElement(n)&&l.default.isValidElement(o)&&null!=n.key&&n.key===o.key)?{current:l.default.cloneElement(e.children,{in:!0})}:{status:m};var n,o},n.render=function(){var e,t=this.props,n=t.children,o=t.mode,r=this.state,i=r.status,s=r.current,a={children:n,current:s,changeState:this.changeState,status:i};switch(i){case f:e=D[o](a);break;case m:e=A[o](a);break;case p:e=s}return l.default.createElement(c.Provider,{value:{isMounting:!this.appeared}},e)},t}(l.default.Component);B.propTypes={},B.defaultProps={mode:R};const F=B},8197:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.AlertController=void 0;const r=n(4611);class i{constructor(e){this.model=e,this.updateToastsHandle=window.setInterval((()=>this.updateToasts()),2e3)}updateToasts(){return o(this,void 0,void 0,(function*(){let e=!1;for(const t of this.model.view.alerts.toasts){const n=(Date.now()-t.time)/1e3,o=i.secsAgoToStr(n)+"...";t.timeStr!==o&&(t.timeStr=o,e=!0)}e&&this.model.update()}))}static secsAgoToStr(e){if(e<5)return"Just now";if(e<10)return"5 seconds ago";if(e<30)return"10 seconds ago";if(e<60)return"30 seconds ago";const t=Math.floor(e/60);if(1==t)return"1 minute ago";if(t<60)return`${t} minutes ago`;const n=Math.floor(t/60);if(1==n)return"1 hour ago";if(n<24)return`${n} hours ago`;const o=Math.floor(n/24);if(1==o)return"Yesterday";if(o<31)return`${o} days ago`;const r=Math.floor(o/31);if(1==r)return"Last month";if(o<365)return`${r} months ago`;const i=Math.floor(o/365);return 1==i?"Last year":`${i} years ago`}static timeToAgoStr(e,t){const n=(Date.now()-e)/1e3;return n>t?new Date(e).toLocaleDateString():this.secsAgoToStr(n)}handleAlert(e){return o(this,void 0,void 0,(function*(){if("Syncing"===e.title&&this.model.jormun.getStatus().syncing)for(let t=0;t<e.options.length;t++)if(e.options[t].startsWith("Remote"))return console.log("Forcing a remote sync!"),this.model.jormun.sync(),t;return yield new Promise((t=>{if(e.options.length>0)this.model.view.alerts.questions.push({content:e,resolve:t});else{const n=()=>t(e.options.length>0?0:-1);this.model.view.alerts.toasts.unshift({content:e,resolve:()=>{},time:Date.now(),timeStr:i.secsAgoToStr(0)}),r.Wait.secs(.1).then((()=>n()))}this.model.update()}))}))}resolveToast(e){return o(this,void 0,void 0,(function*(){const t=this.model.view.alerts.toasts.find((t=>t.content===e));this.model.view.alerts.toasts=this.model.view.alerts.toasts.filter((t=>t.content!==e)),null==t||t.resolve(),this.model.update()}))}resolveQuestion(e,t){return o(this,void 0,void 0,(function*(){const n=this.model.view.alerts.questions.find((t=>t.content===e));this.model.view.alerts.questions=this.model.view.alerts.questions.filter((t=>t.content!==e)),null==n||n.resolve(t),this.model.update()}))}}t.AlertController=i},1578:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.DataController=void 0;const r=n(6703),i=n(5263),s=n(4373),a=n(2349),l=n(4611),u=n(477);t.DataController=class{constructor(e){this.rooms=[],this.fetching=!1,this.imageCache=[],this.lastCurrency="USD",this.hub=e,this.fetchDirectory((()=>{})),this.fetchLastCurrency()}getRooms(){return this.rooms}fetchDirectory(e){return o(this,void 0,void 0,(function*(){if(this.fetching)return;this.fetching=!0,yield e("Waiting for jormun to initialize..."),yield l.Wait.until((()=>this.hub.jormun.getStatus().initialized)),yield e("Fetching directory...");const t=yield this.hub.localRoomController.getDirectory();if(!t)return;let n=!1;for(const e of t.rooms){const t=this.rooms.find((t=>t.info.host===e.host&&t.info.roomRootKey===e.roomRootKey));if(t){JSON.stringify(t.info)!==JSON.stringify(e)&&(t.info=e,n=!0);continue}const o={info:e,fetching:!1,fullTransactionList:[],balances:[]};this.rooms.push(o),this.fetchRoomInternal(o,!1,!1,(()=>{}))}for(const e of[...this.rooms])t.rooms.some((t=>t.host===e.info.host&&t.roomRootKey===e.info.roomRootKey))||(this.rooms=this.rooms.filter((t=>t!==e)));n&&this.hub.update(),this.fetching=!1}))}fetchRoom(e,t,n,r,i){return o(this,void 0,void 0,(function*(){let o=this.rooms.find((n=>n.info.host===e&&n.info.roomRootKey===t));o||(yield i("Fetching directory..."),yield this.fetchDirectory((e=>i(e))),o=this.rooms.find((n=>n.info.host===e&&n.info.roomRootKey===t))),o&&(yield this.fetchRoomInternal(o,n,r,i))}))}fetchRoomInternal(e,t,n,r){return o(this,void 0,void 0,(function*(){if(yield r("Waiting for ongonig fetch to finish..."),yield l.Wait.until((()=>!e.fetching)),e.fetching=!0,n||!e.root){yield r("Fetching room root...");const t=yield this.hub.remoteRoomController.getRoomRoot(e.info,(e=>{}));if(!t)return yield r("Setting room as dead..."),yield this.hub.localRoomController.setRoomDead(e.info.host,e.info.roomRootKey,!0),void this.hub.update();e.info.dead&&(yield r("Setting room as active..."),yield this.hub.localRoomController.setRoomDead(e.info.host,e.info.roomRootKey,!1)),e.root=t}if(("boolean"!=typeof e.isMine||n)&&(yield r("Determining ownership of room..."),e.isMine=yield this.hub.localRoomController.isMine(e.info)),t&&(!e.users||n)){const t=yield this.hub.remoteRoomController.getRoomUserData(e.info,e.root,(e=>r(e)));t&&(e.users=t,yield this.hub.localRoomController.createRoomCache(e.info.host,e.info.roomRootKey,e.root,e.users,(e=>r(e))),yield r("Recalculating balances..."),this.recalculateBalances(e))}e.fetching=!1,this.hub.update()}))}recalculateBalances(e){if(e.users){e.users.forEach((e=>e.transactions.forEach((t=>t.creatorId=e.userId)))),e.fullTransactionList=e.users.reduce(((e,t)=>e.concat(t.transactions)),[]),e.fullTransactionList.sort(((e,t)=>e.time-t.time)),e.balances=[];for(const t of e.fullTransactionList){const n=this.getUserBalanceObject(e,t.creditor,t.currency);for(const o of t.debtors)this.getUserBalanceObject(e,o.user,t.currency).balance-=o.amount,n.balance+=o.amount}for(const t of e.balances)for(const e of t.balances)e.balance=s.Currencies.parse(e.balance,e.currency)}}getUserBalanceObject(e,t,n){let o=e.balances.find((e=>e.userId===t));o||(o={userId:t,balances:[]},e.balances.push(o));let r=o.balances.find((e=>e.currency===n));return r||(r={currency:n,balance:0},o.balances.push(r)),r}getRoomAndUser(e,t){var n,o,r;const i=this.rooms.find((n=>n.info.host===e&&n.info.roomRootKey===t));if(!i)return null;if(!i.info.selectedUserId)return{room:i};if(!i.users)return{room:i};const s=null!==(n=i.users.find((e=>e.userId===i.info.selectedUserId)))&&void 0!==n?n:null,a=null!==(r=null===(o=i.root)||void 0===o?void 0:o.users[i.info.selectedUserId])&&void 0!==r?r:null;return{room:i,userData:s,userInfo:a}}isTransactionValid(e){return!!s.Currencies.appromixatelySame(a.Numbers.sum(e.debtors.map((e=>e.amount))),e.amount,e.currency)}getNewTransactionId(e){let t="";for(;!t||e.fullTransactionList.some((e=>e.transactionId===t));)t=Math.random().toString().substring(2);return t}addTransction(e,t,n,r){return o(this,void 0,void 0,(function*(){const o=this.getRoomAndUser(e,t);if(!((null==o?void 0:o.room)&&(null==o?void 0:o.userData)&&(null==o?void 0:o.userInfo)&&o.room.root&&o.room.users))return;if(!this.isTransactionValid(n))return;let i=this.getNewTransactionId(o.room);const s=Object.assign(Object.assign({},n),{transactionId:i,time:Date.now(),creatorId:o.userData.userId});o.userData.transactions.push(s),yield this.saveUser(e,t,o,(e=>r(e)))}))}editTransaction(e,t,n,r,i){var s;return o(this,void 0,void 0,(function*(){const o=this.getRoomAndUser(e,t);if(!((null==o?void 0:o.room)&&(null==o?void 0:o.userData)&&(null==o?void 0:o.userInfo)&&o.room.root&&o.room.users))return;if(!this.isTransactionValid(r))return;const a=o.userData.transactions.find((e=>e.transactionId===n));if(!a)return;for(const e in r)a[e]=r[e];yield this.saveUser(e,t,o,(e=>i(e)));const l={amount:0,debtors:[],creditor:o.userInfo.userId,message:`${o.userData.name} edited an entry from ${new Date(null!==(s=null==a?void 0:a.time)&&void 0!==s?s:0).toLocaleString()}.`,currency:""};yield this.addTransction(e,t,l,(e=>i(e)))}))}removeTransaction(e,t,n,r){return o(this,void 0,void 0,(function*(){const o=this.getRoomAndUser(e,t);if(!((null==o?void 0:o.room)&&(null==o?void 0:o.userData)&&(null==o?void 0:o.userInfo)&&o.room.root&&o.room.users))return;const i=o.userData.transactions.length;o.userData.transactions=o.userData.transactions.filter((e=>e.transactionId!==n)),i!==o.userData.transactions.length&&(yield this.saveUser(e,t,o,(e=>r(e))))}))}changeUserInfo(e,t,n,r,i){return o(this,void 0,void 0,(function*(){const o=this.getRoomAndUser(e,t);(null==o?void 0:o.room)&&(null==o?void 0:o.userData)&&(null==o?void 0:o.userInfo)&&o.room.root&&o.room.users&&(!n||n.length>25||(o.userData.name=n,o.userData.phoneNumber=r,yield this.saveUser(e,t,o,(e=>i(e)))))}))}updateCoverImage(e,t,n,r){return o(this,void 0,void 0,(function*(){const o=this.getRoomAndUser(e,t);(null==o?void 0:o.room)&&(null==o?void 0:o.userData)&&(null==o?void 0:o.userInfo)&&o.room.root&&o.room.users&&(o.userData.coverImage={host:n.host,key:n.key,time:Date.now()},yield this.saveUser(e,t,o,(e=>r(e))),this.hub.localRoomController.createRoomCache(e,t,o.room.root,o.room.users,(()=>{})))}))}saveUser(e,t,n,i){return o(this,void 0,void 0,(function*(){if(!((null==n?void 0:n.room)&&(null==n?void 0:n.userData)&&(null==n?void 0:n.userInfo)&&n.room.root&&n.room.users))return;yield i("Creating anonymous remote...");const o=yield r.Jormun.getAnonymousRemote(u.Hub.app,n.room.info.host,(e=>this.hub.alert.handleAlert(e))),s={};s[n.userInfo.userDataKey]=n.userData,yield i("Saving..."),yield o.setAsGuest(s,n.room.root.guestToken),yield i("Recalculating balances..."),this.recalculateBalances(n.room),this.hub.localRoomController.createRoomCache(e,t,n.room.root,n.room.users,(()=>{})).then((()=>this.hub.update())),this.hub.update()}))}fetchLastCurrency(){var e,t;return o(this,void 0,void 0,(function*(){yield l.Wait.until((()=>this.hub.jormun.getStatus().initialized)),this.lastCurrency=null!==(t=yield null===(e=this.hub.jormun.me("last_currency"))||void 0===e?void 0:e.get())&&void 0!==t?t:this.lastCurrency}))}getLastCurrency(){return this.lastCurrency}setLastCurrency(e){this.lastCurrency=e,(()=>{o(this,void 0,void 0,(function*(){var t;yield l.Wait.until((()=>this.hub.jormun.getStatus().initialized)),yield this.hub.jormun.add("last_currency",e),yield null===(t=this.hub.jormun.me("last_currency"))||void 0===t?void 0:t.set(e)}))})()}fetchImage(e,t){const n=i.Key.parse(t,-1);if(!n)return"";const s=this.imageCache.find((n=>n.host===e&&n.key===t));return s?s.data:((()=>{o(this,void 0,void 0,(function*(){const o={host:e,key:t,data:""};this.imageCache.push(o);const i=yield r.Jormun.getAnonymousRemote(u.Hub.app,e,(e=>this.hub.alert.handleAlert(e))),s=yield i.peek([n]);if(!s||!s.hasOwnProperty(t))return"";const a=s[t];o.data=a,this.hub.update()}))})(),"")}}},477:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.Hub=void 0;const r=n(6703),i=n(4611),s=n(7640),a=n(8197),l=n(1578),u=n(9183),c=n(2753),d=n(802),h=n(6052);class f{constructor(e){this.onUpdate=[],this.view=new s.View,window.hub=this,e.forEach((e=>this.onUpdate.push(e))),this.jormun=new r.Jormun,this.server=new h.ServerController(this),this.alert=new a.AlertController(this),this.localRoomController=new u.LocalRoomController(this),this.remoteRoomController=new d.RemoteRoomController(this),this.dataController=new l.DataController(this),this.navigation=new c.NavigationController(this),this.initialize(),this.loadAnimation()}initialize(){return o(this,void 0,void 0,(function*(){this.jormun.onSetup.on(this.update,this),this.jormun.onSync.on(this.setLeaveConfirmation,this),this.jormun.onAnyDataChange.on(this.update,this),yield this.jormun.initialize(f.app,(e=>this.alert.handleAlert(e)))}))}loadAnimation(){return o(this,void 0,void 0,(function*(){for(;!this.jormun.getStatus().initialized;)yield i.Wait.secs(.05),this.view.root.loadAnimation++,this.update()}))}setLeaveConfirmation(e){window.onbeforeunload=e?()=>"Sync is in progress.":null}update(){return o(this,void 0,void 0,(function*(){yield Promise.all(this.onUpdate.map((e=>e(this.view))))}))}}t.Hub=f,f.app="share",f.appTitle="Billshare"},9183:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.LocalRoomController=void 0;const r=n(5263),i=n(7363);t.LocalRoomController=class{constructor(e){this.hub=e}canCreateRoom(){return this.hub.jormun.getStatus().loggedIn}getDirectory(){return o(this,void 0,void 0,(function*(){const e=yield this.hub.jormun.add("room_directory",{rooms:[]});return yield e.get()}))}setDirectory(e,t){return o(this,void 0,void 0,(function*(){yield(yield this.hub.jormun.add("room_directory",e)).set(e),t&&this.hub.jormun.sync()}))}createRoomCache(e,t,n,r,i){return o(this,void 0,void 0,(function*(){yield i("Fetching directory...");const o=yield this.getDirectory();yield i("Creating room cache...");const s=o.rooms.find((n=>n.host===e&&n.roomRootKey===t));if(!s)return;const a=JSON.stringify(s);s.cache||(s.cache={name:"",users:[],timestamp:Date.now(),lastActivity:Date.now()}),s.cache.name=n.name;const l={info:s,fetching:!1,balances:[],fullTransactionList:[],users:null!=r?r:void 0,root:n};if(this.hub.dataController.recalculateBalances(l),r){s.cache.users=r.map((e=>{var t,n;return{userId:e.userId,name:e.name,balances:null!==(n=null===(t=l.balances.find((t=>t.userId===e.userId)))||void 0===t?void 0:t.balances)&&void 0!==n?n:[]}}));for(const e of r){for(const t of e.transactions)t.time>s.cache.lastActivity&&(s.cache.lastActivity=t.time);e.coverImage&&(!s.cache.coverImage||e.coverImage.time>s.cache.coverImage.time)&&(s.cache.coverImage=e.coverImage)}}JSON.stringify(s)!==a&&(yield i("Saving directory..."),yield this.setDirectory(o,!0))}))}askLeaveRoom(e,t,n){var r,i;return o(this,void 0,void 0,(function*(){yield n("Fetching directory...");const o=yield this.getDirectory(),s=o.rooms.find((n=>n.host===e&&n.roomRootKey===t));return!!s&&0===(yield this.hub.jormun.ask(`Leave ${null===(r=s.cache)||void 0===r?void 0:r.name}?`,`Are you sure you want to leave ${null===(i=s.cache)||void 0===i?void 0:i.name}? You can rejoin it later.`,["Yes","No"]))&&(o.rooms=o.rooms.filter((e=>e!==s)),yield n("Setting directory..."),yield this.setDirectory(o,!0),yield this.hub.dataController.fetchDirectory((e=>n(e))),!0)}))}askDestroyRoom(e,t,n){return o(this,void 0,void 0,(function*(){if(!this.hub.jormun.getStatus().connected)return!1;const o=this.hub.jormun.getRemote().cachedStatus();if(!o)return!1;const i=r.Key.parse(t,o.userId);if(!i)return!1;const s=this.hub.jormun.me(i.fragment);if(!s)return!1;yield n("Fetching room root...");const a=yield s.get();if(a){if(0!==(yield this.hub.jormun.ask(`Delete ${a.name}?`,`Are you sure you want to delete ${a.name}? It cannot be recovered!`,["Yes","No"])))return!1;yield n("Synchronizing..."),yield this.hub.jormun.sync();for(const e of Object.values(a.users)){const t=r.Key.parse(e.userDataKey,o.userId);if(!t)continue;const i=this.hub.jormun.me(t.fragment);i&&(yield n(`Removing user ${e.userId}`),yield i.remove())}}yield n("Removing room root..."),yield s.remove(),yield n("Getting directory...");const l=yield this.getDirectory(),u=l.rooms.find((n=>n.host===e&&n.roomRootKey===t));return u&&(l.rooms=l.rooms.filter((e=>e!==u)),yield n("Setting directory..."),yield this.setDirectory(l,!1)),yield this.hub.jormun.sync(),yield this.hub.dataController.fetchDirectory((e=>n(e))),!0}))}getJoinURL(e,t){return`${location.protocol}//${location.host}${location.pathname}#${this.getJoinHash(e,t)}`}getJoinHash(e,t){e.startsWith("https://")&&(e=e.substring("https://".length)),e=i.B64URL.ToBase64(e);const n=r.Key.parse(t,-1);if(!n)return"";if(!n.fragment.startsWith("room_"))return"";const o=n.fragment.substring("room_".length);return`/join/${e}/${n.userId}/${o}`}getJoinQRCode(e){return o(this,void 0,void 0,(function*(){const t=document.createElement("div");return new QRCode(t,{text:e,width:180,height:180,colorDark:"#000000",colorLight:"#ffffff"}),t.querySelector("canvas").toDataURL()}))}setRoomDead(e,t,n){return o(this,void 0,void 0,(function*(){const o=yield this.getDirectory(),r=o.rooms.find((n=>n.host===e&&n.roomRootKey===t));r&&r.dead!==n&&(r.dead=n,yield this.setDirectory(o,!0))}))}isMine(e){return o(this,void 0,void 0,(function*(){if(!this.hub.jormun.getStatus().connected)return!1;const t=yield this.hub.jormun.hashedRemote(),n=this.hub.jormun.getRemote().cachedStatus();if(!t||!t.host||!n)return!1;const o=r.Key.parse(e.roomRootKey,-1);return!!o&&e.host===t.host&&o.userId===n.userId}))}createRoom(e,t,n){var r;return o(this,void 0,void 0,(function*(){const o=this.hub.jormun.getRemote(),i=o.cachedStatus();if(!i)return;yield this.hub.jormun.sync(),yield n("Generating room id...");let s="";for(;!s||(yield null===(r=this.hub.jormun.me(`room_${s}`))||void 0===r?void 0:r.get());)s=Math.random().toString().substring(2);const a={name:e,roomId:s,users:{},guestToken:"",guestTokenId:""};yield n("Creating room root...");const l=yield this.hub.jormun.add(`room_${s}`,a);yield l.set(a),yield n("Synchronizing..."),yield this.hub.jormun.sync(),yield n("Making room root unlisted..."),yield o.publish([{key:l.getKey(),publicity:"unlisted"}]),yield this.createUsers(s,t,!1,(e=>n(e))),yield n("Fetchin host...");const u=(yield this.hub.jormun.hashedRemote()).host,c=l.getKey().stringifyRemote(i.userId);yield this.hub.remoteRoomController.joinRoom(u,c,(e=>n(e))),yield this.hub.dataController.fetchDirectory((e=>n(e)))}))}createUsers(e,t,n,i){return o(this,void 0,void 0,(function*(){n&&(yield i("Synchronizing..."),yield this.hub.jormun.sync());const o=this.hub.jormun.getRemote(),s=this.hub.jormun.me(`room_${e}`);if(!s)return;yield i("Fetching room root...");const a=yield s.get();if(!a)return;const l=o.cachedStatus();if(!l)return;for(const n of t){let t="";for(yield i(`Creating user id for ${n}...`);!t||a.users.hasOwnProperty(t);)t=Math.random().toString().substring(2);const o={name:n,userId:t,transactions:[]};yield i(`Creating data entry for ${n}...`);const r=yield this.hub.jormun.add(`room_${e}_user_${t}`,o);yield r.set(o),a.users[t]={userId:t,userDataKey:r.getKey().stringifyRemote(l.userId)}}yield i("Synchronizing..."),yield this.hub.jormun.sync(),a.guestTokenId&&(yield i("Clearing old invitation token..."),yield o.uninvite([a.guestTokenId]));const u=Object.values(a.users).map((e=>r.Key.parse(e.userDataKey,-1))).filter((e=>!!e));yield i("Creating new invitation token...");const c=yield o.invite(u);c&&(a.guestToken=c.guestToken,a.guestTokenId=c.guestTokenId),yield i("Updating room root..."),yield s.set(a),yield i("Synchronizing..."),yield this.hub.jormun.sync()}))}changeRoomName(e,t,n){return o(this,void 0,void 0,(function*(){yield n("Synchronizing..."),yield this.hub.jormun.sync(),this.hub.jormun.getRemote();const o=this.hub.jormun.me(`room_${e}`);if(!o)return;yield n("Fetching room root...");const r=yield o.get();r&&(r.name=t,yield n("Updating room root..."),yield o.set(r),yield n("Synchronizing..."),yield this.hub.jormun.sync())}))}selectUserId(e,t,n,r){return o(this,void 0,void 0,(function*(){yield r("Fetching directory...");const o=yield this.getDirectory(),i=o.rooms.find((n=>n.host===e&&n.roomRootKey===t));i&&i.selectedUserId!==n&&(i.selectedUserId=n,yield r("Setting directory..."),yield this.setDirectory(o,!0),yield this.hub.dataController.fetchDirectory((e=>r(e))),this.hub.update())}))}saveImage(e,t){return o(this,void 0,void 0,(function*(){let n="";for(;!n||this.hub.jormun.me(`image_${n}`);)n=Math.random().toString().substring(2);const o=this.hub.jormun.getRemote(),r=o.cachedStatus();if(!r)return null;yield t("Saving image locally...");const i=yield this.hub.jormun.add(`image_${n}`,e);yield i.set(e),yield t("Synchronizing..."),yield this.hub.jormun.sync(),yield t("Making unlisted..."),yield o.publish([{key:i.getKey(),publicity:"unlisted"}]),yield t("Getting local room directory...");const s=yield this.getDirectory();return s.submittedImageFragments||(s.submittedImageFragments=[]),s.submittedImageFragments.push(`image_${n}`),yield t("Setting local room directory..."),yield this.setDirectory(s,!0),yield t("Fetching host..."),{host:(yield this.hub.jormun.hashedRemote()).host,key:i.getKey().stringifyRemote(r.userId)}}))}}},2753:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.NavigationController=void 0;const o=n(4611);t.NavigationController=class{constructor(e){this.target="",this.hub=e}setTarget(e){this.target=e,this.hub.update()}popTarget(){const e=this.target;return this.target="",e!==this.target&&o.Wait.secs(.01).then((()=>this.hub.update())),e}}},802:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.RemoteRoomController=void 0;const r=n(6703),i=n(5263),s=n(477);t.RemoteRoomController=class{constructor(e){this.hub=e}joinRoom(e,t,n){return o(this,void 0,void 0,(function*(){yield n("Fetching local room directory...");const o=yield this.hub.localRoomController.getDirectory();if(o.rooms.some((n=>n.host===e&&n.roomRootKey===t)))return;if(!i.Key.parse(t,-1))return;const r={host:e,roomRootKey:t,dead:!1,cache:{name:"",users:[],timestamp:Date.now(),lastActivity:Date.now()}},s=yield this.getRoomFull(r,(e=>n(e)));s&&(o.rooms.push(r),yield n("Saving local room directory..."),yield this.hub.localRoomController.setDirectory(o,!1),yield this.hub.localRoomController.createRoomCache(e,t,s.room,s.users,(e=>n(e))),yield this.hub.dataController.fetchDirectory((e=>n(e))))}))}getRoomFull(e,t){return o(this,void 0,void 0,(function*(){const n=yield this.getRoomRoot(e,(e=>t(e)));if(!n)return null;const o=yield this.getRoomUserData(e,n,(e=>t(e)));return o?{room:n,users:o}:null}))}getRoomUserData(e,t,n){var a;return o(this,void 0,void 0,(function*(){yield n("Creating anonymous remote...");const o=yield r.Jormun.getAnonymousRemote(s.Hub.app,e.host,(e=>this.hub.alert.handleAlert(e)));if(yield n("Checking connection..."),!(yield o.connected()))return null;const l=Object.values(t.users).map((e=>i.Key.parse(e.userDataKey,-1))).filter((e=>!!e));return yield n("Fetching user data..."),Object.values(null!==(a=yield o.getAsGuest(l,t.guestToken))&&void 0!==a?a:{})}))}getRoomRoot(e,t){return o(this,void 0,void 0,(function*(){const n=i.Key.parse(e.roomRootKey,-1);if(!n)return null;yield t("Creating anonymous remote...");const o=yield r.Jormun.getAnonymousRemote(s.Hub.app,e.host,(e=>this.hub.alert.handleAlert(e)));if(yield t("Checking connection..."),!(yield o.connected()))return null;yield t("Fetching room data...");const a=yield o.peek([n]);return a&&a.hasOwnProperty(e.roomRootKey)?a[e.roomRootKey]:null}))}}},6052:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ServerController=void 0;const r=n(22);t.ServerController=class{constructor(e){this.model=e,this.localInterval=window.setInterval((()=>this.checkLocal()),5e3),this.remoteInterval=window.setInterval((()=>this.checkRemote()),3e4),this.model.jormun.onSync.on((()=>this.checkBoth(!0)),this)}checkBoth(e=!1){return o(this,void 0,void 0,(function*(){yield this.checkLocal(),yield this.checkRemote(),e&&this.model.update()}))}checkLocal(e=!1){return o(this,void 0,void 0,(function*(){const t=yield this.model.jormun.isLocalDirty(),n=this.model.view.sync,o=n.localDirty!==t.isDirty||n.localVersion!==t.localVersion;n.localDirty=t.isDirty,n.localVersion=t.localVersion,o&&!e&&this.model.update()}))}checkRemote(e=!1){return o(this,void 0,void 0,(function*(){const t=yield this.model.jormun.different(),n=this.model.view.sync.remoteNewer;this.model.view.sync.remoteNewer=!!t.comparison&&t.comparison.download&&!this.model.jormun.getStatus().syncing,n===this.model.view.sync.remoteNewer||e||this.model.update()}))}login(e){return o(this,void 0,void 0,(function*(){const t={username:e.username,password:e.password,host:e.host,token:"",downloadSharedData:!1};yield this.model.jormun.login(t)}))}export(){return o(this,void 0,void 0,(function*(){r.Downloader.download(yield this.model.jormun.export(),"data.jormun-share")}))}import(){return o(this,void 0,void 0,(function*(){yield this.model.jormun.import(yield r.Downloader.import(".jormun-share"))}))}}},4373:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Currencies=void 0;const o=n(2349);class r{static getCurrencies(){return r.currencies}static getCurrency(e){return r.currencies.find((t=>t.iso===e))}static formatAmount(e,t){var n;const o=r.currencies.find((e=>e.iso===t)),i=(null==o?void 0:o.format)&&o.format.includes("*")?o.format:`* ${t}`,s=null!==(n=null==o?void 0:o.locale)&&void 0!==n?n:"en-US";return i.split("*").join(r.parse(e,t).toLocaleString(s))}static smallestUnit(e){const t=r.currencies.find((t=>t.iso===e));return t?Math.pow(.1,t.decimals):.01}static parse(e,t,n=-1){"string"==typeof e&&(e=parseFloat(e)),Number.isNaN(e)&&(e=0);const i=r.currencies.find((e=>e.iso===t));return i?(n<0&&(n=i.decimals),o.Numbers.round(e,n)):e}static appromixatelySame(e,t,n){if(e=r.parse(e,n),t=r.parse(t,n),!r.currencies.find((e=>e.iso===n)))return e===t;const o=2*this.smallestUnit(n);return Math.abs(e-t)<=o}}t.Currencies=r,r.currencies=[{iso:"AED",name:"United Arab Emirates dirham",format:"",decimals:2},{iso:"AFN",name:"Afghan afghani",format:"",decimals:2},{iso:"ALL",name:"Albanian lek",format:"",decimals:2},{iso:"AMD",name:"Armenian dram",format:"",decimals:2},{iso:"ANG",name:"Netherlands Antillean guilder",format:"",decimals:2},{iso:"AOA",name:"Angolan kwanza",format:"",decimals:2},{iso:"ARS",name:"Argentine peso",format:"",decimals:2},{iso:"AUD",name:"Australian dollar",format:"A$",decimals:2},{iso:"AWG",name:"Aruban florin",format:"",decimals:2},{iso:"AZN",name:"Azerbaijani manat",format:"",decimals:2},{iso:"BAM",name:"Bosnia and Herzegovina convertible mark",format:"",decimals:2},{iso:"BBD",name:"Barbados dollar",format:"",decimals:2},{iso:"BDT",name:"Bangladeshi taka",format:"",decimals:2},{iso:"BGN",name:"Bulgarian lev",format:"",decimals:2},{iso:"BHD",name:"Bahraini dinar",format:"",decimals:3},{iso:"BIF",name:"Burundian franc",format:"",decimals:0},{iso:"BMD",name:"Bermudian dollar",format:"",decimals:2},{iso:"BND",name:"Brunei dollar",format:"",decimals:2},{iso:"BOB",name:"Boliviano",format:"",decimals:2},{iso:"BRL",name:"Brazilian real",format:"",decimals:2},{iso:"BSD",name:"Bahamian dollar",format:"",decimals:2},{iso:"BTN",name:"Bhutanese ngultrum",format:"",decimals:2},{iso:"BWP",name:"Botswana pula",format:"",decimals:2},{iso:"BYN",name:"Belarusian ruble",format:"",decimals:2},{iso:"BZD",name:"Belize dollar",format:"",decimals:2},{iso:"CAD",name:"Canadian dollar",format:"CA$*",decimals:2},{iso:"CDF",name:"Congolese franc",format:"",decimals:2},{iso:"CHF",name:"Swiss franc",format:"",decimals:2},{iso:"CLP",name:"Chilean peso",format:"",decimals:0},{iso:"CNY",name:"Renminbi",format:"*元",decimals:2},{iso:"COP",name:"Colombian peso",format:"",decimals:2},{iso:"CRC",name:"Costa Rican colon",format:"",decimals:2},{iso:"CUC",name:"Cuban convertible peso",format:"",decimals:2},{iso:"CUP",name:"Cuban peso",format:"",decimals:2},{iso:"CVE",name:"Cape Verdean escudo",format:"",decimals:2},{iso:"CZK",name:"Czech koruna",format:"",decimals:2},{iso:"DJF",name:"Djiboutian franc",format:"",decimals:0},{iso:"DKK",name:"Danish krone",format:"* kr",decimals:2,locale:"da-DK"},{iso:"DOP",name:"Dominican peso",format:"",decimals:2},{iso:"DZD",name:"Algerian dinar",format:"",decimals:2},{iso:"EGP",name:"Egyptian pound",format:"",decimals:2},{iso:"ERN",name:"Eritrean nakfa",format:"",decimals:2},{iso:"ETB",name:"Ethiopian birr",format:"",decimals:2},{iso:"EUR",name:"Euro",format:"€*",decimals:2},{iso:"FJD",name:"Fiji dollar",format:"",decimals:2},{iso:"FKP",name:"Falkland Islands pound",format:"",decimals:2},{iso:"GBP",name:"Pound sterling",format:"£*",decimals:2},{iso:"GEL",name:"Georgian lari",format:"",decimals:2},{iso:"GHS",name:"Ghanaian cedi",format:"",decimals:2},{iso:"GIP",name:"Gibraltar pound",format:"",decimals:2},{iso:"GMD",name:"Gambian dalasi",format:"",decimals:2},{iso:"GNF",name:"Guinean franc",format:"",decimals:0},{iso:"GTQ",name:"Guatemalan quetzal",format:"",decimals:2},{iso:"GYD",name:"Guyanese dollar",format:"",decimals:2},{iso:"HKD",name:"Hong Kong dollar",format:"HK$*",decimals:2},{iso:"HNL",name:"Honduran lempira",format:"",decimals:2},{iso:"HRK",name:"Croatian kuna",format:"",decimals:2},{iso:"HTG",name:"Haitian gourde",format:"",decimals:2},{iso:"HUF",name:"Hungarian forint",format:"",decimals:2},{iso:"IDR",name:"Indonesian rupiah",format:"",decimals:2},{iso:"ILS",name:"Israeli new shekel",format:"",decimals:2},{iso:"INR",name:"Indian rupee",format:"₹*",decimals:2},{iso:"IQD",name:"Iraqi dinar",format:"",decimals:3},{iso:"IRR",name:"Iranian rial",format:"",decimals:2},{iso:"ISK",name:"Icelandic króna",format:"",decimals:0},{iso:"JMD",name:"Jamaican dollar",format:"",decimals:2},{iso:"JOD",name:"Jordanian dinar",format:"",decimals:3},{iso:"JPY",name:"Japanese yen",format:"*円",decimals:0},{iso:"KES",name:"Kenyan shilling",format:"",decimals:2},{iso:"KGS",name:"Kyrgyzstani som",format:"",decimals:2},{iso:"KHR",name:"Cambodian riel",format:"",decimals:2},{iso:"KMF",name:"Comoro franc",format:"",decimals:0},{iso:"KPW",name:"North Korean won",format:"",decimals:2},{iso:"KRW",name:"South Korean won",format:"₩*",decimals:0},{iso:"KWD",name:"Kuwaiti dinar",format:"",decimals:3},{iso:"KYD",name:"Cayman Islands dollar",format:"",decimals:2},{iso:"KZT",name:"Kazakhstani tenge",format:"",decimals:2},{iso:"LAK",name:"Lao kip",format:"",decimals:2},{iso:"LBP",name:"Lebanese pound",format:"",decimals:2},{iso:"LKR",name:"Sri Lankan rupee",format:"",decimals:2},{iso:"LRD",name:"Liberian dollar",format:"",decimals:2},{iso:"LSL",name:"Lesotho loti",format:"",decimals:2},{iso:"LYD",name:"Libyan dinar",format:"",decimals:3},{iso:"MAD",name:"Moroccan dirham",format:"",decimals:2},{iso:"MDL",name:"Moldovan leu",format:"",decimals:2},{iso:"MGA",name:"Malagasy ariary",format:"",decimals:2},{iso:"MKD",name:"Macedonian denar",format:"",decimals:2},{iso:"MMK",name:"Myanmar kyat",format:"",decimals:2},{iso:"MNT",name:"Mongolian tögrög",format:"",decimals:2},{iso:"MOP",name:"Macanese pataca",format:"",decimals:2},{iso:"MRU",name:"Mauritanian ouguiya",format:"",decimals:2},{iso:"MUR",name:"Mauritian rupee",format:"",decimals:2},{iso:"MVR",name:"Maldivian rufiyaa",format:"",decimals:2},{iso:"MWK",name:"Malawian kwacha",format:"",decimals:2},{iso:"MXN",name:"Mexican peso",format:"",decimals:2},{iso:"MYR",name:"Malaysian ringgit",format:"",decimals:2},{iso:"MZN",name:"Mozambican metical",format:"",decimals:2},{iso:"NAD",name:"Namibian dollar",format:"",decimals:2},{iso:"NGN",name:"Nigerian naira",format:"",decimals:2},{iso:"NIO",name:"Nicaraguan córdoba",format:"",decimals:2},{iso:"NOK",name:"Norwegian krone",format:"* NKr",decimals:2},{iso:"NPR",name:"Nepalese rupee",format:"",decimals:2},{iso:"NZD",name:"New Zealand dollar",format:"NZ$*",decimals:2},{iso:"OMR",name:"Omani rial",format:"",decimals:3},{iso:"PAB",name:"Panamanian balboa",format:"",decimals:2},{iso:"PEN",name:"Peruvian sol",format:"",decimals:2},{iso:"PGK",name:"Papua New Guinean kina",format:"",decimals:2},{iso:"PHP",name:"Philippine peso",format:"",decimals:2},{iso:"PKR",name:"Pakistani rupee",format:"",decimals:2},{iso:"PLN",name:"Polish złoty",format:"",decimals:2},{iso:"PYG",name:"Paraguayan guaraní",format:"",decimals:0},{iso:"QAR",name:"Qatari riyal",format:"",decimals:2},{iso:"RON",name:"Romanian leu",format:"",decimals:2},{iso:"RSD",name:"Serbian dinar",format:"",decimals:2},{iso:"RUB",name:"Russian ruble",format:"",decimals:2},{iso:"RWF",name:"Rwandan franc",format:"",decimals:0},{iso:"SAR",name:"Saudi riyal",format:"",decimals:2},{iso:"SBD",name:"Solomon Islands dollar",format:"",decimals:2},{iso:"SCR",name:"Seychelles rupee",format:"",decimals:2},{iso:"SDG",name:"Sudanese pound",format:"",decimals:2},{iso:"SEK",name:"Swedish krona",format:"* SKr",decimals:2},{iso:"SGD",name:"Singapore dollar",format:"",decimals:2},{iso:"SHP",name:"Saint Helena pound",format:"",decimals:2},{iso:"SLE",name:"Sierra Leonean leone (new leone)",format:"",decimals:2},{iso:"SLL",name:"Sierra Leonean leone (old leone)",format:"",decimals:2},{iso:"SOS",name:"Somali shilling",format:"",decimals:2},{iso:"SRD",name:"Surinamese dollar",format:"",decimals:2},{iso:"SSP",name:"South Sudanese pound",format:"",decimals:2},{iso:"STN",name:"São Tomé and Príncipe dobra",format:"",decimals:2},{iso:"SVC",name:"Salvadoran colón",format:"",decimals:2},{iso:"SYP",name:"Syrian pound",format:"",decimals:2},{iso:"SZL",name:"Swazi lilangeni",format:"",decimals:2},{iso:"THB",name:"Thai baht",format:"฿*",decimals:2},{iso:"TJS",name:"Tajikistani somoni",format:"",decimals:2},{iso:"TMT",name:"Turkmenistan manat",format:"",decimals:2},{iso:"TND",name:"Tunisian dinar",format:"",decimals:3},{iso:"TOP",name:"Tongan pa'anga",format:"",decimals:2},{iso:"TRY",name:"Turkish lira",format:"",decimals:2},{iso:"TTD",name:"Trinidad and Tobago dollar",format:"",decimals:2},{iso:"TWD",name:"New Taiwan dollar",format:"",decimals:2},{iso:"TZS",name:"Tanzanian shilling",format:"",decimals:2},{iso:"UAH",name:"Ukrainian hryvnia",format:"",decimals:2},{iso:"UGX",name:"Ugandan shilling",format:"",decimals:0},{iso:"USD",name:"United States dollar",format:"$*",decimals:2},{iso:"UYU",name:"Uruguayan peso",format:"",decimals:2},{iso:"UYW",name:"Unidad previsional",format:"",decimals:4},{iso:"UZS",name:"Uzbekistan sum",format:"",decimals:2},{iso:"VED",name:"Venezuelan digital bolívar",format:"",decimals:2},{iso:"VES",name:"Venezuelan sovereign bolívar",format:"",decimals:2},{iso:"VND",name:"Vietnamese đồng",format:"",decimals:0},{iso:"VUV",name:"Vanuatu vatu",format:"",decimals:0},{iso:"WST",name:"Samoan tala",format:"",decimals:2},{iso:"XCD",name:"East Caribbean dollar",format:"",decimals:2},{iso:"YER",name:"Yemeni rial",format:"",decimals:2},{iso:"ZAR",name:"South African rand",format:"",decimals:2},{iso:"ZMW",name:"Zambian kwacha",format:"",decimals:2},{iso:"ZWL",name:"Zimbabwean dollar",format:"",decimals:2}]},22:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.Downloader=void 0,t.Downloader=class{static download(e,t){const n=document.createElement("a");n.download=t,document.body.appendChild(n),n.href="data:text/plain,"+encodeURIComponent(e),n.style.display="none",n.click(),document.body.removeChild(n)}static import(e){return n(this,void 0,void 0,(function*(){const t=document.createElement("input");return t.type="file",t.style.display="none",t.accept=e,document.body.appendChild(t),t.click(),new Promise((e=>{t.onchange=()=>{if(t.files){const n=t.files[0];let o=new FileReader;o.addEventListener("loadend",(()=>{"string"==typeof o.result&&e(o.result)})),o.readAsText(n)}}}))}))}}},5370:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.Images=void 0,t.Images=class{static tryUploadPictureToDownsizedB64(e,t,o){return n(this,void 0,void 0,(function*(){let n=null;const r=document.createElement("input");if(r.type="file",r.style.display="none",r.accept="image/*",document.body.appendChild(r),r.click(),yield new Promise((e=>{r.onchange=()=>e()})),r.files&&r.files.length>0){const s=new FileReader,a=r.files[0],l=new Promise((e=>s.onload=()=>e()));s.readAsDataURL(a),yield o("Loading file..."),yield l;let u=s.result;if("string"==typeof u&&u){const r=document.createElement("img"),s=new Promise((e=>r.onload=()=>e()));r.src=null!=u?u:"",yield o("Parsing image 1/2..."),yield s;const l=new Image,c=new Promise((e=>l.onload=()=>e()));l.src=u,yield o("Parsing image 2/2..."),yield c;let d=l.width,h=l.height;if(d>e){const t=e/d;d*=t,h*=t}if(h>e){const t=e/h;d*=t,h*=t}for(;u.length>t;){yield o(`Downscaling image to ${d}x${h}...`);const e=document.createElement("canvas");e.width=d,e.height=h;var i=e.getContext("2d");if(!i)break;i.imageSmoothingEnabled=!0,i.imageSmoothingQuality="high",i.drawImage(r,0,0,d,h),u=e.toDataURL(a.type),d*=.9,h*=.9}u.length<t&&(n=u)}}return r.remove(),n}))}}},2349:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Numbers=void 0,t.Numbers=class{static sum(e){let t=0;for(const n of e)t+=n;return t}static round(e,t){t=Math.round(t);const n=Math.pow(10,t);return Math.round(e*n)/n}}},8808:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Strings=void 0,t.Strings=class{static elips(e,t){return e.length>=t?e.substring(0,t-3)+"...":e}}},4611:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.Wait=void 0,t.Wait=class{static secs(e){return n(this,void 0,void 0,(function*(){return new Promise((t=>window.setTimeout((()=>t()),1e3*e)))}))}static until(e){return n(this,void 0,void 0,(function*(){if(!e())return new Promise((t=>{const n=window.setInterval((()=>{e()&&(window.clearInterval(n),t())}),1)}))}))}}},1990:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Question=t.Toasts=void 0;const o=n(6584),r=n(4783);t.Toasts=function(e){return(0,o.jsx)(r.Container,Object.assign({style:{position:"absolute",bottom:"70px",left:0,right:0}},{children:e.hub.view.alerts.toasts.map(((t,n)=>(0,o.jsxs)(r.Toast,Object.assign({className:"mx-auto mb-3",isOpen:!0},{children:[(0,o.jsx)(r.ToastHeader,Object.assign({toggle:()=>e.hub.alert.resolveToast(t.content)},{children:t.timeStr})),(0,o.jsxs)(r.ToastBody,{children:[(0,o.jsx)("strong",{children:t.content.title}),t.content.title&&t.content.message?": ":"",t.content.message]})]}),n)))}))},t.Question=function(e){if(e.hub.view.alerts.questions.length<1)return(0,o.jsx)(o.Fragment,{});const t=e.hub.view.alerts.questions[0];return(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)(r.Modal,Object.assign({isOpen:!0},{children:[(0,o.jsx)(r.ModalHeader,Object.assign({style:{whiteSpace:"pre-wrap"}},{children:t.content.title})),(0,o.jsx)(r.ModalBody,Object.assign({style:{whiteSpace:"pre-wrap"}},{children:t.content.message})),(0,o.jsx)(r.ModalFooter,{children:t.content.options.map(((n,i)=>(0,o.jsx)(r.Button,Object.assign({color:"primary",onClick:()=>e.hub.alert.resolveQuestion(t.content,i)},{children:n}),i)))})]}))})}},8176:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Dropdown=t.DropdownState=t.DropdownBridge=void 0;const o=n(6584),r=n(9328);t.DropdownBridge=class{constructor(){this.current=""}};class i{}t.DropdownState=i;class s extends r.BridgeAsync{constructor(){super(...arguments),this.componentDidMount=()=>{var e;this.bridge.current||this.setBridge({current:null!==(e=this.props.initial)&&void 0!==e?e:""})},this.state=new i,this.onChange=e=>{this.setBridge({current:e})},this.rendering=()=>{var e,t;const n=[];for(const t of this.props.options)n.push((0,o.jsx)("option",Object.assign({value:t.key,disabled:null!==(e=t.disabled)&&void 0!==e&&e},{children:t.value}),t.key));return(0,o.jsxs)(o.Fragment,{children:[this.props.label&&(0,o.jsx)("label",Object.assign({className:"form-label",style:{marginRight:"10px",display:this.props.labelBlock?"block":"inline-block"}},{children:null!==(t=this.props.label)&&void 0!==t?t:""})),(0,o.jsx)("select",Object.assign({disabled:this.props.disabled,style:this.props.style,id:this.props.id,value:this.bridge.current,onChange:e=>this.onChange(e.target.value),className:"form-select"},{children:n}))]})}}}t.Dropdown=s},9887:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Textbox=t.TextboxState=t.TextboxBridge=void 0;const o=n(6584),r=n(4783),i=n(9328);t.TextboxBridge=class{constructor(){this.value=""}},t.TextboxState=class{};class s extends i.BridgeAsync{constructor(){super(...arguments),this.rendering=()=>(0,o.jsxs)(r.FormGroup,Object.assign({className:"mb-3"},{children:[!!this.props.label&&(0,o.jsx)(r.Label,Object.assign({for:this.props.id},{children:this.props.label})),(0,o.jsxs)(r.InputGroup,{children:[!!this.props.prefix&&"string"==typeof this.props.prefix&&(0,o.jsx)(r.InputGroupText,{children:this.props.prefix}),!!this.props.prefix&&"string"!=typeof this.props.prefix&&this.props.prefix,(0,o.jsx)(r.Input,{disabled:this.props.disabled,type:this.props.type,name:this.props.id,id:this.props.id,placeholder:this.props.placeholder,value:this.bridge.value,step:this.props.decimals?Math.pow(10,-this.props.decimals):void 0,min:this.props.min,max:this.props.max,onChange:e=>this.setBridge({value:e.target.value})}),!!this.props.suffix&&"string"==typeof this.props.suffix&&(0,o.jsx)(r.InputGroupText,{children:this.props.suffix}),!!this.props.suffix&&"string"!=typeof this.props.suffix&&this.props.suffix]}),!!this.props.hint&&(0,o.jsx)(r.FormText,Object.assign({color:"muted"},{children:this.props.hint}))]}))}}t.Textbox=s},1191:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Toggle=t.ToggleState=t.ToggleBridge=void 0;const o=n(6584),r=n(4783),i=n(9328);t.ToggleBridge=class{constructor(){this.checked=!1}},t.ToggleState=class{};class s extends i.BridgeAsync{constructor(){super(...arguments),this.rendering=()=>(0,o.jsx)(r.FormGroup,Object.assign({check:!0,className:"mb-3"},{children:(0,o.jsxs)(r.Label,Object.assign({check:!0},{children:[(0,o.jsx)(r.Input,{checked:this.bridge.checked,onChange:e=>this.setBridge({checked:e.target.checked}),type:"checkbox"})," ",this.props.label]}))}))}}t.Toggle=s},3675:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.NavBar=t.NavBarState=void 0;const r=n(6584),i=n(9711),s=n(4783),a=n(477),l=n(9124),u=n(4051),c=n(1615);class d{constructor(){this.open=!1}}t.NavBarState=d;class h extends u.ComponentAsync{constructor(){super(...arguments),this.state=new d,this.toggleOpen=()=>o(this,void 0,void 0,(function*(){yield this.setStateAsync({open:!this.state.open})}))}renderer(e,t){return(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(s.Navbar,Object.assign({fixed:"bottom",container:"sm",color:"primary",dark:!0,expand:"lg"},{children:[(0,r.jsxs)(i.Link,Object.assign({className:"navbar-brand",to:"/"},{children:[(0,r.jsx)(c.Fas,{"money-bill-transfer":!0})," ",a.Hub.appTitle]})),(0,r.jsx)("span",Object.assign({className:"d-lg-none"},{children:(0,r.jsx)(l.SyncButton,{hub:e.hub})})),(0,r.jsx)(s.NavbarToggler,{onClick:()=>this.toggleOpen()}),(0,r.jsxs)(s.Collapse,Object.assign({isOpen:this.state.open,navbar:!0},{children:[(0,r.jsx)(s.Nav,Object.assign({className:"me-auto",navbar:!0},{children:(0,r.jsxs)(i.NavLink,Object.assign({className:"nav-link",activeClassName:"active",to:"/"},{children:[(0,r.jsx)(c.Fas,{house:!0})," Home"]}))})),(0,r.jsxs)(s.Nav,Object.assign({navbar:!0},{children:[(0,r.jsx)("li",Object.assign({className:"nav-item d-lg-inline-block d-none"},{children:(0,r.jsx)(l.SyncButton,{hub:e.hub})})),e.hub.jormun.getStatus().loggedIn&&(0,r.jsxs)(i.NavLink,Object.assign({className:"nav-link",activeClassName:"active",to:"/images"},{children:[(0,r.jsx)(c.Fas,{image:!0})," Images"]})),(0,r.jsxs)(i.NavLink,Object.assign({className:"nav-link",activeClassName:"active",to:"/server"},{children:[(0,r.jsx)(c.Fas,{plug:!0})," Server"]}))]}))]}))]}))})}}t.NavBar=h},4559:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Root=void 0;const o=n(6584),r=n(9711),i=n(477),s=n(7640),a=n(1990),l=n(3675),u=n(2015),c=n(4431),d=n(2849),h=n(2770),f=n(4124),p=n(4051),m=n(1615);class g extends p.ComponentAsync{constructor(){super(...arguments),this.state=new s.View,this.hub=new i.Hub([e=>this.setStateAsync(e)])}renderer(e,t){const n=this.hub.navigation.popTarget();return this.hub.jormun.getStatus().initialized?(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)(r.HashRouter,{children:[n&&(0,o.jsx)(r.Navigate,{to:n}),(0,o.jsx)(l.NavBar,{hub:this.hub}),(0,o.jsx)("div",Object.assign({class:"container pt-3 pb-3"},{children:(0,o.jsxs)(r.Routes,{children:[(0,o.jsx)(r.Route,{path:"/",element:(0,o.jsx)(u.HomeRoute,{hub:this.hub})}),(0,o.jsx)(r.Route,{path:"/server",element:(0,o.jsx)(f.ServerRoute,{hub:this.hub})}),(0,o.jsx)(r.Route,{path:"/join/:host/:userId/:roomId",element:(0,o.jsx)(d.JoinRoute,{hub:this.hub})}),(0,o.jsx)(r.Route,{path:"/room/:host/:userId/:roomId",element:(0,o.jsx)(h.RoomRouteRoot,{hub:this.hub})}),(0,o.jsx)(r.Route,{path:"/images",element:(0,o.jsx)(c.ImagesRoute,{hub:this.hub})})]})})),(0,o.jsx)(a.Toasts,{hub:this.hub}),(0,o.jsx)(a.Question,{hub:this.hub})]})}):(0,o.jsxs)("h1",Object.assign({className:"text-center mt-5"},{children:[(0,o.jsx)(v,{animation:t.root.loadAnimation})," Loading..."]}))}}function v(e){return(0,o.jsx)(m.Fas,{receipt:!0})}t.Root=g},9675:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.JoinRoomModal=t.JoinRoomModalBridge=t.JoinRoomModalState=void 0;const r=n(6584),i=n(5263),s=n(4783),a=n(477),l=n(9887),u=n(9328),c=n(1615);class d{constructor(){this.submitting=!1}}t.JoinRoomModalState=d,t.JoinRoomModalBridge=class{constructor(){this.status="",this.opened=!1,this.host=new l.TextboxBridge,this.userId=new l.TextboxBridge,this.roomId=new l.TextboxBridge}};class h extends u.BridgeAsync{constructor(){super(...arguments),this.state=new d,this.toggle=()=>{this.state.submitting||this.setBridge({opened:!this.bridge.opened})},this.join=()=>o(this,void 0,void 0,(function*(){if(this.state.submitting)return;const e=this.bridge.host.value,t=this.bridge.userId.value,n=this.bridge.roomId.value,o=new i.Key(a.Hub.app,parseInt(t),`room_${n}`);yield this.setStateAsync({submitting:!0}),yield this.props.hub.remoteRoomController.joinRoom(e,o.stringifyRemote(-1),(e=>this.setBridge({status:e}))),yield this.setStateAsync({submitting:!1}),this.state.submitting=!1,this.toggle()}))}componentDidMount(){}componentWillUnmount(){}rendering(e,t,n){return(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(s.Modal,Object.assign({isOpen:n.opened,toggle:this.toggle},{children:[(0,r.jsx)(s.ModalHeader,Object.assign({toggle:this.toggle},{children:"Join Room"})),(0,r.jsxs)(s.ModalBody,{children:[(0,r.jsx)(l.Textbox,{label:"Host",bridge:n.host,setBridge:e=>this.setBridge({host:e}),type:"text"}),(0,r.jsx)(l.Textbox,{label:"User Id",bridge:n.userId,setBridge:e=>this.setBridge({userId:e}),type:"number",decimals:0}),(0,r.jsx)(l.Textbox,{label:"Room Id",bridge:n.roomId,setBridge:e=>this.setBridge({roomId:e}),type:"text"}),(0,r.jsxs)(s.Button,Object.assign({disabled:!!t.submitting||void 0,color:"primary",onClick:()=>this.join()},{children:[" ",(0,r.jsx)(c.Fas,{"paper-plane":!0})," Join"]})),(0,r.jsx)("div",{children:n.status})]})]}))})}static open(e){e.bridge.opened=!0,e.bridge.host=new l.TextboxBridge,e.bridge.userId=new l.TextboxBridge,e.bridge.roomId=new l.TextboxBridge,e.bridge.status="",e.setBridge(e.bridge)}}t.JoinRoomModal=h},9451:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.NewRoomModal=t.NewRoomModalBridge=t.NewRoomModalState=void 0;const r=n(6584),i=n(4783),s=n(9887),a=n(9328),l=n(1615);class u{constructor(){this.submitting=!1}}t.NewRoomModalState=u,t.NewRoomModalBridge=class{constructor(){this.status="",this.opened=!1,this.roomName=new s.TextboxBridge,this.users=[new s.TextboxBridge]}};class c extends a.BridgeAsync{constructor(){super(...arguments),this.state=new u,this.toggle=()=>{this.state.submitting||this.setBridge({opened:!this.bridge.opened})},this.create=()=>o(this,void 0,void 0,(function*(){if(this.state.submitting)return;const e=this.bridge.roomName.value,t=this.bridge.users.map((e=>e.value)).filter((e=>!!e));t.length<1||(yield this.setStateAsync({submitting:!0}),yield this.props.hub.localRoomController.createRoom(e,t,(e=>this.setBridge({status:e}))),yield this.setStateAsync({submitting:!1}),this.state.submitting=!1,this.toggle())}))}componentDidMount(){}componentWillUnmount(){}rendering(e,t,n){return n.users.every((e=>!!e.value))&&n.users.push(new s.TextboxBridge),(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(i.Modal,Object.assign({isOpen:n.opened,toggle:this.toggle},{children:[(0,r.jsx)(i.ModalHeader,Object.assign({toggle:this.toggle},{children:"New Room"})),(0,r.jsxs)(i.ModalBody,{children:[(0,r.jsx)(s.Textbox,{label:"Room Name",bridge:n.roomName,setBridge:e=>this.setBridge({roomName:e}),type:"text"}),n.users.map(((e,t)=>(0,r.jsx)(s.Textbox,{label:`User ${t+1}`,bridge:e,setBridge:e=>{n.users[t]=e,this.setBridge({users:n.users})},type:"text"},t))),(0,r.jsxs)(i.Button,Object.assign({disabled:!!t.submitting||void 0,color:"primary",onClick:()=>this.create()},{children:[" ",(0,r.jsx)(l.Fas,{"paper-plane":!0})," Create"]})),(0,r.jsx)("div",{children:this.bridge.status})]})]}))})}static open(e){e.bridge.opened=!0,e.bridge.roomName=new s.TextboxBridge,e.bridge.users=[new s.TextboxBridge],e.bridge.status="",e.setBridge(e.bridge)}}t.NewRoomModal=c},2015:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.HomeRoute=t.HomeRouteState=void 0;const r=n(6584),i=n(5263),s=n(9711),a=n(4783),l=n(4373),u=n(8808),c=n(7363),d=n(4051),h=n(1615),f=n(9675),p=n(9451),m=n(8362);class g{constructor(){this.newRoomModal=new p.NewRoomModalBridge,this.joinRoomModal=new f.JoinRoomModalBridge,this.leaveStatus=""}}t.HomeRouteState=g;class v extends d.ComponentAsync{constructor(){super(...arguments),this.state=new g,this.roomCard=e=>{var t,n,o,i,s,c,d,f;const p=!e.room.info.dead&&"boolean"==typeof e.room.isMine,m=u.Strings.elips(null!==(n=null===(t=e.room.info.cache)||void 0===t?void 0:t.name)&&void 0!==n?n:"",30),g=null!==(o=e.room.balances.find((t=>t.userId===e.room.info.selectedUserId)))&&void 0!==o?o:null===(s=null===(i=e.room.info)||void 0===i?void 0:i.cache)||void 0===s?void 0:s.users.find((t=>t.userId===e.room.info.selectedUserId)),v=(null!==(c=null==g?void 0:g.balances)&&void 0!==c?c:[]).filter((e=>0!==e.balance)),b=null===(d=e.room.info.cache)||void 0===d?void 0:d.coverImage,y=b?this.props.hub.dataController.fetchImage(b.host,b.key):"",x={backgroundImage:y?`url(${y})`:"",backgroundPosition:"center",backgroundSize:"cover",backgroundRepaet:"no-repeat",textAlign:"center",color:"white",backgroundColor:"#78c2ad",height:"100px",paddingTop:"30px",fontSize:"1.5em",textShadow:"black 2px 2px"};return(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(a.Card,Object.assign({className:"mb-3",style:{cursor:p?"pointer":""},onClick:t=>this.clickRoomCard(e.room,t)},{children:[(0,r.jsx)(a.CardHeader,Object.assign({style:x},{children:(0,r.jsxs)("b",{children:[("boolean"==typeof e.room.isMine||e.room.info.dead)&&(0,r.jsx)("span",Object.assign({style:{float:"right"}},{children:!e.room.isMine&&!p&&(0,r.jsx)(a.Button,Object.assign({color:"danger",onClick:t=>this.clickRoomRemove(e.room,t)},{children:(0,r.jsx)(h.Fas,{times:!0})}))})),!e.room.info.dead&&m,e.room.info.dead&&(0,r.jsxs)("span",Object.assign({title:`Couldn't connect to room ${null===(f=e.room.info.cache)||void 0===f?void 0:f.name} at ${e.room.info.host}`},{children:[(0,r.jsx)("s",{children:m})," ",(0,r.jsx)(h.Fas,{"cloud-bolt":!0})]}))]})})),(0,r.jsxs)(a.CardBody,{children:[p&&(0,r.jsx)(h.Fas,{style:{float:"right"},"angle-right":!0}),v.length>0&&(0,r.jsxs)("div",Object.assign({style:{textAlign:"center"}},{children:[(0,r.jsx)("h5",{children:"Your balance:"}),v.map((e=>(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("b",{children:(0,r.jsx)("div",Object.assign({className:e.balance<0?"text-danger":e.balance>0?"text-success":""},{children:l.Currencies.formatAmount(e.balance,e.currency)}))})})))]})),0==v.length&&(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("div",Object.assign({style:{textAlign:"center"}},{children:(0,r.jsx)("b",{children:"Open room to view balance..."})}))})]})]}))})},this.clickRoomCard=(e,t)=>o(this,void 0,void 0,(function*(){if(!e.root)return;const t=i.Key.parse(e.info.roomRootKey,-1);t&&this.props.hub.navigation.setTarget(`/room/${c.B64URL.ToBase64(e.info.host)}/${t.userId}/${e.root.roomId}`)})),this.clickRoomRemove=(e,t)=>o(this,void 0,void 0,(function*(){t.preventDefault(),t.stopPropagation(),yield this.props.hub.localRoomController.askLeaveRoom(e.info.host,e.info.roomRootKey,(e=>this.setStateAsync({leaveStatus:e}))),yield this.setStateAsync({leaveStatus:""})}))}componentDidMount(){this.fetch()}componentWillUnmount(){}fetch(){return o(this,void 0,void 0,(function*(){yield this.props.hub.dataController.fetchDirectory((()=>{})),this.props.hub.update()}))}renderer(e,t){const n=this.props.hub.localRoomController.canCreateRoom(),o=e.hub.dataController.getRooms();return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("div",Object.assign({style:{paddingBottom:"200px"}},{children:[...o].sort(((e,t)=>{var n,o,r,i;return(null!==(o=null===(n=t.info.cache)||void 0===n?void 0:n.lastActivity)&&void 0!==o?o:0)-(null!==(i=null===(r=e.info.cache)||void 0===r?void 0:r.lastActivity)&&void 0!==i?i:0)})).map((e=>(0,r.jsx)(this.roomCard,{room:e})))})),(0,r.jsx)("div",Object.assign({style:{position:"fixed",bottom:"56px",left:"0",right:"0"}},{children:(0,r.jsx)(a.Container,{children:(0,r.jsx)(a.Card,Object.assign({body:!0,style:{paddingBottom:"50px"}},{children:(0,r.jsxs)(a.CardText,Object.assign({style:{textAlign:"center"}},{children:[(0,r.jsxs)(a.Button,Object.assign({color:"primary",onClick:()=>f.JoinRoomModal.open({bridge:t.joinRoomModal,setBridge:e=>this.setStateAsync({joinRoomModal:e})})},{children:[(0,r.jsx)(h.Fas,{plus:!0})," Join Room"]})),(0,r.jsx)("span",{children:" "}),(0,r.jsxs)(a.Button,Object.assign({color:"primary",disabled:!n||void 0,onClick:()=>p.NewRoomModal.open({bridge:t.newRoomModal,setBridge:e=>this.setStateAsync({newRoomModal:e})})},{children:[(0,r.jsx)(h.Fas,{plus:!0})," Create Room"]})),(0,r.jsx)("div",{children:!n&&(0,r.jsxs)(r.Fragment,{children:["To create a room, you need to be logged in to a Jormun Sync Server. ",(0,r.jsx)(s.Link,Object.assign({to:"/server"},{children:"See the server-tab for more info."}))]})})]}))}))})})),(0,r.jsx)(p.NewRoomModal,{hub:e.hub,bridge:t.newRoomModal,setBridge:e=>this.setStateAsync({newRoomModal:e})}),(0,r.jsx)(f.JoinRoomModal,{hub:e.hub,bridge:t.joinRoomModal,setBridge:e=>this.setStateAsync({joinRoomModal:e})}),(0,r.jsx)(m.StatusModal,{header:"Leaving...",status:t.leaveStatus})]})}}t.HomeRoute=v},4431:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ImagesRoute=t.ImagesRouteState=void 0;const r=n(6584),i=n(9711),s=n(4783),a=n(2349),l=n(4051),u=n(1615),c=n(8362);class d{constructor(){this.directory=null,this.previewImage="",this.deleteStatus="",this.images=[]}}t.ImagesRouteState=d;class h extends l.ComponentAsync{constructor(){super(...arguments),this.state=new d,this.delete=e=>o(this,void 0,void 0,(function*(){const t=this.props.hub.jormun.me(e);if(!t)return;if(0!==(yield this.props.hub.jormun.ask("Delete image?","Do you want to delete this image? It will become unavailable in the room it was posted...",["Yes","No"])))return;yield this.setStateAsync({deleteStatus:"Deleting..."}),yield t.remove(),yield this.setStateAsync({deleteStatus:"Fetching directory..."});const n=yield this.props.hub.localRoomController.getDirectory();n.submittedImageFragments&&(n.submittedImageFragments=n.submittedImageFragments.filter((t=>t!==e))),yield this.setStateAsync({deleteStatus:"Setting directory..."}),yield this.props.hub.localRoomController.setDirectory(n,!1),yield this.setStateAsync({deleteStatus:"Synchronizing..."}),yield this.props.hub.jormun.sync(),yield this.setStateAsync({deleteStatus:"Refetching..."}),yield this.fetchData(),yield this.setStateAsync({deleteStatus:""})}))}componentDidMount(){this.fetchData()}componentWillUnmount(){}fetchData(){var e,t;return o(this,void 0,void 0,(function*(){yield this.setStateAsync({directory:null,images:[]});const n=yield this.props.hub.localRoomController.getDirectory();yield this.setStateAsync({directory:n});for(const o of null!==(e=n.submittedImageFragments)&&void 0!==e?e:[]){const e=this.props.hub.jormun.me(o);if(!e)continue;const n=yield e.get(),r=yield e.getRaw();if(!n)continue;const i=n.length/1e3;this.state.images.push({fragment:o,data:n,title:`${new Date(null!==(t=null==r?void 0:r.timestamp)&&void 0!==t?t:0).toLocaleString()} - ${a.Numbers.round(i,0).toLocaleString("en-US")} kb`}),yield this.setStateAsync({images:this.state.images})}}))}renderer(e,t){return e.hub.jormun.getStatus().loggedIn?t.directory?t.images.length<1?(0,r.jsx)("div",Object.assign({style:{textAlign:"center"}},{children:(0,r.jsx)("b",{children:"No images uploaded!"})})):(0,r.jsxs)("div",Object.assign({style:{paddingBottom:"200px"}},{children:[t.images.map(((e,t)=>(0,r.jsx)("div",{children:(0,r.jsxs)(s.Card,Object.assign({style:{marginBottom:"10px",cursor:"zoom-in"},onClick:()=>this.setStateAsync({previewImage:e.data})},{children:[(0,r.jsxs)(s.CardHeader,{children:[(0,r.jsx)("div",Object.assign({style:{float:"right"}},{children:(0,r.jsx)(s.Button,Object.assign({onClick:t=>{this.delete(e.fragment),t.stopPropagation(),t.preventDefault()}},{children:(0,r.jsx)(u.Fas,{trash:!0})}))})),e.title]}),(0,r.jsx)(s.CardBody,{children:(0,r.jsx)("img",{style:{maxWidth:"100px",maxHeight:"100px"},src:e.data})})]}))},e.fragment))),(0,r.jsx)(c.StatusModal,{header:"",status:t.previewImage?(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("img",{src:t.previewImage,style:{width:"100%"}})}):"",close:()=>this.setStateAsync({previewImage:""})}),(0,r.jsx)(c.StatusModal,{header:"Deleting...",status:t.deleteStatus})]})):(0,r.jsx)(r.Fragment,{children:"Loading..."}):(0,r.jsx)(i.Navigate,{to:"/"})}}t.ImagesRoute=h},2849:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JoinRoute=void 0;const o=n(6584),r=n(5263),i=n(9711),s=n(477),a=n(7363);t.JoinRoute=function(e){const t=(0,i.useParams)(),n=t.host,l=t.roomId,u=t.userId;if(n&&l&&u){let t=a.B64URL.FromBase64(n);if(!t)return(0,o.jsx)(o.Fragment,{});t.startsWith("http")||(t=`https://${t}`);const i=new r.Key(s.Hub.app,parseInt(u),`room_${l}`);e.hub.remoteRoomController.joinRoom(t,i.stringifyRemote(-1),(e=>{}))}return(0,o.jsx)(o.Fragment,{children:(0,o.jsx)(i.Navigate,{to:"/"})})}},9930:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.AddUserModal=t.AddUserModalBridge=t.AddUserModalState=void 0;const r=n(6584),i=n(4783),s=n(9887),a=n(9328),l=n(1615);class u{}t.AddUserModalState=u,t.AddUserModalBridge=class{constructor(){this.opened=!1,this.newUsername=new s.TextboxBridge,this.submitting=!1,this.status=""}};class c extends a.BridgeAsync{constructor(){super(...arguments),this.state=new u,this.toggle=()=>{this.bridge.submitting||this.setBridge({opened:!this.bridge.opened})},this.send=()=>o(this,void 0,void 0,(function*(){var e;if(this.bridge.submitting)return;if(!this.bridge.newUsername.value)return;const t=this.props.room;t.isMine&&(null===(e=null==t?void 0:t.root)||void 0===e?void 0:e.roomId)&&(this.setBridge({submitting:!0}),yield this.props.hub.localRoomController.createUsers(t.root.roomId,[this.bridge.newUsername.value],!0,(e=>this.setBridge({status:e}))),yield this.props.hub.dataController.fetchRoom(t.info.host,t.info.roomRootKey,!0,!0,(e=>this.setBridge({status:e}))),this.setBridge({submitting:!1,opened:!1,status:""}))}))}componentDidMount(){}componentWillUnmount(){}rendering(e,t,n){return(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(i.Modal,Object.assign({isOpen:n.opened,toggle:this.toggle},{children:[(0,r.jsx)(i.ModalHeader,Object.assign({toggle:this.toggle},{children:"Change Name"})),(0,r.jsxs)(i.ModalBody,{children:[(0,r.jsx)(s.Textbox,{label:"New Username",type:"text",bridge:n.newUsername,setBridge:e=>this.setBridge({newUsername:e})}),(0,r.jsx)("div",{children:(0,r.jsxs)(i.Button,Object.assign({disabled:n.submitting||void 0,onClick:()=>this.send(),color:"primary",style:{float:"right"}},{children:[(0,r.jsx)(l.Fas,{"paper-plane":!0})," Add"]}))}),(0,r.jsx)("div",{children:n.status})]})]}))})}static open(e){e.bridge.opened=!0,e.bridge.submitting=!1,e.bridge.newUsername=new s.TextboxBridge,e.setBridge(e.bridge)}}t.AddUserModal=c},760:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BalanceModal=t.BalanceModalBridge=t.BalanceModalState=void 0;const o=n(6584),r=n(4783),i=n(4373),s=n(8808),a=n(9328);class l{}t.BalanceModalState=l,t.BalanceModalBridge=class{constructor(){this.opened=!1}};class u extends a.BridgeAsync{constructor(){super(...arguments),this.state=new l,this.toggle=()=>{this.setBridge({opened:!this.bridge.opened})}}componentDidMount(){}componentWillUnmount(){}rendering(e,t,n){const i=this.getCurrencies();return(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)(r.Modal,Object.assign({isOpen:n.opened,toggle:this.toggle},{children:[(0,o.jsx)(r.ModalHeader,Object.assign({toggle:this.toggle},{children:"Balance"})),(0,o.jsx)(r.ModalBody,{children:(0,o.jsx)(r.Table,{children:(0,o.jsx)("tbody",{children:i.map((e=>this.currencyRows(e)))})})})]}))})}getCurrencies(){const e=[];for(const t of this.props.room.balances)for(const n of t.balances)e.includes(n.currency)||e.push(n.currency);return e}currencyRows(e){var t;const n=i.Currencies.getCurrency(e),r=this.props.room.balances.map((t=>({user:t,currency:t.balances.find((t=>t.currency===e))})));return r.every((e=>{var t,n,o,r;return i.Currencies.appromixatelySame(null!==(n=null===(t=e.currency)||void 0===t?void 0:t.balance)&&void 0!==n?n:0,0,null!==(r=null===(o=e.currency)||void 0===o?void 0:o.currency)&&void 0!==r?r:"")}))?(0,o.jsx)(o.Fragment,{}):(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("tr",{children:(0,o.jsx)("th",Object.assign({colSpan:2,style:{textAlign:"center",fontWeight:"bold"}},{children:null!==(t=null==n?void 0:n.name)&&void 0!==t?t:e}))},e),r.map((t=>{var n,r,a,l,u,c,d,h,f;return(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:s.Strings.elips(null!==(a=null===(r=null===(n=this.props.room.users)||void 0===n?void 0:n.find((e=>e.userId===t.user.userId)))||void 0===r?void 0:r.name)&&void 0!==a?a:t.user.userId,20)}),(0,o.jsx)("td",Object.assign({className:(null!==(u=null===(l=t.currency)||void 0===l?void 0:l.balance)&&void 0!==u?u:0)<0?"text-danger":null!==(d=null===(c=t.currency)||void 0===c?void 0:c.balance)&&void 0!==d&&d?"text-success":""},{children:i.Currencies.formatAmount(null!==(f=null===(h=t.currency)||void 0===h?void 0:h.balance)&&void 0!==f?f:0,e)}))]})})}))]})}static open(e){e.bridge.opened=!0,e.setBridge(e.bridge)}}t.BalanceModal=u},872:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ChangeNameModal=t.ChangeNameModalBridge=t.ChangeNameModalState=void 0;const r=n(6584),i=n(4783),s=n(9887),a=n(9328),l=n(1615);class u{}t.ChangeNameModalState=u,t.ChangeNameModalBridge=class{constructor(){this.opened=!1,this.newName=null,this.phoneNumber=null,this.submitting=!1,this.status=""}};class c extends a.BridgeAsync{constructor(){super(...arguments),this.state=new u,this.toggle=()=>{this.bridge.submitting||this.setBridge({opened:!this.bridge.opened})},this.send=()=>o(this,void 0,void 0,(function*(){var e,t;if(this.bridge.submitting)return;if(this.setBridge({submitting:!0}),!(null===(e=this.bridge.newName)||void 0===e?void 0:e.value))return;const n=this.props.room.info;yield this.props.hub.dataController.changeUserInfo(n.host,n.roomRootKey,this.bridge.newName.value,null===(t=this.bridge.phoneNumber)||void 0===t?void 0:t.value,(e=>this.setBridge({status:e}))),this.setBridge({submitting:!1,opened:!1,status:""})}))}componentDidMount(){}componentWillUnmount(){}rendering(e,t,n){var o,a,u,c;if(!n.newName||!n.phoneNumber){n.newName=new s.TextboxBridge,n.phoneNumber=new s.TextboxBridge;const t=null===(a=null===(o=e.room)||void 0===o?void 0:o.users)||void 0===a?void 0:a.find((t=>t.userId==e.room.info.selectedUserId));n.newName.value=null!==(u=null==t?void 0:t.name)&&void 0!==u?u:"",n.phoneNumber.value=null!==(c=null==t?void 0:t.phoneNumber)&&void 0!==c?c:""}return(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(i.Modal,Object.assign({isOpen:n.opened,toggle:this.toggle},{children:[(0,r.jsx)(i.ModalHeader,Object.assign({toggle:this.toggle},{children:"User Profile"})),(0,r.jsxs)(i.ModalBody,{children:[(0,r.jsx)(s.Textbox,{label:"New Name",type:"text",bridge:n.newName,setBridge:e=>this.setBridge({newName:e})}),(0,r.jsx)(s.Textbox,{label:"Phone Number (optional)",type:"text",bridge:n.phoneNumber,setBridge:e=>this.setBridge({phoneNumber:e})}),(0,r.jsx)("div",{children:(0,r.jsxs)(i.Button,Object.assign({disabled:n.submitting||void 0,onClick:()=>this.send(),color:"primary",style:{float:"right"}},{children:[(0,r.jsx)(l.Fas,{"paper-plane":!0})," Save"]}))}),(0,r.jsx)("div",{children:n.status})]})]}))})}static open(e){e.bridge.opened=!0,e.bridge.newName=null,e.bridge.status="",e.bridge.submitting=!1,e.setBridge(e.bridge)}}t.ChangeNameModal=c},4551:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ChangeRoomNameModal=t.ChangeRoomNameModalBridge=t.ChangeRoomNameModalState=void 0;const r=n(6584),i=n(4783),s=n(9887),a=n(9328),l=n(1615);class u{}t.ChangeRoomNameModalState=u,t.ChangeRoomNameModalBridge=class{constructor(){this.opened=!1,this.newRoomName=null,this.submitting=!1,this.status=""}};class c extends a.BridgeAsync{constructor(){super(...arguments),this.state=new u,this.toggle=()=>{this.bridge.submitting||this.setBridge({opened:!this.bridge.opened})},this.send=()=>o(this,void 0,void 0,(function*(){var e,t;if(this.bridge.submitting)return;if(!(null===(e=this.bridge.newRoomName)||void 0===e?void 0:e.value))return;const n=this.props.room;n.isMine&&(null===(t=null==n?void 0:n.root)||void 0===t?void 0:t.roomId)&&(this.setBridge({submitting:!0}),yield this.props.hub.localRoomController.changeRoomName(n.root.roomId,this.bridge.newRoomName.value,(e=>this.setBridge({status:e}))),yield this.props.hub.dataController.fetchRoom(n.info.host,n.info.roomRootKey,!1,!0,(e=>this.setBridge({status:e}))),this.setBridge({submitting:!1,opened:!1,status:""}))}))}componentDidMount(){}componentWillUnmount(){}rendering(e,t,n){var o,a,u,c;return n.newRoomName||(n.newRoomName=new s.TextboxBridge,n.newRoomName.value=null!==(c=null!==(a=null===(o=e.room.root)||void 0===o?void 0:o.name)&&void 0!==a?a:null===(u=e.room.info.cache)||void 0===u?void 0:u.name)&&void 0!==c?c:""),(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(i.Modal,Object.assign({isOpen:n.opened,toggle:this.toggle},{children:[(0,r.jsx)(i.ModalHeader,Object.assign({toggle:this.toggle},{children:"Change Room Name"})),(0,r.jsxs)(i.ModalBody,{children:[(0,r.jsx)(s.Textbox,{label:"New Room Name",type:"text",bridge:n.newRoomName,setBridge:e=>this.setBridge({newRoomName:e})}),(0,r.jsx)("div",{children:(0,r.jsxs)(i.Button,Object.assign({disabled:n.submitting||void 0,onClick:()=>this.send(),color:"primary",style:{float:"right"}},{children:[(0,r.jsx)(l.Fas,{"paper-plane":!0})," Save"]}))}),(0,r.jsx)("div",{children:n.status})]})]}))})}static open(e){e.bridge.opened=!0,e.bridge.newRoomName=null,e.bridge.status="",e.bridge.submitting=!1,e.setBridge(e.bridge)}}t.ChangeRoomNameModal=c},9436:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ChooseUserModal=t.ChooseUserModalState=void 0;const r=n(6584),i=n(4783),s=n(8808),a=n(4051);class l{constructor(){this.submitting=!1,this.status=""}}t.ChooseUserModalState=l;class u extends a.ComponentAsync{constructor(){super(...arguments),this.state=new l,this.choose=e=>o(this,void 0,void 0,(function*(){this.state.submitting||(yield this.setStateAsync({status:"",submitting:!0}),yield this.props.hub.localRoomController.selectUserId(this.props.host,this.props.roomKey,e.userId,(e=>this.setStateAsync({status:e}))),yield this.setStateAsync({status:"",submitting:!1}))}))}componentDidMount(){}componentWillUnmount(){}renderer(e,t){return(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(i.Modal,Object.assign({isOpen:e.opened},{children:[(0,r.jsx)(i.ModalHeader,{children:"Select User"}),(0,r.jsxs)(i.ModalBody,{children:[e.users.map(((e,n)=>(0,r.jsx)(i.Button,Object.assign({className:"mb-3",color:"primary",block:!0,disabled:t.submitting,onClick:()=>this.choose(e)},{children:s.Strings.elips(e.name,30)}),n))),(0,r.jsx)("div",{children:t.status})]})]}))})}}t.ChooseUserModal=u},5028:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.PayModal=t.PayModalBridge=t.PayModalState=void 0;const r=n(6584),i=n(4783),s=n(477),a=n(4373),l=n(8808),u=n(4611),c=n(8176),d=n(9887),h=n(1191),f=n(9328),p=n(1615);class m{}t.PayModalState=m,t.PayModalBridge=class{constructor(){this.opened=!1,this.fromCurrency=new c.DropdownBridge,this.toCurrency=new c.DropdownBridge,this.convert=!1,this.conversion=new d.TextboxBridge,this.creditors=null,this.remainingDebt=0,this.submitting=!1,this.status=""}};class g extends f.BridgeAsync{constructor(){super(...arguments),this.calculating=!1,this.state=new m,this.toggle=()=>{this.bridge.submitting||this.setBridge({opened:!this.bridge.opened})},this.openConversionRate=()=>{window.open(`https://duckduckgo.com/?ia=currency&q=${g.convertFromAmount}+${this.bridge.fromCurrency.current}+${this.bridge.toCurrency.current}`,"_blank")},this.creditorElement=e=>{var t;const n=null===(t=this.props.room.users)||void 0===t?void 0:t.find((t=>t.userId===e.user)),o=!e.ignored,i=o&&e.locked,s=(0,r.jsxs)(r.Fragment,{children:["DKK"===this.getPayCurrency()&&o&&!!(null==n?void 0:n.phoneNumber)&&(0,r.jsx)("div",Object.assign({onClick:()=>this.mobilePay(e,n),style:{cursor:"pointer",marginLeft:"5px",paddingTop:"8px"}},{children:(0,r.jsx)("img",{src:"./www/img/mobilepay.png",width:32,height:32})})),(0,r.jsxs)("div",Object.assign({className:"text-primary",style:{fontSize:"2em",marginLeft:"5px",cursor:"pointer"},onClick:()=>this.toggleUserSelectedState(e)},{children:[!o&&(0,r.jsx)(p.Far,{circle:!0}),o&&!i&&(0,r.jsx)(p.Fas,{"circle-check":!0}),i&&(0,r.jsx)(p.Fas,{lock:!0})]}))]});return(0,r.jsx)(d.Textbox,{disabled:!o||void 0,prefix:`${l.Strings.elips(e.name,10)}: ${a.Currencies.formatAmount(e.max*this.getPayScaling(),this.getPayCurrency())}`,suffix:s,type:"number",min:.01,decimals:2,bridge:{value:a.Currencies.parse(e.amount*this.getPayScaling(),this.getPayCurrency()).toString()},setBridge:t=>this.changeUserAmount(e,parseFloat(t.value)/this.getPayScaling())})},this.toggleUserSelectedState=e=>{e.locked?e.locked=!1:e.ignored=!e.ignored,this.recalculateShare(),this.setBridge({creditors:this.bridge.creditors})},this.changeUserAmount=(e,t)=>{e.ignored||(e.amount=a.Currencies.parse(t,this.bridge.fromCurrency.current),e.locked=!0,this.recalculateShare(),this.setBridge({creditors:this.bridge.creditors}))},this.negativeCurrencies=()=>{var e,t;const n=null===(t=null===(e=this.props.room)||void 0===e?void 0:e.balances)||void 0===t?void 0:t.find((e=>e.userId===this.props.room.info.selectedUserId));return n?n.balances.filter((e=>e.balance<0)):[]},this.balanceInCurrency=()=>{var e,t;return null!==(t=null===(e=this.negativeCurrencies().find((e=>e.currency===this.bridge.fromCurrency.current)))||void 0===e?void 0:e.balance)&&void 0!==t?t:0},this.recalculateShare=()=>o(this,void 0,void 0,(function*(){var e,t,n;if(!(this.negativeCurrencies().length<1)){if(this.calculating=!0,yield u.Wait.secs(0),!this.bridge.creditors){const o=null!==(n=null===(t=null===(e=this.props.room)||void 0===e?void 0:e.balances)||void 0===t?void 0:t.filter((e=>{var t,n;return(null!==(n=null===(t=e.balances.find((e=>e.currency===this.bridge.fromCurrency.current)))||void 0===t?void 0:t.balance)&&void 0!==n?n:0)>0})))&&void 0!==n?n:[];this.bridge.creditors=o.map((e=>{var t,n,o,r,i;return{name:null!==(o=null===(n=null===(t=this.props.room.users)||void 0===t?void 0:t.find((t=>t.userId==e.userId)))||void 0===n?void 0:n.name)&&void 0!==o?o:"",user:e.userId,amount:0,locked:!1,ignored:!1,max:null!==(i=null===(r=e.balances.find((e=>e.currency===this.bridge.fromCurrency.current)))||void 0===r?void 0:r.balance)&&void 0!==i?i:0}}))}if(this.bridge.remainingDebt=-this.balanceInCurrency(),!(this.bridge.remainingDebt<=0)){for(this.bridge.creditors.forEach((e=>{e.locked&&!e.ignored?(e.amount=Math.min(e.max,e.amount,this.bridge.remainingDebt),this.bridge.remainingDebt-=e.amount):e.amount=0}));this.bridge.remainingDebt>0;){const e=this.bridge.creditors.filter((e=>!e.ignored&&!e.locked&&e.amount<e.max));if(e.length<1)break;let t=null,n=this.bridge.remainingDebt/e.length;e.forEach((e=>t=Math.min(null!=t?t:e.max,e.max)));let o=Math.min(n,null!=t?t:n);e.forEach((e=>{const t=e.amount;e.amount=Math.min(e.max,e.amount+o);const n=e.amount-t;this.bridge.remainingDebt-=n}))}this.bridge.remainingDebt=a.Currencies.parse(this.bridge.remainingDebt,this.bridge.fromCurrency.current),this.bridge.creditors.forEach((e=>e.amount=a.Currencies.parse(e.amount,this.bridge.fromCurrency.current))),this.setBridge({remainingDebt:this.bridge.remainingDebt,creditors:this.bridge.creditors}),this.calculating=!1}}})),this.pay=()=>o(this,void 0,void 0,(function*(){var e,t;if(this.bridge.submitting)return;this.setBridge({submitting:!0,status:""});const n=this.props.room.info;for(const o of null!==(e=this.bridge.creditors)&&void 0!==e?e:[]){if(o.ignored)continue;const e={message:"",creditor:null!==(t=n.selectedUserId)&&void 0!==t?t:"",amount:o.amount,currency:this.bridge.fromCurrency.current,debtors:[{user:o.user,locked:!1,amount:o.amount}]};yield this.props.hub.dataController.addTransction(n.host,n.roomRootKey,e,(e=>this.setBridge({status:e})))}this.setBridge({submitting:!1,status:"",opened:!1})}))}componentDidMount(){}componentWillUnmount(){}rendering(e,t,n){const o=this.negativeCurrencies();return o.length>0&&!o.map((e=>e.currency)).includes(n.fromCurrency.current)&&(n.fromCurrency.current=o[0].currency,n.creditors=null),n.creditors||this.recalculateShare(),(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(i.Modal,Object.assign({isOpen:n.opened,toggle:this.toggle},{children:[(0,r.jsx)(i.ModalHeader,Object.assign({toggle:this.toggle},{children:"Settle Up"})),(0,r.jsxs)(i.ModalBody,{children:[0==o.length&&(0,r.jsxs)("b",{children:[(0,r.jsx)(p.Fas,{"party-horn":!0})," You don't owe anything!"]}),o.length>0&&(0,r.jsxs)(r.Fragment,{children:[this.currencyDropdown(o.map((e=>e.currency))),!n.convert&&(0,r.jsx)(h.Toggle,{label:"Settle in Different Currency",bridge:{checked:!1},setBridge:e=>this.setBridge({convert:e.checked,toCurrency:{current:this.props.hub.dataController.getLastCurrency()}})}),n.convert&&(0,r.jsx)(d.Textbox,{prefix:(0,r.jsx)(c.Dropdown,{style:{maxWidth:"100px"},options:this.getCurrencies(),bridge:this.bridge.toCurrency,setBridge:e=>{this.setBridge({toCurrency:e})}}),type:"number",placeholder:`${g.convertFromAmount} ${n.fromCurrency.current} = ?? ${n.toCurrency.current}`,label:"Currency To Pay In",bridge:n.conversion,setBridge:e=>this.setBridge({conversion:e}),suffix:(0,r.jsx)(i.Button,Object.assign({color:"primary",onClick:()=>this.openConversionRate()},{children:(0,r.jsx)(p.Fas,{"arrow-trend-up":!0})}))}),(0,r.jsxs)("h6",Object.assign({style:{marginTop:"10px"}},{children:["You owe: ",a.Currencies.formatAmount(-this.balanceInCurrency()*this.getPayScaling(),this.getPayCurrency())," ",(0,r.jsx)(p.Fas,{"arrow-right":!0})," ",a.Currencies.formatAmount(n.remainingDebt*this.getPayScaling(),this.getPayCurrency())]})),(0,r.jsx)("h5",{children:"Share"}),n.creditors&&n.creditors.map((e=>this.creditorElement(e))),(0,r.jsx)("div",Object.assign({style:{float:"right"}},{children:(0,r.jsxs)(i.Button,Object.assign({disabled:n.submitting||void 0,color:"primary",onClick:()=>this.pay()},{children:[(0,r.jsx)(p.Fas,{"paper-plane":!0})," Pay"]}))})),this.bridge.status&&(0,r.jsx)("div",Object.assign({className:"mt-3"},{children:this.bridge.status}))]})]})]}))})}getPayCurrency(){return this.bridge.convert&&this.bridge.toCurrency.current?this.bridge.toCurrency.current:this.bridge.fromCurrency.current}getPayScaling(){if(!this.bridge.convert||!this.bridge.toCurrency.current)return 1;const e=this.bridge.fromCurrency.current,t=g.convertFromAmount,n=a.Currencies.parse(this.bridge.conversion.value,e,10);return 0===n?1:n/t}mobilePay(e,t){var n;return o(this,void 0,void 0,(function*(){if(!this.bridge.creditors)return;if(!t.phoneNumber)return;const o=a.Currencies.parse(e.amount*this.getPayScaling(),this.getPayCurrency());if(yield this.props.hub.jormun.ask("MobilePay","Make sure the money is going to the right person before transferring any money!",["Open MobilePay"]),window.open(`mobilepay://send?phone=${null!==(n=t.phoneNumber)&&void 0!==n?n:""}&comment=${s.Hub.appTitle}&amount=${o}`,"_blank"),0===(yield this.props.hub.jormun.ask("MobilePay","Did the money transfer go through?",["Yes","No"]))){e.locked=!0,e.ignored=!1;for(const t of this.bridge.creditors)t!==e&&(t.locked=!1,t.ignored=!0);this.recalculateShare(),this.setBridge({creditors:this.bridge.creditors}),yield u.Wait.secs(0),yield this.pay()}}))}currencyDropdown(e){var t;return(0,r.jsx)(c.Dropdown,{label:"Currency To Settle",initial:null!==(t=e[0])&&void 0!==t?t:this.props.hub.dataController.getLastCurrency(),options:this.getCurrencies().filter((t=>e.length<1||e.includes(t.key))),bridge:this.bridge.fromCurrency,setBridge:e=>{this.setBridge({fromCurrency:e,creditors:null})}})}getCurrencies(){var e;return null!==(e=a.Currencies.getCurrencies().map((e=>({key:e.iso,value:`${e.iso} - ${e.name}`}))))&&void 0!==e?e:[]}static open(e){e.bridge.opened=!0,e.bridge.creditors=null,e.bridge.status="",e.bridge.conversion=new d.TextboxBridge,e.bridge.convert=!1,e.bridge.submitting=!1,e.setBridge(e.bridge)}}t.PayModal=g,g.convertFromAmount=100},4129:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TransactionList=void 0;const o=n(6584),r=n(3465);t.TransactionList=function(e){if(!e.room)return(0,o.jsx)(o.Fragment,{});if(e.room.fullTransactionList.length<1)return(0,o.jsx)("div",Object.assign({style:{textAlign:"center"}},{children:"There's nothing here yet!"}));const t=[];for(let n=e.room.fullTransactionList.length-1;n>=Math.max(0,e.room.fullTransactionList.length-e.limit);n--){const i=e.room.fullTransactionList[n];t.unshift((0,o.jsx)(r.TransactionView,{hub:e.hub,room:e.room,data:i,onEdit:t=>e.onEdit(t),onPreview:t=>e.onPreview(t)},i.transactionId))}return(0,o.jsx)(o.Fragment,{children:t})}},3891:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.TransactionModal=t.TransactionModalBridge=t.TransactionModalState=void 0;const r=n(6584),i=n(4783),s=n(2349),a=n(4611),l=n(8176),u=n(9887),c=n(9328),d=n(4373),h=n(1615),f=n(8808);class p{}t.TransactionModalState=p,t.TransactionModalBridge=class{constructor(){this.editingId="",this.editingTransaction=null,this.previewing=!1,this.opened=!1,this.creditor=new l.DropdownBridge,this.amount=new u.TextboxBridge,this.currency=new l.DropdownBridge,this.debtors=null,this.message=new u.TextboxBridge,this.submitting=!1,this.status=""}};class m extends c.BridgeAsync{constructor(){super(...arguments),this.recalculating=!1,this.state=new p,this.toggle=()=>{this.bridge.submitting||this.setBridge({opened:!this.bridge.opened})},this.debtorElement=e=>{var t,n;const o=null===(t=this.bridge.debtors)||void 0===t?void 0:t.find((t=>t.user===e.userId)),i=!!o,s=null==o?void 0:o.locked,a=(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)("div",Object.assign({className:"text-primary",style:{fontSize:"2em",marginLeft:"10px",cursor:this.bridge.previewing?"":"pointer"},onClick:()=>this.toggleUserSelectedState(e.userId)},{children:[!i&&(0,r.jsx)(h.Far,{circle:!0}),i&&!s&&(0,r.jsx)(h.Fas,{"circle-check":!0}),s&&(0,r.jsx)(h.Fas,{lock:!0})]}))});return(0,r.jsx)(u.Textbox,{disabled:!i||this.bridge.previewing||void 0,prefix:`${f.Strings.elips(e.name,15)}: ${this.bridge.currency.current}`,suffix:a,type:"number",min:.01,decimals:2,bridge:{value:null!==(n=null==o?void 0:o.amount.toString())&&void 0!==n?n:"-"},setBridge:t=>this.changeUserAmount(e.userId,t.value)})},this.changeUserAmount=(e,t)=>{var n;const o=d.Currencies.parse(t,this.bridge.currency.current),r=null===(n=this.bridge.debtors)||void 0===n?void 0:n.find((t=>t.user===e));r&&(r.amount=o);const i=!!r,s=null==r?void 0:r.locked;i&&(s||(r.locked=!0),this.recalculateSharing(),this.setBridge({debtors:this.bridge.debtors}))},this.toggleUserSelectedState=e=>{var t;if(this.bridge.previewing)return;const n=null===(t=this.bridge.debtors)||void 0===t?void 0:t.find((t=>t.user===e)),o=!!n,r=null==n?void 0:n.locked;this.bridge.debtors||(this.bridge.debtors=[]),this.bridge.debtors.forEach((e=>e.amount=d.Currencies.parse(e.amount,this.bridge.currency.current))),o?r?n.locked=!1:this.bridge.debtors=this.bridge.debtors.filter((t=>t.user!==e)):this.bridge.debtors.push({user:e,locked:!1,amount:0}),this.recalculateSharing(),this.setBridge({debtors:this.bridge.debtors})},this.recalculateSharing=()=>o(this,void 0,void 0,(function*(){this.recalculating=!0,yield a.Wait.secs(0),this.bridge.amount.value=this.getAmount().toString(),this.bridge.debtors||(this.bridge.debtors=[]),this.bridge.debtors.forEach((e=>e.amount=d.Currencies.parse(e.amount,this.bridge.currency.current)));const e=this.bridge.debtors.filter((e=>!e.locked)),t=this.bridge.debtors.filter((e=>e.locked));if(e.length>0){const n=s.Numbers.sum(t.map((e=>e.amount))),o=(this.getAmount()-n)/e.length;e.forEach((e=>e.amount=o))}if(this.bridge.debtors.forEach((e=>e.amount=d.Currencies.parse(e.amount,this.bridge.currency.current))),e.length>0){let t=s.Numbers.sum(this.bridge.debtors.map((e=>e.amount)));const n=d.Currencies.smallestUnit(this.bridge.currency.current);for(let o=0;!d.Currencies.appromixatelySame(this.getAmount(),t,this.bridge.currency.current);o++){const r=e[o%e.length],i=n*Math.sign(this.getAmount()-t);r.amount+=i,r.amount=d.Currencies.parse(r.amount,this.bridge.currency.current),t+=i}}this.recalculating=!1,this.setBridge({debtors:this.bridge.debtors,amount:this.bridge.amount})})),this.getAmount=()=>d.Currencies.parse(this.bridge.amount.value,this.bridge.currency.current),this.getErrorMessage=()=>{var e,t;if((!this.bridge.debtors||0===this.bridge.debtors.length)&&this.getAmount()>0)return"The outlay must be shared between at least one person.";if(null===(e=this.bridge.debtors)||void 0===e?void 0:e.some((e=>e.amount<0)))return"Make sure no one's share is negative.";const n=s.Numbers.sum((null!==(t=this.bridge.debtors)&&void 0!==t?t:[]).map((e=>e.amount)));return d.Currencies.appromixatelySame(n,this.getAmount(),this.bridge.currency.current)?null:"Make sure the sum of the sharing is equal to the outlay amount."},this.submit=()=>o(this,void 0,void 0,(function*(){var e;if(this.getErrorMessage())return;this.setBridge({submitting:!0,previewing:!0});const t={message:this.bridge.message.value,amount:this.getAmount(),creditor:this.bridge.creditor.current,debtors:JSON.parse(JSON.stringify(null!==(e=this.bridge.debtors)&&void 0!==e?e:[])),currency:this.bridge.currency.current},n=this.props.room.info;this.bridge.editingId?yield this.props.hub.dataController.editTransaction(n.host,n.roomRootKey,this.bridge.editingId,t,(e=>this.setBridge({status:e}))):yield this.props.hub.dataController.addTransction(n.host,n.roomRootKey,t,(e=>this.setBridge({status:e}))),this.setBridge({submitting:!1,previewing:!1,opened:!1,status:""})})),this.delete=()=>o(this,void 0,void 0,(function*(){var e,t;const n=this.props.room.info,o=null===(e=this.props.room.users)||void 0===e?void 0:e.find((e=>e.userId===n.selectedUserId));if(!n.selectedUserId||!o)return;if(!this.bridge.editingId)return;if(0!==(yield this.props.hub.jormun.ask("Deletion","Really delete this outlay?",["Yes","No"])))return;this.setBridge({submitting:!0,previewing:!0});const r=this.bridge.editingTransaction,i={amount:0,debtors:[],creditor:n.selectedUserId,message:`${o.name} deleted an entry from ${new Date(null!==(t=null==r?void 0:r.time)&&void 0!==t?t:0).toLocaleString()}.`,currency:""};yield this.props.hub.dataController.removeTransaction(n.host,n.roomRootKey,this.bridge.editingId,(e=>this.setBridge({status:e}))),yield this.props.hub.dataController.addTransction(n.host,n.roomRootKey,i,(e=>this.setBridge({status:e}))),this.setBridge({submitting:!1,previewing:!1,opened:!1,status:""})}))}componentDidMount(){}componentWillUnmount(){}rendering(e,t,n){var o,s,a,c,d,f,p,m,g,v,b,y;n.debtors||(this.bridge.debtors=null!==(a=null===(s=null===(o=e.room)||void 0===o?void 0:o.users)||void 0===s?void 0:s.map((e=>({user:e.userId,amount:0,locked:!1}))))&&void 0!==a?a:null),n.editingId&&!n.editingTransaction?n.editingTransaction=null!==(c=e.room.fullTransactionList.find((e=>e.transactionId===n.editingId)))&&void 0!==c?c:null:!n.editingId&&n.editingTransaction&&(n.editingTransaction=null);const x=this.getErrorMessage();return(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)(i.Modal,Object.assign({isOpen:n.opened,toggle:this.toggle},{children:[(0,r.jsxs)(i.ModalHeader,Object.assign({toggle:this.toggle},{children:[!n.previewing&&!n.editingId&&"Add Outlay",n.previewing&&!n.editingId&&new Date(null!==(f=null===(d=n.editingTransaction)||void 0===d?void 0:d.time)&&void 0!==f?f:0).toLocaleString(),!n.previewing&&n.editingId&&new Date(null!==(m=null===(p=n.editingTransaction)||void 0===p?void 0:p.time)&&void 0!==m?m:0).toLocaleString()]})),(0,r.jsxs)(i.ModalBody,{children:[!(null===(g=n.editingTransaction)||void 0===g?void 0:g.image)&&(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(l.Dropdown,{disabled:n.previewing||void 0,label:"Who's paying?",options:this.getOptions(),bridge:n.creditor,setBridge:e=>this.setBridge({creditor:e})}),(0,r.jsx)(u.Textbox,{disabled:n.previewing||void 0,prefix:this.currencyDropdown(),type:"number",decimals:2,min:.01,label:"Amount",bridge:n.amount,setBridge:e=>{this.setBridge({amount:e}),this.recalculateSharing()}}),(0,r.jsx)("h5",{children:"Share"}),null===(b=null===(v=this.props.room)||void 0===v?void 0:v.users)||void 0===b?void 0:b.map((e=>this.debtorElement(e))),(0,r.jsx)(u.Textbox,{disabled:n.previewing||void 0,placeholder:n.previewing?"":"Write a message...",type:"text",label:"Description",bridge:n.message,setBridge:e=>this.setBridge({message:e})}),!n.previewing&&!this.recalculating&&x&&(0,r.jsx)("div",Object.assign({style:{textAlign:"right"},className:"text-warning mb-3"},{children:null!=x?x:""}))]}),!!(null===(y=n.editingTransaction)||void 0===y?void 0:y.image)&&(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("img",{style:{marginBottom:"10px",width:"100%"},src:e.hub.dataController.fetchImage(n.editingTransaction.image.host,n.editingTransaction.image.key)})}),!n.previewing&&(0,r.jsxs)("div",Object.assign({style:{float:"right"}},{children:[n.editingId&&(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.Button,Object.assign({disabled:!this.recalculating&&!!x,color:"danger",onClick:()=>this.delete()},{children:[(0,r.jsx)(h.Fas,{trash:!0})," Delete"]})),(0,r.jsx)("span",{children:" "})]}),(0,r.jsxs)(i.Button,Object.assign({disabled:!this.recalculating&&!!x,color:"primary",onClick:()=>this.submit()},{children:[(0,r.jsx)(h.Fas,{"paper-plane":!0})," ",n.editingId?"Edit":"Submit"]}))]})),this.bridge.status&&(0,r.jsx)("div",Object.assign({className:"mt-3"},{children:this.bridge.status}))]})]}))})}currencyDropdown(){return(0,r.jsx)(l.Dropdown,{style:{maxWidth:"100px"},initial:this.props.hub.dataController.getLastCurrency(),options:this.getCurrencies(),bridge:this.bridge.currency,setBridge:e=>{this.setBridge({currency:e}),this.props.hub.dataController.setLastCurrency(e.current)}})}getOptions(){var e,t;return null!==(t=null===(e=this.props.room.users)||void 0===e?void 0:e.map((e=>({key:e.userId,value:e.name}))))&&void 0!==t?t:[]}getCurrencies(){var e;return null!==(e=d.Currencies.getCurrencies().map((e=>({key:e.iso,value:`${e.iso} - ${e.name}`}))))&&void 0!==e?e:[]}static open(e,t){e.bridge.opened=!0,e.bridge.creditor.current=t,e.bridge.amount.value="",e.bridge.debtors=null,e.bridge.editingId="",e.bridge.editingTransaction=null,e.bridge.message.value="",e.bridge.previewing=!1,e.bridge.status="",e.setBridge(e.bridge)}static edit(e,t,n){e.bridge.opened=!0,e.bridge.amount.value=n.amount.toString(),e.bridge.debtors=JSON.parse(JSON.stringify(n.debtors)),e.bridge.editingId=n.transactionId,e.bridge.editingTransaction=null,e.bridge.currency.current=n.currency,e.bridge.message.value=n.message,e.bridge.creditor.current=n.creditor,e.bridge.previewing=!1,e.bridge.status="",e.setBridge(e.bridge)}static preview(e,t,n){e.bridge.opened=!0,e.bridge.amount.value=n.amount.toString(),e.bridge.debtors=JSON.parse(JSON.stringify(n.debtors)),e.bridge.editingId=n.transactionId,e.bridge.editingTransaction=null,e.bridge.currency.current=n.currency,e.bridge.message.value=n.message,e.bridge.creditor.current=n.creditor,e.bridge.previewing=!0,e.bridge.status="",e.setBridge(e.bridge)}}t.TransactionModal=m},3465:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TransactionView=void 0;const o=n(6584),r=n(4783),i=n(8197),s=n(4373),a=n(8808),l=n(1615);t.TransactionView=function(e){var t,n,u,c,d,h,f,p,m,g,v,b,y;let x=e.data.creatorId===e.room.info.selectedUserId;const _=null!==(c=null===(u=null===(n=null===(t=e.room)||void 0===t?void 0:t.users)||void 0===n?void 0:n.find((t=>t.userId===(null==e?void 0:e.data.creatorId))))||void 0===u?void 0:u.name)&&void 0!==c?c:null,w=e.data.creditor!==e.data.creatorId&&null!==(f=null===(h=null===(d=e.room.users)||void 0===d?void 0:d.find((t=>t.userId===e.data.creditor)))||void 0===h?void 0:h.name)&&void 0!==f?f:null,j=null===(p=e.data.debtors)||void 0===p?void 0:p.find((t=>t.user===e.room.info.selectedUserId));let C=!x,E=null,S=!0,O="primary";if(0===e.data.amount&&0===e.data.debtors.length)E=(0,o.jsxs)(o.Fragment,{children:[e.data.message&&(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(l.Fas,{comment:!0})," "]}),(0,o.jsx)("span",{children:a.Strings.elips(e.data.message,500)})]}),O="light",S=!1;else if(1!==e.data.debtors.length||e.data.debtors[0].user===e.data.creditor||e.data.creditor!==e.data.creatorId||e.data.message)E=(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)("div",Object.assign({style:{textAlign:"center"}},{children:[(0,o.jsxs)("div",{children:[(0,o.jsx)(l.Fas,{receipt:!0})," ",(0,o.jsxs)("b",{children:[s.Currencies.formatAmount(e.data.amount,e.data.currency),!!w&&(0,o.jsxs)("i",{children:[" (Paid by ",a.Strings.elips(w,10),")"]})]})]}),!!e.data.message&&(0,o.jsx)("div",{children:a.Strings.elips(e.data.message,100)}),(0,o.jsx)("div",{children:(0,o.jsxs)("i",{children:["My share: ",s.Currencies.formatAmount(null!==(b=null==j?void 0:j.amount)&&void 0!==b?b:0,e.data.currency)]})})]}))});else{const t=null!==(v=null===(g=null===(m=e.room.users)||void 0===m?void 0:m.find((t=>t.userId===e.data.debtors[0].user)))||void 0===g?void 0:g.name)&&void 0!==v?v:"";E=(0,o.jsxs)("b",{children:[(0,o.jsx)(l.Fas,{"hand-holding-dollar":!0})," ",a.Strings.elips(null!=_?_:"",10)," paid ",s.Currencies.formatAmount(e.data.amount,e.data.currency)," to ",a.Strings.elips(t,10),"."]})}return(0,o.jsx)(o.Fragment,{children:(0,o.jsxs)(r.Card,Object.assign({color:O,body:!0,inverse:S||void 0,style:{marginTop:"30px",display:"block",cursor:x||C?"pointer":""},onClick:()=>{x?e.onEdit(e.data):C&&e.onPreview(e.data)}},{children:[(x||C)&&(0,o.jsx)("div",Object.assign({style:{float:"right"}},{children:(0,o.jsx)(l.Fas,{"angle-right":!0})})),(0,o.jsxs)("div",Object.assign({className:"text-dark",style:{width:"100%",position:"absolute",marginTop:"-40px",marginLeft:"-10px"}},{children:[a.Strings.elips(null!=_?_:"",20),(0,o.jsxs)("span",Object.assign({className:"text-muted",style:{marginRight:"10px",float:"right",fontSize:"0.75em"}},{children:[" ",i.AlertController.timeToAgoStr(e.data.time,6048e5)]}))]})),E,e.data.image&&(0,o.jsx)("div",Object.assign({style:{textAlign:"left"}},{children:(0,o.jsx)("img",{style:{maxWidth:"100px",maxHeight:"100px"},src:null!==(y=e.hub.dataController.fetchImage(e.data.image.host,e.data.image.key))&&void 0!==y?y:""})}))]}))})}},2770:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.RoomRoute=t.RoomRouteState=t.RoomRouteRoot=void 0;const r=n(6584),i=n(6974),s=n(4783),a=n(477),l=n(4611),u=n(9887),c=n(1615),d=n(8362),h=n(760),f=n(872),p=n(9436),m=n(5028),g=n(4129),v=n(3891),b=n(4551),y=n(9930),x=n(8808),_=n(5263),w=n(7363),j=n(5370),C=n(4051);t.RoomRouteRoot=function(e){var t,n,o,s;const a=(0,i.useParams)();return(0,r.jsx)(S,{hub:e.hub,roomId:null!==(t=a.roomId)&&void 0!==t?t:"",userId:parseInt(null!==(n=a.userId)&&void 0!==n?n:"-1"),host:null!==(s=w.B64URL.FromBase64(null!==(o=a.host)&&void 0!==o?o:""))&&void 0!==s?s:""})};class E{constructor(){this.fetchStatus="",this.sendMessageStatus="",this.refreshStatus="",this.clearSelectedUserStatus="",this.imageProcessingStatus="",this.coverImageProcessingStatus="",this.destroyStatus="",this.leaveStatus="",this.uploadImageStatus="",this.qrCode={link:"",done:!1,qr:""},this.chatMessage=new u.TextboxBridge,this.settingsOpen=!1,this.joinInfoOpen=!1,this.balanceModal=new h.BalanceModalBridge,this.changeNameModal=new f.ChangeNameModalBridge,this.payModal=new m.PayModalBridge,this.transactionModal=new v.TransactionModalBridge,this.addUserModal=new y.AddUserModalBridge,this.changeRoomNameModal=new b.ChangeRoomNameModalBridge,this.submitImagePreview="",this.submitImageAction=null,this.transactionShowLimit=10,this.redirectToJoin=!1}}t.RoomRouteState=E;class S extends C.ComponentAsync{constructor(){super(...arguments),this.state=new E,this.mounted=!1,this.scrollDown=()=>{$("html, body").animate({scrollTop:$(document).height()},"slow")},this.getRoom=()=>{var e;return null!==(e=this.props.hub.dataController.getRooms().find((e=>{var t;return(null===(t=e.root)||void 0===t?void 0:t.roomId)===this.props.roomId})))&&void 0!==e?e:null},this.getSelectedUser=()=>{var e,t,n,o,r;const i=this.getRoom();return i?{userData:null!==(t=null===(e=i.users)||void 0===e?void 0:e.find((e=>e.userId===i.info.selectedUserId)))&&void 0!==t?t:null,userInfo:null!==(r=null===(n=i.root)||void 0===n?void 0:n.users[null!==(o=i.info.selectedUserId)&&void 0!==o?o:""])&&void 0!==r?r:null}:null},this.owesMoney=e=>{var t,n,o;return null===(o=null===(n=null===(t=e.balances)||void 0===t?void 0:t.find((t=>t.userId===e.info.selectedUserId)))||void 0===n?void 0:n.balances)||void 0===o?void 0:o.some((e=>e.balance<0))},this.clearSelectedUser=()=>o(this,void 0,void 0,(function*(){const e=this.getRoom();e&&(yield this.props.hub.localRoomController.selectUserId(e.info.host,e.info.roomRootKey,"",(e=>this.setStateAsync({clearSelectedUserStatus:e}))),yield this.setStateAsync({clearSelectedUserStatus:""}))})),this.SettingsModal=()=>{const e=this.getRoom();return(0,r.jsxs)(s.Modal,Object.assign({isOpen:this.state.settingsOpen,toggle:()=>this.setStateAsync({settingsOpen:!this.state.settingsOpen})},{children:[(0,r.jsx)(s.ModalHeader,Object.assign({toggle:()=>this.setStateAsync({settingsOpen:!this.state.settingsOpen})},{children:"Settings"})),(0,r.jsxs)(s.ModalBody,{children:[(0,r.jsxs)(s.Button,Object.assign({className:"mb-3",color:"primary",block:!0,onClick:()=>this.setStateAsync({joinInfoOpen:!0})},{children:[(0,r.jsx)(c.Fas,{tag:!0})," Show Join Info"]})),(0,r.jsxs)(s.Button,Object.assign({className:"mb-3",color:"primary",block:!0,onClick:()=>this.clearSelectedUser()},{children:[(0,r.jsx)(c.Fas,{"user-gear":!0})," Change User"]})),(0,r.jsxs)(s.Button,Object.assign({className:"mb-3",color:"primary",block:!0,onClick:()=>f.ChangeNameModal.open({bridge:this.state.changeNameModal,setBridge:e=>this.setStateAsync({changeNameModal:e})})},{children:[(0,r.jsx)(c.Fas,{"user-pen":!0})," User Profile"]})),(0,r.jsxs)(s.Button,Object.assign({className:"mb-3",color:"primary",disabled:!this.props.hub.jormun.getStatus().loggedIn,block:!0,onClick:()=>this.chooseCoverImageToUpload()},{children:[(0,r.jsx)(c.Fas,{image:!0})," Change Room Image"]})),(null==e?void 0:e.isMine)&&(0,r.jsxs)(s.Button,Object.assign({className:"mb-3",color:"primary",block:!0,onClick:()=>y.AddUserModal.open({bridge:this.state.addUserModal,setBridge:e=>this.setStateAsync({addUserModal:e})})},{children:[(0,r.jsx)(c.Fas,{"user-plus":!0})," Add user"]})),(null==e?void 0:e.isMine)&&(0,r.jsxs)(s.Button,Object.assign({className:"mb-3",color:"primary",block:!0,onClick:()=>b.ChangeRoomNameModal.open({bridge:this.state.changeRoomNameModal,setBridge:e=>this.setStateAsync({changeRoomNameModal:e})})},{children:[(0,r.jsx)(c.Fas,{"pen-to-square":!0})," Edit Room Name"]})),(null==e?void 0:e.isMine)&&(0,r.jsxs)(s.Button,Object.assign({className:"mb-3",color:"danger",block:!0,onClick:t=>this.clickRoomDestroy(e,t)},{children:[(0,r.jsx)(c.Fas,{bomb:!0})," Destroy Room"]})),e&&!(null==e?void 0:e.isMine)&&(0,r.jsxs)(s.Button,Object.assign({className:"mb-3",color:"danger",block:!0,onClick:t=>this.clickRoomRemove(e,t)},{children:[(0,r.jsx)(c.Fas,{times:!0})," Leave Room"]}))]})]}))},this.JoinInfoModal=()=>{var e,t,n;const o=this.getRoom();if(!o)return(0,r.jsx)(r.Fragment,{});const i=this.props.hub.localRoomController.getJoinURL(o.info.host,o.info.roomRootKey);this.generateQrCode(i);const a=_.Key.parse(o.info.roomRootKey,-1);return(0,r.jsxs)(s.Modal,Object.assign({isOpen:this.state.joinInfoOpen,toggle:()=>this.setStateAsync({joinInfoOpen:!this.state.joinInfoOpen})},{children:[(0,r.jsx)(s.ModalHeader,Object.assign({toggle:()=>this.setStateAsync({joinInfoOpen:!this.state.joinInfoOpen})},{children:"Join Info"})),(0,r.jsxs)(s.ModalBody,{children:[i&&(0,r.jsx)(u.Textbox,{label:"Join Link",type:"text",bridge:{value:i},setBridge:()=>{}}),this.state.qrCode.link===i&&this.state.qrCode.done&&(0,r.jsx)("div",{children:(0,r.jsx)("img",{src:this.state.qrCode.qr,style:{width:"100%"}})}),(0,r.jsx)("h5",{children:"Manual Join"}),(0,r.jsx)(u.Textbox,{label:"Host",type:"text",bridge:{value:o.info.host},setBridge:()=>{}}),(0,r.jsx)(u.Textbox,{label:"User Id",type:"text",bridge:{value:null!==(e=null==a?void 0:a.userId.toString())&&void 0!==e?e:"??"},setBridge:()=>{}}),(0,r.jsx)(u.Textbox,{label:"Room Id",type:"text",bridge:{value:null!==(n=null===(t=o.root)||void 0===t?void 0:t.roomId)&&void 0!==n?n:"??"},setBridge:()=>{}})]})]}))},this.generateQrCode=e=>o(this,void 0,void 0,(function*(){this.state.qrCode.link!==e&&(this.state.qrCode.link&&(yield l.Wait.until((()=>this.state.qrCode.done))),this.state.qrCode.link=e,this.state.qrCode.done=!1,this.state.qrCode.qr=yield this.props.hub.localRoomController.getJoinQRCode(e),this.state.qrCode.done=!0)})),this.sendMessage=()=>o(this,void 0,void 0,(function*(){var e;const t=this.state.chatMessage.value,n=this.getRoom();if(!n)return;if(!t)return;const o={creditor:null!==(e=n.info.selectedUserId)&&void 0!==e?e:"",currency:this.props.hub.dataController.getLastCurrency(),amount:0,debtors:[],message:t};yield this.props.hub.dataController.addTransction(n.info.host,n.info.roomRootKey,o,(e=>this.setStateAsync({sendMessageStatus:e}))),yield this.setStateAsync({sendMessageStatus:"",chatMessage:{value:""}})})),this.submitImagePreviewWrapper=e=>o(this,void 0,void 0,(function*(){if(!this.state.submitImageAction||!this.state.submitImagePreview)return;const t=this.state.submitImagePreview;yield this.setStateAsync({submitImagePreview:""}),yield this.setStateAsync({uploadImageStatus:"Preparing..."});const n=yield this.props.hub.localRoomController.saveImage(t,(e=>this.setStateAsync({uploadImageStatus:e})));n&&(yield this.state.submitImageAction(n,e,(e=>this.setStateAsync({uploadImageStatus:e})))),yield this.setStateAsync({uploadImageStatus:""})})),this.chooseImageToUpload=()=>o(this,void 0,void 0,(function*(){var e;const t=null!==(e=yield j.Images.tryUploadPictureToDownsizedB64(512,5e4,(e=>this.setStateAsync({imageProcessingStatus:e}))))&&void 0!==e?e:"";yield this.setStateAsync({imageProcessingStatus:""}),t&&(yield this.setStateAsync({submitImagePreview:t,submitImageAction:(e,t,n)=>this.postImageToChat(e,t,n)}))})),this.postImageToChat=(e,t,n)=>o(this,void 0,void 0,(function*(){if(!t.info.selectedUserId)return;const o={amount:0,debtors:[],creditor:t.info.selectedUserId,message:"",currency:"",image:e};yield this.props.hub.dataController.addTransction(t.info.host,t.info.roomRootKey,o,(e=>n(e)))})),this.chooseCoverImageToUpload=()=>o(this,void 0,void 0,(function*(){var e;const t=null!==(e=yield j.Images.tryUploadPictureToDownsizedB64(512,1e6,(e=>this.setStateAsync({coverImageProcessingStatus:e}))))&&void 0!==e?e:"";yield this.setStateAsync({coverImageProcessingStatus:""}),t&&(yield this.setStateAsync({submitImagePreview:t,submitImageAction:(e,t,n)=>o(this,void 0,void 0,(function*(){yield this.props.hub.dataController.updateCoverImage(t.info.host,t.info.roomRootKey,e,n)}))}))})),this.clickRoomDestroy=(e,t)=>o(this,void 0,void 0,(function*(){t.preventDefault(),t.stopPropagation();const n=yield this.props.hub.localRoomController.askDestroyRoom(e.info.host,e.info.roomRootKey,(e=>this.setStateAsync({destroyStatus:e})));yield this.setStateAsync({destroyStatus:""}),n&&this.props.hub.navigation.setTarget("/")})),this.clickRoomRemove=(e,t)=>o(this,void 0,void 0,(function*(){t.preventDefault(),t.stopPropagation();const n=yield this.props.hub.localRoomController.askLeaveRoom(e.info.host,e.info.roomRootKey,(e=>this.setStateAsync({leaveStatus:e})));yield this.setStateAsync({leaveStatus:""}),n&&this.props.hub.navigation.setTarget("/")})),this.refresh=()=>o(this,void 0,void 0,(function*(){const e=this.getRoom();e&&(yield this.props.hub.dataController.fetchRoom(e.info.host,e.info.roomRootKey,!0,!0,(e=>this.setStateAsync({refreshStatus:e}))),yield l.Wait.secs(.1),yield this.setStateAsync({refreshStatus:""}))}))}componentDidMount(){this.mounted=!0,this.fetch(),this.checkJoined()}fetch(){return o(this,void 0,void 0,(function*(){this.scrollDown(),yield l.Wait.until((()=>!this.mounted||!!this.getRoom()));const e=this.getRoom();(null==e?void 0:e.info)&&(()=>{o(this,void 0,void 0,(function*(){yield this.props.hub.dataController.fetchRoom(e.info.host,e.info.roomRootKey,!0,!0,(e=>this.setStateAsync({fetchStatus:e}))),yield this.setStateAsync({fetchStatus:""}),yield l.Wait.secs(0),this.scrollDown()}))})()}))}checkJoined(){return o(this,void 0,void 0,(function*(){yield l.Wait.until((()=>!this.mounted||this.props.hub.jormun.getStatus().initialized));const e=yield this.props.hub.localRoomController.getDirectory(),t=new _.Key(a.Hub.app,this.props.userId,`room_${this.props.roomId}`);e.rooms.find((e=>e.roomRootKey===t.stringifyLocal()&&e.host===this.props.host))||(yield this.setStateAsync({redirectToJoin:!0}))}))}componentWillUnmount(){this.mounted=!1}renderer(e,t){var n,o,l,w,j,C,E,S,O,N;const T=this.getRoom();if(!T)return t.redirectToJoin?(0,r.jsx)(i.Navigate,{to:this.props.hub.localRoomController.getJoinHash(e.host,new _.Key(a.Hub.app,e.userId,`room_${e.roomId}`).stringifyLocal())}):(0,r.jsx)(r.Fragment,{});const M=this.getSelectedUser(),k={fontSize:"1.25em"};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("div",Object.assign({style:{paddingBottom:"350px"}},{children:[t.transactionShowLimit<T.fullTransactionList.length&&(0,r.jsxs)(s.Button,Object.assign({color:"light",block:!0,className:"mb-3",onClick:()=>{this.setStateAsync({transactionShowLimit:t.transactionShowLimit+25})}},{children:[(0,r.jsx)(c.Fas,{"caret-up":!0})," Show more..."]})),T.users&&(0,r.jsx)(g.TransactionList,{hub:e.hub,room:T,limit:t.transactionShowLimit,onEdit:e=>{var n;return v.TransactionModal.edit({bridge:t.transactionModal,setBridge:e=>this.setStateAsync({transactionModal:e})},null!==(n=T.info.selectedUserId)&&void 0!==n?n:"",e)},onPreview:e=>{var n;return v.TransactionModal.preview({bridge:t.transactionModal,setBridge:e=>this.setStateAsync({transactionModal:e})},null!==(n=T.info.selectedUserId)&&void 0!==n?n:"",e)}}),!T.users&&(0,r.jsx)("div",Object.assign({style:{textAlign:"center"}},{children:(0,r.jsx)("b",{children:"Loading..."})}))]})),(0,r.jsx)("div",Object.assign({style:{position:"fixed",bottom:"56px",left:"0",right:"0"}},{children:(0,r.jsx)(s.Container,{children:(0,r.jsxs)(s.Card,{children:[(0,r.jsxs)(s.CardHeader,{children:[(0,r.jsx)("span",Object.assign({style:{float:"right"}},{children:(0,r.jsx)(s.Button,Object.assign({color:"light",title:"Refresh",onClick:()=>this.refresh()},{children:(0,r.jsx)(c.Fas,{refresh:!0})}))})),(0,r.jsx)("div",{children:(0,r.jsx)("b",{children:x.Strings.elips(null!==(w=null!==(o=null===(n=null==T?void 0:T.root)||void 0===n?void 0:n.name)&&void 0!==o?o:null===(l=null==T?void 0:T.info.cache)||void 0===l?void 0:l.name)&&void 0!==w?w:"",30)})}),(0,r.jsx)("div",{children:x.Strings.elips(null!==(C=null===(j=null==M?void 0:M.userData)||void 0===j?void 0:j.name)&&void 0!==C?C:"",30)})]}),(0,r.jsxs)(s.CardBody,Object.assign({style:{textAlign:"center",paddingBottom:"50px"}},{children:[(0,r.jsx)("div",{children:(0,r.jsx)(u.Textbox,{placeholder:"Write a message...",type:"text",bridge:t.chatMessage,setBridge:e=>this.setStateAsync({chatMessage:e}),suffix:(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.Button,Object.assign({size:"xl",color:"primary",title:"Send message",onClick:()=>this.sendMessage()},{children:(0,r.jsx)(c.Fas,{"paper-plane":!0})})),(0,r.jsx)(s.Button,Object.assign({size:"xl",color:"primary",disabled:!e.hub.jormun.getStatus().loggedIn,title:"Send image",onClick:()=>this.chooseImageToUpload()},{children:(0,r.jsx)(c.Fas,{image:!0})}))]})})}),(0,r.jsx)(s.Button,Object.assign({style:k,size:"xl",color:"primary",title:"Add outlay",onClick:()=>{var e;return v.TransactionModal.open({bridge:t.transactionModal,setBridge:e=>this.setStateAsync({transactionModal:e})},null!==(e=T.info.selectedUserId)&&void 0!==e?e:"")}},{children:(0,r.jsx)(c.Fas,{style:{minWidth:"22.5px"},receipt:!0})})),(0,r.jsx)("span",{children:" "}),(0,r.jsxs)(s.Button,Object.assign({style:k,size:"xl",color:"primary",title:"Settle up",onClick:()=>m.PayModal.open({bridge:t.payModal,setBridge:e=>this.setStateAsync({payModal:e})})},{children:[this.owesMoney(T)&&(0,r.jsx)("div",Object.assign({className:"text-danger",style:{position:"absolute",fontSize:"0.75em",marginTop:"-16px",marginLeft:"25px"}},{children:(0,r.jsx)(c.Fas,{circle:!0})})),(0,r.jsx)(c.Fas,{"hand-holding-dollar":!0})]})),(0,r.jsx)("span",{children:" "}),(0,r.jsx)(s.Button,Object.assign({style:k,size:"xl",color:"light",title:"Balance Overview",onClick:()=>h.BalanceModal.open({bridge:t.balanceModal,setBridge:e=>this.setStateAsync({balanceModal:e})})},{children:(0,r.jsx)(c.Fas,{"list-ol":!0})})),(0,r.jsx)("span",{children:" "}),(0,r.jsx)(s.Button,Object.assign({style:k,size:"xl",color:"light",title:"Settings",onClick:()=>this.setStateAsync({settingsOpen:!0})},{children:(0,r.jsx)(c.Fas,{gear:!0})})),(0,r.jsx)("span",{children:" "})]}))]})})})),(0,r.jsx)(this.SettingsModal,{}),(0,r.jsx)(this.JoinInfoModal,{}),(0,r.jsx)(h.BalanceModal,{room:T,hub:e.hub,bridge:t.balanceModal,setBridge:e=>this.setStateAsync({balanceModal:e})}),(0,r.jsx)(f.ChangeNameModal,{room:T,hub:e.hub,bridge:t.changeNameModal,setBridge:e=>this.setStateAsync({changeNameModal:e})}),(0,r.jsx)(b.ChangeRoomNameModal,{room:T,hub:e.hub,bridge:t.changeRoomNameModal,setBridge:e=>this.setStateAsync({changeRoomNameModal:e})}),(0,r.jsx)(y.AddUserModal,{room:T,hub:e.hub,bridge:t.addUserModal,setBridge:e=>this.setStateAsync({addUserModal:e})}),(0,r.jsx)(m.PayModal,{room:T,hub:e.hub,bridge:t.payModal,setBridge:e=>this.setStateAsync({payModal:e})}),(0,r.jsx)(v.TransactionModal,{room:T,hub:e.hub,bridge:t.transactionModal,setBridge:e=>this.setStateAsync({transactionModal:e})}),(0,r.jsx)(p.ChooseUserModal,{opened:!(null==T?void 0:T.info.selectedUserId)&&!!(null==T?void 0:T.users)&&!!(null===(E=null==T?void 0:T.info)||void 0===E?void 0:E.host),hub:e.hub,users:null!==(S=null==T?void 0:T.users)&&void 0!==S?S:[],host:null!==(O=null==T?void 0:T.info.host)&&void 0!==O?O:"",roomKey:null!==(N=null==T?void 0:T.info.roomRootKey)&&void 0!==N?N:""}),(0,r.jsx)(d.StatusModal,{header:"Changing user",status:t.clearSelectedUserStatus}),(0,r.jsx)(d.StatusModal,{header:"Sending message...",status:t.sendMessageStatus}),(0,r.jsx)(d.StatusModal,{header:"Refreshing...",status:t.refreshStatus}),(0,r.jsx)(d.StatusModal,{header:"Loading image...",status:t.imageProcessingStatus}),(0,r.jsx)(d.StatusModal,{header:"Loading image...",status:t.coverImageProcessingStatus}),(0,r.jsx)(d.StatusModal,{header:"Deleting...",status:t.destroyStatus}),(0,r.jsx)(d.StatusModal,{header:"Leaving...",status:t.leaveStatus}),(0,r.jsx)(d.StatusModal,{header:"Submitting image...",status:t.uploadImageStatus}),(0,r.jsx)(d.StatusModal,{header:"Submit image?",status:t.submitImagePreview?(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("img",{src:t.submitImagePreview,style:{width:"100%"}}),(0,r.jsxs)("div",Object.assign({style:{float:"right",marginTop:"10px"}},{children:[(0,r.jsxs)(s.Button,Object.assign({color:"primary",onClick:()=>this.setStateAsync({submitImagePreview:""})},{children:[(0,r.jsx)(c.Fas,{cancel:!0})," Cancel"]})),(0,r.jsx)("span",{children:" "}),(0,r.jsxs)(s.Button,Object.assign({color:"primary",onClick:()=>this.submitImagePreviewWrapper(T)},{children:[(0,r.jsx)(c.Fas,{"paper-plane":!0})," Submit"]}))]}))]}):"",close:()=>this.setStateAsync({submitImagePreview:""})})]})}}t.RoomRoute=S},4124:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ServerRoute=t.ServerRouteState=void 0;const r=n(6584),i=n(6703),s=n(4783),a=n(477),l=n(9887),u=n(4051),c=n(1615);class d{constructor(){this.showLoginForm=!1,this.host="",this.username="",this.password="",this.jormunRemote=null}}t.ServerRouteState=d;class h extends u.ComponentAsync{constructor(){super(...arguments),this.state=new d,this.signup=()=>o(this,void 0,void 0,(function*(){const e=yield i.Jormun.getAnonymousRemote("jormun_sync",this.state.host,(e=>this.props.hub.alert.handleAlert(e)));(yield e.register("",this.state.username,this.state.password,1,!1))&&(this.props.hub.jormun.alert("Success!","You are now signed up! Attempting to log you in..."),yield this.login(),this.props.hub.navigation.setTarget("/"))}))}componentDidMount(){this.props.hub.jormun.onSetup.on(this.reset,this),this.reset()}componentWillUnmount(){this.props.hub.jormun.onSetup.off(this.reset,this)}fetchConfig(){return o(this,void 0,void 0,(function*(){const e=yield fetch("www/json/config.json");if(200==e.status)try{const t=yield e.json();return yield this.setStateAsync({config:t}),t}catch(e){}}))}reset(){var e,t,n;return o(this,void 0,void 0,(function*(){const o=new d,r=yield this.props.hub.jormun.hashedRemote(),i=yield this.fetchConfig();o.host=null!==(t=null!==(e=null==r?void 0:r.host)&&void 0!==e?e:null==i?void 0:i.defaultSyncServer)&&void 0!==t?t:"",o.username=null!==(n=null==r?void 0:r.username)&&void 0!==n?n:"",o.password="",o.jormunRemote=r,o.showLoginForm=!this.props.hub.jormun.getStatus().loggedIn,yield this.setStateAsync(o)}))}login(){return o(this,void 0,void 0,(function*(){yield this.props.hub.server.login(this.state),yield this.reset()}))}renderer(e,t){var n,i,u,d,h,f;return(0,r.jsxs)(r.Fragment,{children:[e.hub.jormun.getStatus().initialized?"":(0,r.jsxs)("span",Object.assign({class:"badge rounded-pill bg-warning mt-3"},{children:[(0,r.jsx)(c.Fas,{spinner:!0})," Loading..."]})),e.hub.jormun.getStatus().initialized&&e.hub.jormun.getStatus().loggedIn?(0,r.jsxs)("span",Object.assign({class:"badge rounded-pill bg-success mt-3"},{children:[(0,r.jsx)(c.Fas,{"circle-check":!0})," Logged in as ",null!==(i=null===(n=t.jormunRemote)||void 0===n?void 0:n.username)&&void 0!==i?i:"","@",(null!==(d=null===(u=t.jormunRemote)||void 0===u?void 0:u.host)&&void 0!==d?d:"").replace("http://","").replace("https://","")]})):"",e.hub.jormun.getStatus().initialized&&!e.hub.jormun.getStatus().loggedIn?(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("span",Object.assign({class:"badge rounded-pill bg-danger mt-3"},{children:[(0,r.jsx)(c.Fas,{"circle-exclamation":!0})," Not logged in"]})),(0,r.jsxs)(s.Alert,Object.assign({color:"info"},{children:[(0,r.jsxs)("p",{children:[a.Hub.appTitle," doesn't have a dedicated backend. It uses a Jormun Sync server: a self-hosted application, which lets you synchronize data for small web apps between devices."]}),(0,r.jsxs)("p",{children:["The person creating a ",a.Hub.appTitle," room needs to be connected to such a server, which is where the data will live and be shared between the users. "]}),(0,r.jsx)("p",{children:(0,r.jsx)("b",{children:"Anyone joining that room to share expenses does not need to be connected to a Sync Server."})}),(null===(h=t.config)||void 0===h?void 0:h.defaultSyncServer)&&(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("p",{children:["This instance of ",a.Hub.appTitle," recommends you try ",(0,r.jsx)("b",{children:(0,r.jsx)("a",Object.assign({href:t.config.defaultSyncServer,target:"_blank"},{children:t.config.defaultSyncServer}))})," as the Sync Server."]}),t.config.openSignUps&&(0,r.jsxs)("b",{children:["You can sign up for a user on ",t.config.defaultSyncServer,' by typing in a new username and password, and clicking the "sign up" button below.']})]})]}))]}):"",!e.hub.jormun.getStatus().loggedIn||t.showLoginForm?(0,r.jsxs)("form",Object.assign({className:"mt-3",onSubmit:e=>o(this,void 0,void 0,(function*(){e.preventDefault(),yield this.login()}))},{children:[(0,r.jsx)(l.Textbox,{type:"text",label:(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(c.Fas,{globe:!0})," Host"]}),bridge:{value:t.host},setBridge:e=>this.setStateAsync({host:e.value})}),(0,r.jsx)(l.Textbox,{type:"text",label:(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(c.Fas,{user:!0})," Username"]}),bridge:{value:t.username},setBridge:e=>this.setStateAsync({username:e.value})}),(0,r.jsx)(l.Textbox,{type:"password",label:(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(c.Fas,{icon:"key"})," Password"]}),bridge:{value:t.password},setBridge:e=>this.setStateAsync({password:e.value})}),(0,r.jsxs)(s.Button,Object.assign({type:"submit",color:"primary"},{children:[(0,r.jsx)(c.Fas,{"right-to-bracket":!0})," Login"]})),(null===(f=null==t?void 0:t.config)||void 0===f?void 0:f.defaultSyncServer)&&(null==t?void 0:t.config.openSignUps)&&(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("span",{children:" "}),(0,r.jsxs)(s.Button,Object.assign({type:"button",color:"primary",onClick:()=>this.signup()},{children:[(0,r.jsx)(c.Fas,{"user-plus":!0})," Sign Up"]}))]})]})):"",t.showLoginForm?"":(0,r.jsx)("div",Object.assign({class:"mt-3"},{children:(0,r.jsxs)("button",Object.assign({type:"button",class:"btn btn-primary",onClick:()=>this.setStateAsync({showLoginForm:!0})},{children:[(0,r.jsx)(c.Fas,{globe:!0})," Change server"]}))})),(0,r.jsxs)("div",Object.assign({class:"mt-3"},{children:[(0,r.jsxs)("button",Object.assign({type:"button",class:"btn btn-primary",onClick:()=>e.hub.server.export()},{children:[(0,r.jsx)(c.Fas,{download:!0})," Export"]}))," ",(0,r.jsxs)("button",Object.assign({type:"button",class:"btn btn-primary",onClick:()=>e.hub.server.import()},{children:[(0,r.jsx)(c.Fas,{upload:!0})," Import"]}))]})),(0,r.jsx)("div",Object.assign({className:"mt-3"},{children:(0,r.jsx)("div",{children:(0,r.jsxs)("a",Object.assign({target:"_blank",href:"https://github.com/wanieru/jormun-share"},{children:[(0,r.jsx)(c.Fab,{github:!0})," ",a.Hub.appTitle," on Github"]}))})}))]})}}t.ServerRoute=h},9124:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SyncButton=void 0;const o=n(6584),r=n(1615);function i(e){const t=e.hub.view.sync;return e.hub.jormun.getStatus().syncing?(0,o.jsxs)("span",Object.assign({className:"text-secondary"},{children:[(0,o.jsx)(r.Fas,{cloud:!0})," ",(0,o.jsx)(r.Fas,{spinner:!0})]})):t.remoteNewer?(0,o.jsxs)("span",Object.assign({className:"text-danger"},{children:[(0,o.jsx)(r.Fas,{"cloud-arrow-down":!0})," ",t.localVersion]})):t.localDirty?(0,o.jsxs)("span",Object.assign({className:"text-warning"},{children:[(0,o.jsx)(r.Fas,{"cloud-arrow-up":!0})," ",t.localVersion]})):(0,o.jsxs)("span",Object.assign({className:"text-light"},{children:[(0,o.jsx)(r.Fas,{cloud:!0})," ",t.localVersion]}))}t.SyncButton=function(e){return e.hub.jormun.getStatus().loggedIn?(0,o.jsx)("a",Object.assign({style:{cursor:"pointer",minWidth:"170px"},className:"nav-link active",onClick:()=>e.hub.jormun.sync()},{children:(0,o.jsx)(i,{hub:e.hub})})):(0,o.jsx)(o.Fragment,{})}},7363:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.B64URL=void 0,t.B64URL=class{static ToBase64(e){return window.btoa(e).replaceAll("/","-").replaceAll("=","_")}static FromBase64(e){try{return window.atob(e.replaceAll("_","=").replaceAll("-","/"))}catch(e){return console.log(e),null}}}},9328:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.BridgeAsync=void 0;const r=n(4611),i=n(4051);class s extends i.ComponentAsync{constructor(){super(...arguments),this.setBridge=e=>o(this,void 0,void 0,(function*(){const t=i.ComponentAsync.change(this.props.bridge,e),n=this.props.setBridge(t);this.props.bridge=t,n&&(yield n),yield r.Wait.until((()=>!this.isRendering))}))}get bridge(){return this.props.bridge}renderer(e,t,n){return this.rendering(e,t,this.bridge)}}t.BridgeAsync=s},4051:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.ComponentAsync=void 0;const r=n(6584),i=n(9748),s=n(4611);class a extends i.Component{constructor(){super(...arguments),this.previouslyRendered=(0,r.jsx)(r.Fragment,{}),this.queuedRender=null,this.isRendering=!1,this.setStateAsync=e=>o(this,void 0,void 0,(function*(){const t=a.change(this.state,e),n=new Promise((e=>{this.setState(t,(()=>e()))}));this.state=t,yield n,yield s.Wait.until((()=>!this.isRendering))})),this.render=(e,t,n)=>{var o;if(this.isRendering&&this.previouslyRendered,this.isRendering=!0,this.queuedRender)this.previouslyRendered=this.queuedRender,this.isRendering=!1;else{const n=this.renderer(e,t);"Promise"===(null===(o=null==n?void 0:n.constructor)||void 0===o?void 0:o.name)?n.then((e=>{this.queuedRender=e,this.isRendering=!1,this.forceUpdate((()=>{this.queuedRender=null}))})):(this.previouslyRendered=n,this.isRendering=!1)}return this.previouslyRendered}}static change(e,t){const n={};for(const o in e)t.hasOwnProperty(o)?n[o]=t[o]:n[o]=e[o];return n}}t.ComponentAsync=a},1615:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Fab=t.Fal=t.Fad=t.Far=t.Fas=void 0;const o=n(6584),r=(e,t)=>{let n,r=e;for(let e in t)"className"===e?r+=" "+t[e]:"style"===e?n=t[e]:r+="icon"===e?" fa-"+t[e]:" fa-"+e;return(0,o.jsx)("i",{className:r,style:n})};t.Fas=e=>r("fas",e),t.Far=e=>r("far",e),t.Fad=e=>r("fad",e),t.Fal=e=>r("fal",e),t.Fab=e=>r("fab",e)},8362:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StatusModal=void 0;const o=n(6584),r=n(4783);t.StatusModal=function(e){return document.body.classList.contains("modal-open")||"hidden"!=document.body.style.overflow||(document.body.style.overflow=""),(0,o.jsxs)(r.Modal,Object.assign({isOpen:!!e.status,toggle:e.close?()=>{e.close&&e.close()}:void 0},{children:[(0,o.jsx)(r.ModalHeader,Object.assign({toggle:e.close?()=>{e.close&&e.close()}:void 0},{children:e.header})),(0,o.jsx)(r.ModalBody,{children:(0,o.jsx)("div",{children:e.status})})]}))}},7640:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.View=void 0,t.View=class{constructor(){this.root={loadAnimation:0},this.sync={localDirty:!1,localVersion:"-",remoteNewer:!1},this.alerts={toasts:[],questions:[]}}}},2272:function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((o=o.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const r=n(6584),i=n(6400),s=n(477),a=n(4611),l=n(4559);!function(){o(this,void 0,void 0,(function*(){yield a.Wait.until((()=>"loading"!==document.readyState)),$("title").text(s.Hub.appTitle),(0,i.render)((0,r.jsx)(l.Root,{}),document.body)}))}()},2473:e=>{"use strict";e.exports=function(){}},4783:(e,t,n)=>{var o=n(9748),r=n(5697),i=n(4184),s=n(5455),a=n(9748),l=n(7305);function u(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var c,d=u(o),h=u(r),f=u(i),p=u(a);function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){v(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function v(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(){return b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},b.apply(this,arguments)}function y(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,x(e,t)}function x(e,t){return x=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},x(e,t)}function _(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}function w(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function j(){var e=document.createElement("div");e.style.position="absolute",e.style.top="-9999px",e.style.width="50px",e.style.height="50px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t}function C(e){document.body.style.paddingRight=e>0?e+"px":null}function E(){return document.body.clientWidth<window.innerWidth}function S(){var e=window.getComputedStyle(document.body,null);return parseInt(e&&e.getPropertyValue("padding-right")||0,10)}function O(){var e=j(),t=document.querySelectorAll(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top")[0],n=t?parseInt(t.style.paddingRight||0,10):0;E()&&C(n+e)}function N(e,t){return void 0===e&&(e=""),void 0===t&&(t=c),t?e.split(" ").map((function(e){return t[e]||e})).join(" "):e}function T(e,t){var n={};return Object.keys(e).forEach((function(o){-1===t.indexOf(o)&&(n[o]=e[o])})),n}function M(e,t){for(var n,o=Array.isArray(t)?t:[t],r=o.length,i={};r>0;)i[n=o[r-=1]]=e[n];return i}var k={};function R(e){k[e]||("undefined"!=typeof console&&console.error(e),k[e]=!0)}function P(e,t){return function(n,o,r){return null!==n[o]&&void 0!==n[o]&&R('"'+o+'" property of "'+r+'" has been deprecated.\n'+t),e.apply(void 0,[n,o,r].concat([].slice.call(arguments,3)))}}var I="object"==typeof window&&window.Element||function(){};function A(e,t,n){if(!(e[t]instanceof I))return new Error("Invalid prop `"+t+"` supplied to `"+n+"`. Expected prop to be an instance of Element. Validation failed.")}var D=h.default.oneOfType([h.default.string,h.default.func,A,h.default.shape({current:h.default.any})]),B=h.default.oneOfType([h.default.func,h.default.string,h.default.shape({$$typeof:h.default.symbol,render:h.default.func}),h.default.arrayOf(h.default.oneOfType([h.default.func,h.default.string,h.default.shape({$$typeof:h.default.symbol,render:h.default.func})]))]),F={Fade:150,Collapse:350,Modal:300,Carousel:600,Offcanvas:300},L=["in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","onEnter","onEntering","onEntered","onExit","onExiting","onExited"],U={ENTERING:"entering",ENTERED:"entered",EXITING:"exiting",EXITED:"exited"},K={esc:27,space:32,enter:13,tab:9,up:38,down:40,home:36,end:35,n:78,p:80},W=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],H=!("undefined"==typeof window||!window.document||!window.document.createElement);function z(e){return!(!e||"object"!=typeof e)&&"current"in e}function V(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":Object.prototype.toString.call(e)}function q(e){var t=typeof e;return null!=e&&("object"===t||"function"===t)}function $(e){var t=typeof e;if("number"===t)return e;if("symbol"===t||"object"===t&&"[object Symbol]"===V(e))return NaN;if(q(e)){var n="function"==typeof e.valueOf?e.valueOf():e;e=q(n)?""+n:n}if("string"!==t)return 0===e?e:+e;e=e.replace(/^\s+|\s+$/g,"");var o=/^0b[01]+$/i.test(e);return o||/^0o[0-7]+$/i.test(e)?parseInt(e.slice(2),o?2:8):/^[-+]0x[0-9a-f]+$/i.test(e)?NaN:+e}function J(e){if(!q(e))return!1;var t=V(e);return"[object Function]"===t||"[object AsyncFunction]"===t||"[object GeneratorFunction]"===t||"[object Proxy]"===t}function G(e){if(z(e))return e.current;if(J(e))return e();if("string"==typeof e&&H){var t=document.querySelectorAll(e);if(t.length||(t=document.querySelectorAll("#"+e)),!t.length)throw new Error("The target '"+e+"' could not be identified in the dom, tip: check spelling");return t}return e}function Y(e){return null!==e&&(Array.isArray(e)||H&&"number"==typeof e.length)}function Z(e,t){var n=G(e);return t?Y(n)?n:null===n?[]:[n]:Y(n)?n[0]:n}var X=["touchstart","click"];function Q(e,t,n,o){var r=e;Y(r)||(r=[r]);var i=n;if("string"==typeof i&&(i=i.split(/\s+/)),!Y(r)||"function"!=typeof t||!Array.isArray(i))throw new Error("\n      The first argument of this function must be DOM node or an array on DOM nodes or NodeList.\n      The second must be a function.\n      The third is a string or an array of strings that represents DOM events\n    ");return Array.prototype.forEach.call(i,(function(e){Array.prototype.forEach.call(r,(function(n){n.addEventListener(e,t,o)}))})),function(){Array.prototype.forEach.call(i,(function(e){Array.prototype.forEach.call(r,(function(n){n.removeEventListener(e,t,o)}))}))}}var ee=["a[href]","area[href]","input:not([disabled]):not([type=hidden])","select:not([disabled])","textarea:not([disabled])","button:not([disabled])","object","embed","[tabindex]:not(.modal)","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'],te={__proto__:null,getScrollbarWidth:j,setScrollbarWidth:C,isBodyOverflowing:E,getOriginalBodyPadding:S,conditionallyUpdateScrollbar:O,setGlobalCssModule:function(e){c=e},mapToCssModules:N,omit:T,pick:M,warnOnce:R,deprecated:P,DOMElement:A,targetPropType:D,tagPropType:B,TransitionTimeouts:F,TransitionPropTypeKeys:L,TransitionStatuses:U,keyCodes:K,PopperPlacements:W,canUseDOM:H,isReactRefObj:z,isObject:q,toNumber:$,isFunction:J,findDOMElements:G,isArrayOrNodeList:Y,getTarget:Z,defaultToggleEvents:X,addMultipleEventListeners:Q,focusableElements:ee},ne=["className","cssModule","fluid","tag"],oe={tag:B,fluid:h.default.oneOfType([h.default.bool,h.default.string]),className:h.default.string,cssModule:h.default.object};function re(e){var t=e.className,n=e.cssModule,o=e.fluid,r=e.tag,i=_(e,ne),s="container";!0===o?s="container-fluid":o&&(s="container-"+o);var a=N(f.default(t,s),n);return d.default.createElement(r,b({},i,{className:a}))}re.propTypes=oe,re.defaultProps={tag:"div"};var ie=["className","cssModule","noGutters","tag","widths"],se=h.default.oneOfType([h.default.number,h.default.string]),ae={tag:B,noGutters:P(h.default.bool,"Please use Bootstrap 5 gutter utility classes. https://getbootstrap.com/docs/5.0/layout/gutters/"),className:h.default.string,cssModule:h.default.object,xs:se,sm:se,md:se,lg:se,xl:se,xxl:se,widths:h.default.array};function le(e){var t=e.className,n=e.cssModule,o=e.noGutters,r=e.tag,i=e.widths,s=_(e,ie),a=[];i.forEach((function(t,n){var o=e[t];if(delete s[t],o){var r=!n;a.push(r?"row-cols-"+o:"row-cols-"+t+"-"+o)}}));var l=N(f.default(t,o?"gx-0":null,"row",a),n);return d.default.createElement(r,b({},s,{className:l}))}le.propTypes=ae,le.defaultProps={tag:"div",widths:["xs","sm","md","lg","xl","xxl"]};var ue=["className","cssModule","widths","tag"],ce=["xs","sm","md","lg","xl","xxl"],de=h.default.oneOfType([h.default.number,h.default.string]),he=h.default.oneOfType([h.default.bool,h.default.number,h.default.string,h.default.shape({size:h.default.oneOfType([h.default.bool,h.default.number,h.default.string]),order:de,offset:de})]),fe={tag:B,xs:he,sm:he,md:he,lg:he,xl:he,xxl:he,className:h.default.string,cssModule:h.default.object,widths:h.default.array},pe={tag:"div",widths:ce},me=function(e,t,n){return!0===n||""===n?e?"col":"col-"+t:"auto"===n?e?"col-auto":"col-"+t+"-auto":e?"col-"+n:"col-"+t+"-"+n},ge=function(e,t,n){void 0===n&&(n=ce);var o=e,r=[];return n.forEach((function(e,n){var i=o[e];if(delete o[e],i||""===i){var s=!n;if(q(i)){var a,l=s?"-":"-"+e+"-",u=me(s,e,i.size);r.push(N(f.default(((a={})[u]=i.size||""===i.size,a["order"+l+i.order]=i.order||0===i.order,a["offset"+l+i.offset]=i.offset||0===i.offset,a)),t))}else{var c=me(s,e,i);r.push(c)}}})),{colClasses:r,modifiedAttributes:o}};function ve(e){var t=e.className,n=e.cssModule,o=e.widths,r=e.tag,i=_(e,ue),s=ge(i,n,o),a=s.modifiedAttributes,l=s.colClasses;l.length||l.push("col");var u=N(f.default(t,l),n);return d.default.createElement(r,b({},a,{className:u}))}ve.propTypes=fe,ve.defaultProps=pe;var be=["expand","className","cssModule","light","dark","fixed","sticky","color","container","tag","children"],ye={children:h.default.node,className:h.default.string,color:h.default.string,container:h.default.oneOfType([h.default.bool,h.default.string]),cssModule:h.default.object,dark:h.default.bool,expand:h.default.oneOfType([h.default.bool,h.default.string]),fixed:h.default.string,full:h.default.bool,light:h.default.bool,role:h.default.string,sticky:h.default.string,tag:B};function xe(e){var t,n=e.expand,o=e.className,r=e.cssModule,i=e.light,s=e.dark,a=e.fixed,l=e.sticky,u=e.color,c=e.container,h=e.tag,p=e.children,m=_(e,be),g=N(f.default(o,"navbar",function(e){return!1!==e&&(!0===e||"xs"===e?"navbar-expand":"navbar-expand-"+e)}(n),((t={"navbar-light":i,"navbar-dark":s})["bg-"+u]=u,t["fixed-"+a]=a,t["sticky-"+l]=l,t)),r),v=c&&!0===c?"container":"container-"+c;return d.default.createElement(h,b({},m,{className:g}),c?d.default.createElement("div",{className:v},p):p)}xe.propTypes=ye,xe.defaultProps={tag:"nav",expand:!1,container:"fluid"};var _e=["className","cssModule","tag"],we={className:h.default.string,cssModule:h.default.object,tag:B};function je(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,_e),i=N(f.default(t,"navbar-brand"),n);return d.default.createElement(o,b({},r,{className:i}))}je.propTypes=we,je.defaultProps={tag:"a"};var Ce=["className","cssModule","active","tag"],Ee={className:h.default.string,cssModule:h.default.object,tag:B,active:h.default.bool};function Se(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,Ce),i=N(f.default(t,"navbar-text"),n);return d.default.createElement(o,b({},r,{className:i}))}Se.propTypes=Ee,Se.defaultProps={tag:"span"};var Oe=["className","cssModule","children","tag"],Ne={className:h.default.string,cssModule:h.default.object,tag:B,type:h.default.string,children:h.default.node};function Te(e){var t=e.className,n=e.cssModule,o=e.children,r=e.tag,i=_(e,Oe),s=N(f.default(t,"navbar-toggler"),n);return d.default.createElement(r,b({"aria-label":"Toggle navigation"},i,{className:s}),o||d.default.createElement("span",{className:N("navbar-toggler-icon",n)}))}Te.propTypes=Ne,Te.defaultProps={tag:"button",type:"button"};var Me=["className","cssModule","tabs","pills","vertical","horizontal","justified","fill","navbar","card","tag"],ke={card:h.default.bool,className:h.default.string,cssModule:h.default.object,fill:h.default.bool,horizontal:h.default.oneOf(["center","end"]),justified:h.default.bool,navbar:h.default.bool,pills:h.default.bool,tabs:h.default.bool,tag:B,vertical:h.default.oneOfType([h.default.bool,h.default.string])};function Re(e){var t=e.className,n=e.cssModule,o=e.tabs,r=e.pills,i=e.vertical,s=e.horizontal,a=e.justified,l=e.fill,u=e.navbar,c=e.card,h=e.tag,p=_(e,Me),m=N(f.default(t,u?"navbar-nav":"nav",!!s&&"justify-content-"+s,function(e){return!1!==e&&(!0===e||"xs"===e?"flex-column":"flex-"+e+"-column")}(i),{"nav-tabs":o,"card-header-tabs":c&&o,"nav-pills":r,"card-header-pills":c&&r,"nav-justified":a,"nav-fill":l}),n);return d.default.createElement(h,b({},p,{className:m}))}Re.propTypes=ke,Re.defaultProps={tag:"ul",vertical:!1};var Pe=["className","cssModule","active","tag"],Ie={active:h.default.bool,className:h.default.string,cssModule:h.default.object,tag:B};function Ae(e){var t=e.className,n=e.cssModule,o=e.active,r=e.tag,i=_(e,Pe),s=N(f.default(t,"nav-item",!!o&&"active"),n);return d.default.createElement(r,b({},i,{className:s}))}Ae.propTypes=Ie,Ae.defaultProps={tag:"li"};var De=["className","cssModule","active","tag","innerRef"],Be={active:h.default.bool,className:h.default.string,cssModule:h.default.object,disabled:h.default.bool,href:h.default.any,innerRef:h.default.oneOfType([h.default.object,h.default.func,h.default.string]),onClick:h.default.func,tag:B},Fe=function(e){function t(t){var n;return(n=e.call(this,t)||this).onClick=n.onClick.bind(w(n)),n}y(t,e);var n=t.prototype;return n.onClick=function(e){this.props.disabled?e.preventDefault():("#"===this.props.href&&e.preventDefault(),this.props.onClick&&this.props.onClick(e))},n.render=function(){var e=this.props,t=e.className,n=e.cssModule,o=e.active,r=e.tag,i=e.innerRef,s=_(e,De),a=N(f.default(t,"nav-link",{disabled:s.disabled,active:o}),n);return d.default.createElement(r,b({},s,{ref:i,onClick:this.onClick,className:a}))},t}(d.default.Component);Fe.propTypes=Be,Fe.defaultProps={tag:"a"};var Le=Fe,Ue=["className","listClassName","cssModule","children","tag","listTag","aria-label"],Ke={"aria-label":h.default.string,children:h.default.node,className:h.default.string,cssModule:h.default.object,listClassName:h.default.string,listTag:B,tag:B};function We(e){var t=e.className,n=e.listClassName,o=e.cssModule,r=e.children,i=e.tag,s=e.listTag,a=e["aria-label"],l=_(e,Ue),u=N(f.default(t),o),c=N(f.default("breadcrumb",n),o);return d.default.createElement(i,b({},l,{className:u,"aria-label":a}),d.default.createElement(s,{className:c},r))}We.propTypes=Ke,We.defaultProps={tag:"nav",listTag:"ol","aria-label":"breadcrumb"};var He=["className","cssModule","active","tag"],ze={active:h.default.bool,className:h.default.string,cssModule:h.default.object,tag:B};function Ve(e){var t=e.className,n=e.cssModule,o=e.active,r=e.tag,i=_(e,He),s=N(f.default(t,!!o&&"active","breadcrumb-item"),n);return d.default.createElement(r,b({},i,{className:s,"aria-current":o?"page":void 0}))}Ve.propTypes=ze,Ve.defaultProps={tag:"li"};var qe=["className","cssModule","variant","innerRef"],$e={active:h.default.bool,"aria-label":h.default.string,onClick:h.default.func,variant:h.default.oneOf(["white"]),className:h.default.string,cssModule:h.default.object,innerRef:h.default.oneOfType([h.default.object,h.default.string,h.default.func])};function Je(e){var t=e.className,n=e.variant,o=e.innerRef,r=_(e,qe),i=N(f.default(t,"btn-close",n&&"btn-close-"+n));return d.default.createElement("button",b({ref:o,type:"button",className:i},r))}Je.propTypes=$e,Je.defaultProps={"aria-label":"close"};var Ge=["active","aria-label","block","className","close","cssModule","color","outline","size","tag","innerRef"],Ye={active:h.default.bool,"aria-label":h.default.string,block:h.default.bool,children:h.default.node,className:h.default.string,cssModule:h.default.object,close:h.default.bool,color:h.default.string,disabled:h.default.bool,innerRef:h.default.oneOfType([h.default.object,h.default.func,h.default.string]),onClick:h.default.func,outline:h.default.bool,size:h.default.string,tag:B};function Ze(e){var t=o.useCallback((function(t){if(!e.disabled)return e.onClick?e.onClick(t):void 0;t.preventDefault()}),[e.onClick,e.disabled]),n=e.active,r=e["aria-label"],i=e.block,s=e.className,a=e.close,l=e.cssModule,u=e.color,c=e.outline,h=e.size,p=e.tag,m=e.innerRef,g=_(e,Ge);if(a)return d.default.createElement(Je,g);var v="btn"+(c?"-outline":"")+"-"+u,y=N(f.default(s,"btn",v,!!h&&"btn-"+h,!!i&&"d-block w-100",{active:n,disabled:e.disabled}),l);return g.href&&"button"===p&&(p="a"),d.default.createElement(p,b({type:"button"===p&&g.onClick?"button":void 0},g,{className:y,ref:m,onClick:t,"aria-label":r}))}Ze.propTypes=Ye,Ze.defaultProps={color:"secondary",tag:"button"};var Xe=["className"],Qe={onClick:h.default.func,onBlur:h.default.func,onFocus:h.default.func,defaultValue:h.default.bool,className:h.default.string,cssModule:h.default.object};function et(e){var t=o.useState(e.defaultValue),n=t[0],r=t[1],i=o.useState(!1),s=i[0],a=i[1],l=o.useCallback((function(t){e.onBlur&&e.onBlur(t),a(!1)}),[e.onBlur]),u=o.useCallback((function(t){e.onFocus&&e.onFocus(t),a(!0)}),[e.onFocus]),c=o.useCallback((function(t){e.onClick&&e.onClick(t),r(!n)}),[e.onClick]),h=e.className,p=_(e,Xe),m=N(f.default(h,{focus:s}),e.cssModule);return d.default.createElement(Ze,b({active:n,onBlur:l,onFocus:u,onClick:c,className:m},p))}et.propTypes=Qe,et.defaultProps={defaultValue:!1};var tt=d.default.createContext({}),nt=["className","cssModule","direction","isOpen","group","size","nav","setActiveFromChild","active","tag","menuRole"],ot={a11y:h.default.bool,disabled:h.default.bool,direction:h.default.oneOf(["up","down","start","end","left","right"]),group:h.default.bool,isOpen:h.default.bool,nav:h.default.bool,active:h.default.bool,size:h.default.string,tag:B,toggle:h.default.func,children:h.default.node,className:h.default.string,cssModule:h.default.object,dropup:h.default.bool,inNavbar:h.default.bool,setActiveFromChild:h.default.bool,menuRole:h.default.oneOf(["listbox","menu"])},rt=[K.space,K.enter,K.up,K.down,K.end,K.home],it=function(e){function t(t){var n;return(n=e.call(this,t)||this).addEvents=n.addEvents.bind(w(n)),n.handleDocumentClick=n.handleDocumentClick.bind(w(n)),n.handleKeyDown=n.handleKeyDown.bind(w(n)),n.removeEvents=n.removeEvents.bind(w(n)),n.toggle=n.toggle.bind(w(n)),n.handleMenuRef=n.handleMenuRef.bind(w(n)),n.containerRef=d.default.createRef(),n.menuRef=d.default.createRef(),n}y(t,e);var n=t.prototype;return n.componentDidMount=function(){this.handleProps()},n.componentDidUpdate=function(e){this.props.isOpen!==e.isOpen&&this.handleProps()},n.componentWillUnmount=function(){this.removeEvents()},n.handleMenuRef=function(e){this.menuRef.current=e},n.handleDocumentClick=function(e){if(!e||3!==e.which&&("keyup"!==e.type||e.which===K.tab)){var t=this.getContainer(),n=this.getMenu(),o=t.contains(e.target)&&t!==e.target,r=t.classList.contains("input-group")&&t.classList.contains("dropdown")&&"INPUT"===e.target.tagName,i=n&&n.contains(e.target)&&n!==e.target;(!(o&&!r||i)||"keyup"===e.type&&e.which!==K.tab)&&this.toggle(e)}},n.handleKeyDown=function(e){var t=this,n="menuitem"===e.target.getAttribute("role")||"option"===e.target.getAttribute("role"),o=this.getMenuCtrl()===e.target,r=K.tab===e.which;if(!(/input|textarea/i.test(e.target.tagName)||r&&!this.props.a11y||r&&!n&&!o)&&((-1!==rt.indexOf(e.which)||e.which>=48&&e.which<=90)&&e.preventDefault(),!this.props.disabled&&(o&&([K.space,K.enter,K.up,K.down].indexOf(e.which)>-1?(this.props.isOpen||this.toggle(e),setTimeout((function(){return t.getMenuItems()[0].focus()}))):this.props.isOpen&&r?(e.preventDefault(),this.getMenuItems()[0].focus()):this.props.isOpen&&e.which===K.esc&&this.toggle(e)),this.props.isOpen&&n)))if([K.tab,K.esc].indexOf(e.which)>-1)this.toggle(e),this.getMenuCtrl().focus();else if([K.space,K.enter].indexOf(e.which)>-1)e.target.click(),this.getMenuCtrl().focus();else if([K.down,K.up].indexOf(e.which)>-1||[K.n,K.p].indexOf(e.which)>-1&&e.ctrlKey){var i=this.getMenuItems(),s=i.indexOf(e.target);K.up===e.which||K.p===e.which&&e.ctrlKey?s=0!==s?s-1:i.length-1:(K.down===e.which||K.n===e.which&&e.ctrlKey)&&(s=s===i.length-1?0:s+1),i[s].focus()}else if(K.end===e.which){var a=this.getMenuItems();a[a.length-1].focus()}else if(K.home===e.which)this.getMenuItems()[0].focus();else if(e.which>=48&&e.which<=90)for(var l=this.getMenuItems(),u=String.fromCharCode(e.which).toLowerCase(),c=0;c<l.length;c+=1)if((l[c].textContent&&l[c].textContent[0].toLowerCase())===u){l[c].focus();break}},n.handleProps=function(){this.props.isOpen?this.addEvents():this.removeEvents()},n.getContainer=function(){return this.containerRef.current},n.getMenu=function(){return this.menuRef.current},n.getMenuCtrl=function(){return this._$menuCtrl||(this._$menuCtrl=this.getContainer().querySelector("[aria-expanded]")),this._$menuCtrl},n.getItemType=function(){return"listbox"===this.context.menuRole?"option":"menuitem"},n.getContextValue=function(){return{toggle:this.toggle,isOpen:this.props.isOpen,direction:"down"===this.props.direction&&this.props.dropup?"up":this.props.direction,inNavbar:this.props.inNavbar,disabled:this.props.disabled,onMenuRef:this.handleMenuRef,menuRole:this.props.menuRole}},n.getMenuItems=function(){var e=this.getMenu()||this.getContainer();return[].slice.call(e.querySelectorAll('[role="'+this.getItemType()+'"]'))},n.addEvents=function(){var e=this;["click","touchstart","keyup"].forEach((function(t){return document.addEventListener(t,e.handleDocumentClick,!0)}))},n.removeEvents=function(){var e=this;["click","touchstart","keyup"].forEach((function(t){return document.removeEventListener(t,e.handleDocumentClick,!0)}))},n.toggle=function(e){return this.props.disabled?e&&e.preventDefault():this.props.toggle(e)},n.render=function(){var e,t,n=T(this.props,["toggle","disabled","inNavbar","a11y"]),o=n.className,r=n.cssModule,i=n.direction,a=n.isOpen,l=n.group,u=n.size,c=n.nav,h=n.setActiveFromChild,p=n.active,m=n.tag,g=_(n,nt),v=m||(c?"li":"div"),y=!1;h&&d.default.Children.map(this.props.children[1].props.children,(function(e){e&&e.props.active&&(y=!0)}));var x=N(f.default(o,!(!c||!p)&&"active",!(!h||!y)&&"active",((e={"btn-group":l})["btn-group-"+u]=!!u,e.dropdown=!l,e.dropup="up"===i,e.dropstart="start"===i||"left"===i,e.dropend="end"===i||"right"===i,e.show=a,e["nav-item"]=c,e)),r);return d.default.createElement(tt.Provider,{value:this.getContextValue()},d.default.createElement(s.Manager,null,d.default.createElement(v,b({},g,((t={})["string"==typeof v?"ref":"innerRef"]=this.containerRef,t),{onKeyDown:this.handleKeyDown,className:x}))))},t}(d.default.Component);it.propTypes=ot,it.defaultProps={a11y:!0,isOpen:!1,direction:"down",nav:!1,active:!1,inNavbar:!1,setActiveFromChild:!1};var st=it,at={children:h.default.node};function lt(e){return d.default.createElement(st,b({group:!0},e))}lt.propTypes=at;var ut=["className","cssModule","size","vertical","tag"],ct={"aria-label":h.default.string,className:h.default.string,cssModule:h.default.object,role:h.default.string,size:h.default.string,tag:B,vertical:h.default.bool};function dt(e){var t=e.className,n=e.cssModule,o=e.size,r=e.vertical,i=e.tag,s=_(e,ut),a=N(f.default(t,!!o&&"btn-group-"+o,r?"btn-group-vertical":"btn-group"),n);return d.default.createElement(i,b({},s,{className:a}))}dt.propTypes=ct,dt.defaultProps={tag:"div",role:"group"};var ht=["className","cssModule","tag"],ft={"aria-label":h.default.string,className:h.default.string,cssModule:h.default.object,role:h.default.string,tag:B};function pt(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,ht),i=N(f.default(t,"btn-toolbar"),n);return d.default.createElement(o,b({},r,{className:i}))}pt.propTypes=ft,pt.defaultProps={tag:"div",role:"toolbar"};var mt=["className","cssModule","divider","tag","header","active","text"],gt={children:h.default.node,active:h.default.bool,disabled:h.default.bool,divider:h.default.bool,tag:B,header:h.default.bool,onClick:h.default.func,className:h.default.string,cssModule:h.default.object,toggle:h.default.bool,text:h.default.bool},vt=function(e){function t(t){var n;return(n=e.call(this,t)||this).onClick=n.onClick.bind(w(n)),n.getTabIndex=n.getTabIndex.bind(w(n)),n}y(t,e);var n=t.prototype;return n.onClick=function(e){var t=this.props,n=t.disabled,o=t.header,r=t.divider,i=t.text;n||o||r||i?e.preventDefault():(this.props.onClick&&this.props.onClick(e),this.props.toggle&&this.context.toggle(e))},n.getRole=function(){return"listbox"===this.context.menuRole?"option":"menuitem"},n.getTabIndex=function(){var e=this.props,t=e.disabled,n=e.header,o=e.divider,r=e.text;return t||n||o||r?"-1":"0"},n.render=function(){var e=this.getTabIndex(),t=e>-1?this.getRole():void 0,n=T(this.props,["toggle"]),o=n.className,r=n.cssModule,i=n.divider,s=n.tag,a=n.header,l=n.active,u=n.text,c=_(n,mt),h=N(f.default(o,{disabled:c.disabled,"dropdown-item":!i&&!a&&!u,active:l,"dropdown-header":a,"dropdown-divider":i,"dropdown-item-text":u}),r);return"button"===s&&(a?s="h6":i?s="div":c.href?s="a":u&&(s="span")),d.default.createElement(s,b({type:"button"===s&&(c.onClick||this.props.toggle)?"button":void 0},c,{tabIndex:e,role:t,className:h,onClick:this.onClick}))},t}(d.default.Component);vt.propTypes=gt,vt.defaultProps={tag:"button",toggle:!0},vt.contextType=tt;var bt=vt,yt=["className","cssModule","dark","end","right","tag","flip","modifiers","persist","strategy","container","updateOnSelect"],xt={tag:B,children:h.default.node.isRequired,dark:h.default.bool,end:h.default.bool,flip:h.default.bool,modifiers:h.default.array,className:h.default.string,cssModule:h.default.object,style:h.default.object,persist:h.default.bool,strategy:h.default.string,container:D,updateOnSelect:h.default.bool,right:P(h.default.bool,'Please use "end" instead.')},_t={up:"top",left:"left",right:"right",start:"left",end:"right",down:"bottom"},wt=function(e){function t(){return e.apply(this,arguments)||this}y(t,e);var n=t.prototype;return n.getRole=function(){return"listbox"===this.context.menuRole?"listbox":"menu"},n.render=function(){var e=this,t=this.props,n=t.className,o=t.cssModule,r=t.dark,i=t.end,a=t.right,l=t.tag,u=t.flip,c=t.modifiers,h=t.persist,m=t.strategy,v=t.container,y=t.updateOnSelect,x=_(t,yt),w=N(f.default(n,"dropdown-menu",{"dropdown-menu-dark":r,"dropdown-menu-end":i||a,show:this.context.isOpen}),o),j=l;if(h||this.context.isOpen&&!this.context.inNavbar){var C=(_t[this.context.direction]||"bottom")+"-"+(i||a?"end":"start"),E=[].concat(c,[{name:"flip",enabled:!!u}]),S=d.default.createElement(s.Popper,{placement:C,modifiers:E,strategy:m},(function(t){var n=t.ref,o=t.style,r=t.placement,i=t.update,s=g(g({},e.props.style),o);return d.default.createElement(j,b({tabIndex:"-1",role:e.getRole(),ref:function(t){n(t);var o=e.context.onMenuRef;o&&o(t)}},x,{style:s,"aria-hidden":!e.context.isOpen,className:w,"data-popper-placement":r,onClick:function(){return y&&i()}}))}));return v?p.default.createPortal(S,Z(v)):S}return d.default.createElement(j,b({tabIndex:"-1",role:this.getRole()},x,{"aria-hidden":!this.context.isOpen,className:w,"data-popper-placement":x.placement}))},t}(d.default.Component);wt.propTypes=xt,wt.defaultProps={tag:"div",flip:!0,modifiers:[]},wt.contextType=tt;var jt=wt,Ct=["className","color","cssModule","caret","split","nav","tag","innerRef"],Et={caret:h.default.bool,color:h.default.string,children:h.default.node,className:h.default.string,cssModule:h.default.object,disabled:h.default.bool,onClick:h.default.func,"aria-haspopup":h.default.bool,split:h.default.bool,tag:B,nav:h.default.bool,innerRef:h.default.oneOfType([h.default.object,h.default.string,h.default.func])},St=function(e){function t(t){var n;return(n=e.call(this,t)||this).onClick=n.onClick.bind(w(n)),n}y(t,e);var n=t.prototype;return n.onClick=function(e){this.props.disabled||this.context.disabled?e.preventDefault():(this.props.nav&&!this.props.tag&&e.preventDefault(),this.props.onClick&&this.props.onClick(e),this.context.toggle(e))},n.getRole=function(){return this.context.menuRole||this.props["aria-haspopup"]},n.render=function(){var e,t=this,n=this.props,o=n.className,r=n.color,i=n.cssModule,a=n.caret,l=n.split,u=n.nav,c=n.tag,h=n.innerRef,p=_(n,Ct),m=p["aria-label"]||"Toggle Dropdown",g=N(f.default(o,{"dropdown-toggle":a||l,"dropdown-toggle-split":l,"nav-link":u}),i),v=void 0!==p.children?p.children:d.default.createElement("span",{className:"visually-hidden"},m);return u&&!c?(e="a",p.href="#"):c?e=c:(e=Ze,p.color=r,p.cssModule=i),this.context.inNavbar?d.default.createElement(e,b({},p,{className:g,onClick:this.onClick,"aria-expanded":this.context.isOpen,"aria-haspopup":this.getRole(),children:v})):d.default.createElement(s.Reference,{innerRef:h},(function(n){var o,r=n.ref;return d.default.createElement(e,b({},p,((o={})["string"==typeof e?"ref":"innerRef"]=r,o),{className:g,onClick:t.onClick,"aria-expanded":t.context.isOpen,"aria-haspopup":t.getRole(),children:v}))}))},t}(d.default.Component);St.propTypes=Et,St.defaultProps={color:"secondary","aria-haspopup":!0},St.contextType=tt;var Ot=St,Nt=["tag","baseClass","baseClassActive","className","cssModule","children","innerRef"],Tt=g(g({},l.Transition.propTypes),{},{children:h.default.oneOfType([h.default.arrayOf(h.default.node),h.default.node]),tag:B,baseClass:h.default.string,baseClassActive:h.default.string,className:h.default.string,cssModule:h.default.object,innerRef:h.default.oneOfType([h.default.object,h.default.string,h.default.func])}),Mt=g(g({},l.Transition.defaultProps),{},{tag:"div",baseClass:"fade",baseClassActive:"show",timeout:F.Fade,appear:!0,enter:!0,exit:!0,in:!0});function kt(e){var t=e.tag,n=e.baseClass,o=e.baseClassActive,r=e.className,i=e.cssModule,s=e.children,a=e.innerRef,u=_(e,Nt),c=M(u,L),h=T(u,L);return d.default.createElement(l.Transition,c,(function(e){var l="entered"===e,u=N(f.default(r,n,l&&o),i);return d.default.createElement(t,b({className:u},h,{ref:a}),s)}))}kt.propTypes=Tt,kt.defaultProps=Mt;var Rt=d.default.createContext({}),Pt=["flush","open","toggle","className","cssModule","tag","innerRef"],It={children:h.default.node,className:h.default.string,cssModule:h.default.object,flush:h.default.bool,innerRef:h.default.oneOfType([h.default.object,h.default.string,h.default.func]),open:h.default.oneOfType([h.default.array,h.default.string]).isRequired,tag:B,toggle:h.default.func.isRequired};function At(e){var t=e.flush,n=e.open,r=e.toggle,i=e.className,s=e.cssModule,a=e.tag,l=e.innerRef,u=_(e,Pt),c=N(f.default(i,"accordion",{"accordion-flush":t}),s),h=o.useMemo((function(){return{open:n,toggle:r}}));return d.default.createElement(Rt.Provider,{value:h},d.default.createElement(a,b({},u,{className:c,ref:l})))}At.propTypes=It,At.defaultProps={tag:"div"};var Dt=["defaultOpen","stayOpen"],Bt={tag:B,className:h.default.string,cssModule:h.default.object,innerRef:h.default.oneOfType([h.default.object,h.default.string,h.default.func]),children:h.default.node,defaultOpen:h.default.oneOfType([h.default.array,h.default.string]),stayOpen:h.default.bool};function Ft(e){var t=e.defaultOpen,n=e.stayOpen,r=_(e,Dt),i=o.useState(t||(n?[]:void 0)),s=i[0],a=i[1];return d.default.createElement(At,b({},r,{open:s,toggle:function(e){n?s.includes(e)?a(s.filter((function(t){return t!==e}))):a([].concat(s,[e])):a(s===e?void 0:e)}}))}Ft.propTypes=Bt,Ft.defaultProps={tag:"div"};var Lt=["className","cssModule","tag","innerRef","children","targetId"],Ut={children:h.default.node,className:h.default.string,cssModule:h.default.object,innerRef:h.default.oneOfType([h.default.object,h.default.string,h.default.func]),tag:B,targetId:h.default.string.isRequired};function Kt(e){var t=e.className,n=e.cssModule,r=e.tag,i=e.innerRef,s=e.children,a=e.targetId,l=_(e,Lt),u=o.useContext(Rt),c=u.open,h=u.toggle,p=N(f.default(t,"accordion-header"),n),m=N(f.default("accordion-button",{collapsed:!(Array.isArray(c)?c.includes(a):c===a)}),n);return d.default.createElement(r,b({},l,{className:p,ref:i}),d.default.createElement("button",{type:"button",className:m,onClick:function(){return h(a)}},s))}Kt.propTypes=Ut,Kt.defaultProps={tag:"h2"};var Wt=["className","cssModule","tag","innerRef"],Ht={children:h.default.node,className:h.default.string,cssModule:h.default.object,innerRef:h.default.oneOfType([h.default.object,h.default.string,h.default.func]),tag:B};function zt(e){var t=e.className,n=e.cssModule,o=e.tag,r=e.innerRef,i=_(e,Wt),s=N(f.default(t,"accordion-item"),n);return d.default.createElement(o,b({},i,{className:s,ref:r}))}zt.propTypes=Ht,zt.defaultProps={tag:"div"};var Vt,qt=["tag","horizontal","isOpen","className","navbar","cssModule","children","innerRef"],$t=g(g({},l.Transition.propTypes),{},{horizontal:h.default.bool,isOpen:h.default.bool,children:h.default.oneOfType([h.default.arrayOf(h.default.node),h.default.node]),tag:B,className:h.default.node,navbar:h.default.bool,cssModule:h.default.object,innerRef:h.default.oneOfType([h.default.func,h.default.string,h.default.object])}),Jt=g(g({},l.Transition.defaultProps),{},{horizontal:!1,isOpen:!1,appear:!1,enter:!0,exit:!0,tag:"div",timeout:F.Collapse}),Gt=((Vt={})[U.ENTERING]="collapsing",Vt[U.ENTERED]="collapse show",Vt[U.EXITING]="collapsing",Vt[U.EXITED]="collapse",Vt),Yt=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={dimension:null},["onEntering","onEntered","onExit","onExiting","onExited"].forEach((function(e){n[e]=n[e].bind(w(n))})),n}y(t,e);var n=t.prototype;return n.onEntering=function(e,t){this.setState({dimension:this.getDimension(e)}),this.props.onEntering(e,t)},n.onEntered=function(e,t){this.setState({dimension:null}),this.props.onEntered(e,t)},n.onExit=function(e){this.setState({dimension:this.getDimension(e)}),this.props.onExit(e)},n.onExiting=function(e){this.getDimension(e),this.setState({dimension:0}),this.props.onExiting(e)},n.onExited=function(e){this.setState({dimension:null}),this.props.onExited(e)},n.getDimension=function(e){return this.props.horizontal?e.scrollWidth:e.scrollHeight},n.render=function(){var e=this,t=this.props,n=t.tag,o=t.horizontal,r=t.isOpen,i=t.className,s=t.navbar,a=t.cssModule,u=t.children,c=_(t,qt),h=this.state.dimension,p=M(c,L),m=T(c,L);return d.default.createElement(l.Transition,b({},p,{in:r,onEntering:this.onEntering,onEntered:this.onEntered,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}),(function(t){var r,l=function(e){return Gt[e]||"collapse"}(t),c=N(f.default(i,o&&"collapse-horizontal",l,s&&"navbar-collapse"),a),p=null===h?null:((r={})[o?"width":"height"]=h,r);return d.default.createElement(n,b({},m,{style:g(g({},m.style),p),className:c,ref:e.props.innerRef}),u)}))},t}(o.Component);Yt.propTypes=$t,Yt.defaultProps=Jt;var Zt=Yt,Xt=["className","cssModule","tag","innerRef","children","accordionId"],Qt={accordionId:h.default.string.isRequired,className:h.default.string,children:h.default.node,cssModule:h.default.object,innerRef:h.default.oneOfType([h.default.object,h.default.string,h.default.func]),tag:B};function en(e){var t=e.className,n=e.cssModule,r=e.tag,i=e.innerRef,s=e.children,a=e.accordionId,l=_(e,Xt),u=o.useContext(Rt).open,c=N(f.default(t,"accordion-collapse"),n);return d.default.createElement(Zt,b({},l,{className:c,ref:i,isOpen:Array.isArray(u)?u.includes(a):u===a}),d.default.createElement(r,{className:"accordion-body"},s))}en.propTypes=Qt,en.defaultProps={tag:"div"};var tn=["className","cssModule","color","innerRef","pill","tag"],nn={children:h.default.node,className:h.default.string,color:h.default.string,cssModule:h.default.object,innerRef:h.default.oneOfType([h.default.object,h.default.func,h.default.string]),pill:h.default.bool,tag:B};function on(e){var t=e.className,n=e.cssModule,o=e.color,r=e.innerRef,i=e.pill,s=e.tag,a=_(e,tn),l=N(f.default(t,"badge","bg-"+o,!!i&&"rounded-pill"),n);return a.href&&"span"===s&&(s="a"),d.default.createElement(s,b({},a,{className:l,ref:r}))}on.propTypes=nn,on.defaultProps={color:"secondary",pill:!1,tag:"span"};var rn=["className","cssModule","color","body","inverse","outline","tag","innerRef"],sn={body:h.default.bool,className:h.default.string,color:h.default.string,cssModule:h.default.object,innerRef:h.default.oneOfType([h.default.object,h.default.string,h.default.func]),inverse:h.default.bool,outline:h.default.bool,tag:B};function an(e){var t=e.className,n=e.cssModule,o=e.color,r=e.body,i=e.inverse,s=e.outline,a=e.tag,l=e.innerRef,u=_(e,rn),c=N(f.default(t,"card",!!i&&"text-white",!!r&&"card-body",!!o&&(s?"border":"bg")+"-"+o),n);return d.default.createElement(a,b({},u,{className:c,ref:l}))}an.propTypes=sn,an.defaultProps={tag:"div"};var ln=["className","cssModule","tag"],un={tag:B,className:h.default.string,cssModule:h.default.object};function cn(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,ln),i=N(f.default(t,"card-group"),n);return d.default.createElement(o,b({},r,{className:i}))}cn.propTypes=un,cn.defaultProps={tag:"div"};var dn=["className","cssModule","tag"],hn={tag:B,className:h.default.string,cssModule:h.default.object};function fn(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,dn),i=N(f.default(t,"card-deck"),n);return d.default.createElement(o,b({},r,{className:i}))}fn.propTypes=hn,fn.defaultProps={tag:"div"};var pn=["className","cssModule","tag"],mn={tag:B,className:h.default.string,cssModule:h.default.object};function gn(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,pn),i=N(f.default(t,"card-columns"),n);return d.default.createElement(o,b({},r,{className:i}))}gn.propTypes=mn,gn.defaultProps={tag:"div"};var vn=["className","cssModule","innerRef","tag"],bn={className:h.default.string,cssModule:h.default.object,innerRef:h.default.oneOfType([h.default.object,h.default.string,h.default.func]),tag:B};function yn(e){var t=e.className,n=e.cssModule,o=e.innerRef,r=e.tag,i=_(e,vn),s=N(f.default(t,"card-body"),n);return d.default.createElement(r,b({},i,{className:s,ref:o}))}yn.propTypes=bn,yn.defaultProps={tag:"div"};var xn=["className","cssModule","tag","innerRef"],_n={tag:B,innerRef:h.default.oneOfType([h.default.object,h.default.func,h.default.string]),className:h.default.string,cssModule:h.default.object};function wn(e){var t=e.className,n=e.cssModule,o=e.tag,r=e.innerRef,i=_(e,xn),s=N(f.default(t,"card-link"),n);return d.default.createElement(o,b({},i,{ref:r,className:s}))}wn.propTypes=_n,wn.defaultProps={tag:"a"};var jn=["className","cssModule","tag"],Cn={className:h.default.string,cssModule:h.default.object,tag:B};function En(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,jn),i=N(f.default(t,"card-footer"),n);return d.default.createElement(o,b({},r,{className:i}))}En.propTypes=Cn,En.defaultProps={tag:"div"};var Sn=["className","cssModule","tag"],On={className:h.default.string,cssModule:h.default.object,tag:B};function Nn(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,Sn),i=N(f.default(t,"card-header"),n);return d.default.createElement(o,b({},r,{className:i}))}Nn.propTypes=On,Nn.defaultProps={tag:"div"};var Tn=["className","cssModule","top","bottom","tag"],Mn={bottom:h.default.bool,className:h.default.string,cssModule:h.default.object,tag:B,top:h.default.bool};function kn(e){var t=e.className,n=e.cssModule,o=e.top,r=e.bottom,i=e.tag,s=_(e,Tn),a="card-img";o&&(a="card-img-top"),r&&(a="card-img-bottom");var l=N(f.default(t,a),n);return d.default.createElement(i,b({},s,{className:l}))}kn.propTypes=Mn,kn.defaultProps={tag:"img"};var Rn=["className","cssModule","tag"],Pn={tag:B,className:h.default.string,cssModule:h.default.object};function In(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,Rn),i=N(f.default(t,"card-img-overlay"),n);return d.default.createElement(o,b({},r,{className:i}))}In.propTypes=Pn,In.defaultProps={tag:"div"};var An=["in","children","cssModule","slide","tag","className"],Dn=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={startAnimation:!1},n.onEnter=n.onEnter.bind(w(n)),n.onEntering=n.onEntering.bind(w(n)),n.onExit=n.onExit.bind(w(n)),n.onExiting=n.onExiting.bind(w(n)),n.onExited=n.onExited.bind(w(n)),n}y(t,e);var n=t.prototype;return n.onEnter=function(e,t){this.setState({startAnimation:!1}),this.props.onEnter(e,t)},n.onEntering=function(e,t){var n=e.offsetHeight;return this.setState({startAnimation:!0}),this.props.onEntering(e,t),n},n.onExit=function(e){this.setState({startAnimation:!1}),this.props.onExit(e)},n.onExiting=function(e){this.setState({startAnimation:!0}),e.dispatchEvent(new CustomEvent("slide.bs.carousel")),this.props.onExiting(e)},n.onExited=function(e){e.dispatchEvent(new CustomEvent("slid.bs.carousel")),this.props.onExited(e)},n.render=function(){var e=this,t=this.props,n=t.in,o=t.children,r=t.cssModule,i=t.slide,s=t.tag,a=t.className,u=_(t,An);return d.default.createElement(l.Transition,b({},u,{enter:i,exit:i,in:n,onEnter:this.onEnter,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}),(function(t){var n=e.context.direction,i=t===U.ENTERED||t===U.EXITING,l=(t===U.ENTERING||t===U.EXITING)&&e.state.startAnimation&&("end"===n?"carousel-item-start":"carousel-item-end"),u=t===U.ENTERING&&("end"===n?"carousel-item-next":"carousel-item-prev"),c=N(f.default(a,"carousel-item",i&&"active",l,u),r);return d.default.createElement(s,{className:c},o)}))},t}(d.default.Component);Dn.propTypes=g(g({},l.Transition.propTypes),{},{tag:B,in:h.default.bool,cssModule:h.default.object,children:h.default.node,slide:h.default.bool,className:h.default.string}),Dn.defaultProps=g(g({},l.Transition.defaultProps),{},{tag:"div",timeout:F.Carousel,slide:!0}),Dn.contextTypes={direction:h.default.string};var Bn=Dn,Fn=d.default.createContext({}),Ln=function(e){function t(t){var n;return(n=e.call(this,t)||this).handleKeyPress=n.handleKeyPress.bind(w(n)),n.renderItems=n.renderItems.bind(w(n)),n.hoverStart=n.hoverStart.bind(w(n)),n.hoverEnd=n.hoverEnd.bind(w(n)),n.handleTouchStart=n.handleTouchStart.bind(w(n)),n.handleTouchEnd=n.handleTouchEnd.bind(w(n)),n.touchStartX=0,n.touchStartY=0,n.state={activeIndex:n.props.activeIndex,direction:"end",indicatorClicked:!1},n}y(t,e);var n=t.prototype;return n.componentDidMount=function(){"carousel"===this.props.ride&&this.setInterval(),document.addEventListener("keyup",this.handleKeyPress)},t.getDerivedStateFromProps=function(e,t){var n=null,o=t.activeIndex,r=t.direction,i=t.indicatorClicked;return e.activeIndex!==o&&(e.activeIndex===o+1?r="end":e.activeIndex===o-1?r="start":e.activeIndex<o?r=i?"start":"end":e.activeIndex!==o&&(r=i?"end":"start"),n={activeIndex:e.activeIndex,direction:r,indicatorClicked:!1}),n},n.componentDidUpdate=function(e,t){t.activeIndex!==this.state.activeIndex&&this.setInterval()},n.componentWillUnmount=function(){this.clearInterval(),document.removeEventListener("keyup",this.handleKeyPress)},n.handleKeyPress=function(e){this.props.keyboard&&(37===e.keyCode?this.props.previous():39===e.keyCode&&this.props.next())},n.handleTouchStart=function(e){this.props.enableTouch&&(this.touchStartX=e.changedTouches[0].screenX,this.touchStartY=e.changedTouches[0].screenY)},n.handleTouchEnd=function(e){if(this.props.enableTouch){var t=e.changedTouches[0].screenX,n=e.changedTouches[0].screenY,o=Math.abs(this.touchStartX-t);o<Math.abs(this.touchStartY-n)||o<40||(t<this.touchStartX?this.props.next():this.props.previous())}},n.getContextValue=function(){return{direction:this.state.direction}},n.setInterval=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(){var e=this;this.clearInterval(),this.props.interval&&(this.cycleInterval=setInterval((function(){e.props.next()}),parseInt(this.props.interval,10)))})),n.clearInterval=function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(){clearInterval(this.cycleInterval)})),n.hoverStart=function(){var e;"hover"===this.props.pause&&this.clearInterval(),this.props.mouseEnter&&(e=this.props).mouseEnter.apply(e,[].slice.call(arguments))},n.hoverEnd=function(){var e;"hover"===this.props.pause&&this.setInterval(),this.props.mouseLeave&&(e=this.props).mouseLeave.apply(e,[].slice.call(arguments))},n.renderItems=function(e,t){var n=this,o=this.props.slide;return d.default.createElement("div",{className:t},e.map((function(e,t){var r=t===n.state.activeIndex;return d.default.cloneElement(e,{in:r,slide:o})})))},n.render=function(){var e=this,t=this.props,n=t.cssModule,o=t.slide,r=t.className,i=t.dark,s=t.fade,a=N(f.default(r,"carousel",s&&"carousel-fade",o&&"slide",i&&"carousel-dark"),n),l=N(f.default("carousel-inner"),n),u=this.props.children.filter((function(e){return null!=e&&"boolean"!=typeof e}));if(u.every((function(e){return e.type===Bn})))return d.default.createElement("div",{className:a,onMouseEnter:this.hoverStart,onMouseLeave:this.hoverEnd},d.default.createElement(Fn.Provider,{value:this.getContextValue()},this.renderItems(u,l)));if(u[0]instanceof Array){var c=u[0],h=u[1],p=u[2];return d.default.createElement("div",{className:a,onMouseEnter:this.hoverStart,onMouseLeave:this.hoverEnd},d.default.createElement(Fn.Provider,{value:this.getContextValue()},this.renderItems(c,l),h,p))}var m=u[0],g=d.default.cloneElement(m,{onClickHandler:function(t){"function"==typeof m.props.onClickHandler&&e.setState({indicatorClicked:!0},(function(){return m.props.onClickHandler(t)}))}}),v=u[1],b=u[2],y=u[3];return d.default.createElement("div",{className:a,onMouseEnter:this.hoverStart,onMouseLeave:this.hoverEnd,onTouchStart:this.handleTouchStart,onTouchEnd:this.handleTouchEnd},d.default.createElement(Fn.Provider,{value:this.getContextValue()},g,this.renderItems(v,l),b,y))},t}(d.default.Component);Ln.propTypes={activeIndex:h.default.number,next:h.default.func.isRequired,previous:h.default.func.isRequired,keyboard:h.default.bool,pause:h.default.oneOf(["hover",!1]),ride:h.default.oneOf(["carousel"]),interval:h.default.oneOfType([h.default.number,h.default.string,h.default.bool]),children:h.default.array,mouseEnter:h.default.func,mouseLeave:h.default.func,slide:h.default.bool,dark:h.default.bool,fade:h.default.bool,cssModule:h.default.object,className:h.default.string,enableTouch:h.default.bool},Ln.defaultProps={interval:5e3,pause:"hover",keyboard:!0,slide:!0,enableTouch:!0,fade:!1},Ln.childContextTypes={direction:h.default.string};var Un=Ln;function Kn(e){var t=e.direction,n=e.onClickHandler,o=e.cssModule,r=e.directionText,i=e.className,s=N(f.default(i,"carousel-control-"+t),o),a=N(f.default("carousel-control-"+t+"-icon"),o),l=N(f.default("visually-hidden"),o);return d.default.createElement("a",{className:s,style:{cursor:"pointer"},role:"button",tabIndex:"0",onClick:function(e){e.preventDefault(),n()}},d.default.createElement("span",{className:a,"aria-hidden":"true"}),d.default.createElement("span",{className:l},r||t))}function Wn(e){var t=e.items,n=e.activeIndex,o=e.cssModule,r=e.onClickHandler,i=e.className,s=N(f.default(i,"carousel-indicators"),o),a=t.map((function(e,t){var i=N(f.default({active:n===t}),o);return d.default.createElement("button",{"aria-label":e.caption,"data-bs-target":!0,type:"button",key:""+(e.key||Object.values(e).join("")),onClick:function(e){e.preventDefault(),r(t)},className:i})}));return d.default.createElement("div",{className:s},a)}function Hn(e){var t=e.captionHeader,n=e.captionText,o=e.cssModule,r=e.className,i=N(f.default(r,"carousel-caption","d-none","d-md-block"),o);return d.default.createElement("div",{className:i},d.default.createElement("h3",null,t),d.default.createElement("p",null,n))}Kn.propTypes={direction:h.default.oneOf(["prev","next"]).isRequired,onClickHandler:h.default.func.isRequired,cssModule:h.default.object,directionText:h.default.string,className:h.default.string},Wn.propTypes={activeIndex:h.default.number.isRequired,className:h.default.string,cssModule:h.default.object,items:h.default.array.isRequired,onClickHandler:h.default.func.isRequired},Hn.propTypes={captionHeader:h.default.node,captionText:h.default.node.isRequired,className:h.default.string,cssModule:h.default.object};var zn=["defaultActiveIndex","autoPlay","indicators","controls","items","goToIndex"],Vn={items:h.default.array.isRequired,indicators:h.default.bool,controls:h.default.bool,autoPlay:h.default.bool,defaultActiveIndex:h.default.number,activeIndex:h.default.number,next:h.default.func,previous:h.default.func,goToIndex:h.default.func},qn=function(e){function t(t){var n;return(n=e.call(this,t)||this).animating=!1,n.state={activeIndex:t.defaultActiveIndex||0},n.next=n.next.bind(w(n)),n.previous=n.previous.bind(w(n)),n.goToIndex=n.goToIndex.bind(w(n)),n.onExiting=n.onExiting.bind(w(n)),n.onExited=n.onExited.bind(w(n)),n}y(t,e);var n=t.prototype;return n.onExiting=function(){this.animating=!0},n.onExited=function(){this.animating=!1},n.next=function(){var e=this;this.animating||this.setState((function(t){return{activeIndex:t.activeIndex===e.props.items.length-1?0:t.activeIndex+1}}))},n.previous=function(){var e=this;this.animating||this.setState((function(t){return{activeIndex:0===t.activeIndex?e.props.items.length-1:t.activeIndex-1}}))},n.goToIndex=function(e){this.animating||this.setState({activeIndex:e})},n.render=function(){var e=this,t=this.props,n=t.autoPlay,o=t.indicators,r=t.controls,i=t.items,s=t.goToIndex,a=_(t,zn),l=this.state.activeIndex,u=i.map((function(t){var n=t.key||t.src;return d.default.createElement(Bn,{onExiting:e.onExiting,onExited:e.onExited,key:n},d.default.createElement("img",{className:"d-block w-100",src:t.src,alt:t.altText}),d.default.createElement(Hn,{captionText:t.caption,captionHeader:t.header||t.caption}))}));return d.default.createElement(Un,b({activeIndex:l,next:this.next,previous:this.previous,ride:n?"carousel":void 0},a),o&&d.default.createElement(Wn,{items:i,activeIndex:a.activeIndex||l,onClickHandler:s||this.goToIndex}),u,r&&d.default.createElement(Kn,{direction:"prev",directionText:"Previous",onClickHandler:a.previous||this.previous}),r&&d.default.createElement(Kn,{direction:"next",directionText:"Next",onClickHandler:a.next||this.next}))},t}(o.Component);qn.propTypes=Vn,qn.defaultProps={controls:!0,indicators:!0,autoPlay:!0};var $n=qn,Jn=["className","cssModule","tag"],Gn={className:h.default.string,cssModule:h.default.object,tag:B};function Yn(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,Jn),i=N(f.default(t,"card-subtitle"),n);return d.default.createElement(o,b({},r,{className:i}))}Yn.propTypes=Gn,Yn.defaultProps={tag:"div"};var Zn=["className","cssModule","tag"],Xn={className:h.default.string,cssModule:h.default.object,tag:B};function Qn(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,Zn),i=N(f.default(t,"card-text"),n);return d.default.createElement(o,b({},r,{className:i}))}Qn.propTypes=Xn,Qn.defaultProps={tag:"p"};var eo=["className","cssModule","tag"],to={className:h.default.string,cssModule:h.default.object,tag:B};function no(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,eo),i=N(f.default(t,"card-title"),n);return d.default.createElement(o,b({},r,{className:i}))}no.propTypes=to,no.defaultProps={tag:"div"};var oo=["cssModule","children","isOpen","flip","target","offset","fallbackPlacements","placementPrefix","arrowClassName","hideArrow","popperClassName","tag","container","modifiers","strategy","boundariesElement","onClosed","fade","transition","placement"],ro={children:h.default.oneOfType([h.default.node,h.default.func]).isRequired,popperClassName:h.default.string,placement:h.default.string,placementPrefix:h.default.string,arrowClassName:h.default.string,hideArrow:h.default.bool,tag:B,isOpen:h.default.bool,cssModule:h.default.object,offset:h.default.arrayOf(h.default.number),fallbackPlacements:h.default.array,flip:h.default.bool,container:D,target:D.isRequired,modifiers:h.default.array,strategy:h.default.string,boundariesElement:h.default.oneOfType([h.default.string,A]),onClosed:h.default.func,fade:h.default.bool,transition:h.default.shape(kt.propTypes)},io={boundariesElement:"scrollParent",placement:"auto",hideArrow:!1,isOpen:!1,offset:[0,0],flip:!0,container:"body",modifiers:[],onClosed:function(){},fade:!0,transition:g({},kt.defaultProps)},so=function(e){function t(t){var n;return(n=e.call(this,t)||this).setTargetNode=n.setTargetNode.bind(w(n)),n.getTargetNode=n.getTargetNode.bind(w(n)),n.getRef=n.getRef.bind(w(n)),n.onClosed=n.onClosed.bind(w(n)),n.state={isOpen:t.isOpen},n}y(t,e),t.getDerivedStateFromProps=function(e,t){return e.isOpen&&!t.isOpen?{isOpen:e.isOpen}:null};var n=t.prototype;return n.componentDidUpdate=function(){this._element&&this._element.childNodes&&this._element.childNodes[0]&&this._element.childNodes[0].focus&&this._element.childNodes[0].focus()},n.onClosed=function(){this.props.onClosed(),this.setState({isOpen:!1})},n.getTargetNode=function(){return this.targetNode},n.getContainerNode=function(){return Z(this.props.container)},n.getRef=function(e){this._element=e},n.setTargetNode=function(e){this.targetNode="string"==typeof e?Z(e):e},n.renderChildren=function(){var e=this.props,t=e.cssModule,n=e.children,o=e.isOpen,r=e.flip,i=e.offset,a=e.fallbackPlacements,l=e.placementPrefix,u=e.arrowClassName,c=e.hideArrow,h=e.popperClassName,p=e.tag,m=e.modifiers,v=e.strategy,y=e.boundariesElement,x=e.fade,w=e.transition,j=e.placement,C=_(e,oo),E=N(f.default("arrow",u),t),S=N(f.default(h,l?l+"-auto":""),this.props.cssModule),O=m.map((function(e){return e.name})),T=[{name:"offset",options:{offset:i}},{name:"flip",enabled:r,options:{fallbackPlacements:a}},{name:"preventOverflow",options:{boundary:y}}].filter((function(e){return!O.includes(e.name)})),M=[].concat(T,m),k=g(g(g({},kt.defaultProps),w),{},{baseClass:x?w.baseClass:"",timeout:x?w.timeout:0});return d.default.createElement(kt,b({},k,C,{in:o,onExited:this.onClosed,tag:p}),d.default.createElement(s.Popper,{referenceElement:this.targetNode,modifiers:M,placement:j,strategy:v},(function(e){var t=e.ref,o=e.style,r=e.placement,i=e.isReferenceHidden,s=e.arrowProps,a=e.update;return d.default.createElement("div",{ref:t,style:o,className:S,"data-popper-placement":r,"data-popper-reference-hidden":i?"true":void 0},"function"==typeof n?n({update:a}):n,!c&&d.default.createElement("span",{ref:s.ref,className:E,style:s.style}))})))},n.render=function(){return this.setTargetNode(this.props.target),this.state.isOpen?"inline"===this.props.container?this.renderChildren():p.default.createPortal(d.default.createElement("div",{ref:this.getRef},this.renderChildren()),this.getContainerNode()):null},t}(d.default.Component);so.propTypes=ro,so.defaultProps=io;var ao=so;function lo(e,t){return t.popperManager.setTargetNode(Z(e.target)),null}lo.contextTypes={popperManager:h.default.object.isRequired},lo.propTypes={target:D.isRequired};var uo={children:h.default.oneOfType([h.default.node,h.default.func]),placement:h.default.oneOf(W),target:D.isRequired,container:D,isOpen:h.default.bool,disabled:h.default.bool,hideArrow:h.default.bool,boundariesElement:h.default.oneOfType([h.default.string,A]),className:h.default.string,innerClassName:h.default.string,arrowClassName:h.default.string,popperClassName:h.default.string,cssModule:h.default.object,toggle:h.default.func,autohide:h.default.bool,placementPrefix:h.default.string,delay:h.default.oneOfType([h.default.shape({show:h.default.number,hide:h.default.number}),h.default.number]),modifiers:h.default.array,strategy:h.default.string,offset:h.default.arrayOf(h.default.number),innerRef:h.default.oneOfType([h.default.func,h.default.string,h.default.object]),trigger:h.default.string,fade:h.default.bool,flip:h.default.bool},co={show:0,hide:50},ho={isOpen:!1,hideArrow:!1,autohide:!1,delay:co,toggle:function(){},trigger:"click",fade:!0};function fo(e,t){return t&&(e===t||t.contains(e))}function po(e,t){return void 0===t&&(t=[]),t&&t.length&&t.filter((function(t){return fo(e,t)}))[0]}var mo=function(e){function t(t){var n;return(n=e.call(this,t)||this)._targets=[],n.currentTargetElement=null,n.addTargetEvents=n.addTargetEvents.bind(w(n)),n.handleDocumentClick=n.handleDocumentClick.bind(w(n)),n.removeTargetEvents=n.removeTargetEvents.bind(w(n)),n.toggle=n.toggle.bind(w(n)),n.showWithDelay=n.showWithDelay.bind(w(n)),n.hideWithDelay=n.hideWithDelay.bind(w(n)),n.onMouseOverTooltipContent=n.onMouseOverTooltipContent.bind(w(n)),n.onMouseLeaveTooltipContent=n.onMouseLeaveTooltipContent.bind(w(n)),n.show=n.show.bind(w(n)),n.hide=n.hide.bind(w(n)),n.onEscKeyDown=n.onEscKeyDown.bind(w(n)),n.getRef=n.getRef.bind(w(n)),n.state={isOpen:t.isOpen},n._isMounted=!1,n}y(t,e);var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this.updateTarget()},n.componentWillUnmount=function(){this._isMounted=!1,this.removeTargetEvents(),this._targets=null,this.clearShowTimeout(),this.clearHideTimeout()},t.getDerivedStateFromProps=function(e,t){return e.isOpen&&!t.isOpen?{isOpen:e.isOpen}:null},n.handleDocumentClick=function(e){var t=this.props.trigger.split(" ");t.indexOf("legacy")>-1&&(this.props.isOpen||po(e.target,this._targets))?(this._hideTimeout&&this.clearHideTimeout(),this.props.isOpen&&!fo(e.target,this._popover)?this.hideWithDelay(e):this.props.isOpen||this.showWithDelay(e)):t.indexOf("click")>-1&&po(e.target,this._targets)&&(this._hideTimeout&&this.clearHideTimeout(),this.props.isOpen?this.hideWithDelay(e):this.showWithDelay(e))},n.onMouseOverTooltipContent=function(){this.props.trigger.indexOf("hover")>-1&&!this.props.autohide&&(this._hideTimeout&&this.clearHideTimeout(),this.state.isOpen&&!this.props.isOpen&&this.toggle())},n.onMouseLeaveTooltipContent=function(e){this.props.trigger.indexOf("hover")>-1&&!this.props.autohide&&(this._showTimeout&&this.clearShowTimeout(),e.persist(),this._hideTimeout=setTimeout(this.hide.bind(this,e),this.getDelay("hide")))},n.onEscKeyDown=function(e){"Escape"===e.key&&this.hide(e)},n.getRef=function(e){var t=this.props.innerRef;t&&("function"==typeof t?t(e):"object"==typeof t&&(t.current=e)),this._popover=e},n.getDelay=function(e){var t=this.props.delay;return"object"==typeof t?isNaN(t[e])?co[e]:t[e]:t},n.getCurrentTarget=function(e){if(!e)return null;var t=this._targets.indexOf(e);return t>=0?this._targets[t]:this.getCurrentTarget(e.parentElement)},n.show=function(e){if(!this.props.isOpen){if(this.clearShowTimeout(),this.currentTargetElement=e?e.currentTarget||this.getCurrentTarget(e.target):null,e&&e.composedPath&&"function"==typeof e.composedPath){var t=e.composedPath();this.currentTargetElement=t&&t[0]||this.currentTargetElement}this.toggle(e)}},n.showWithDelay=function(e){this._hideTimeout&&this.clearHideTimeout(),this._showTimeout=setTimeout(this.show.bind(this,e),this.getDelay("show"))},n.hide=function(e){this.props.isOpen&&(this.clearHideTimeout(),this.currentTargetElement=null,this.toggle(e))},n.hideWithDelay=function(e){this._showTimeout&&this.clearShowTimeout(),this._hideTimeout=setTimeout(this.hide.bind(this,e),this.getDelay("hide"))},n.clearShowTimeout=function(){clearTimeout(this._showTimeout),this._showTimeout=void 0},n.clearHideTimeout=function(){clearTimeout(this._hideTimeout),this._hideTimeout=void 0},n.addEventOnTargets=function(e,t,n){this._targets.forEach((function(o){o.addEventListener(e,t,n)}))},n.removeEventOnTargets=function(e,t,n){this._targets.forEach((function(o){o.removeEventListener(e,t,n)}))},n.addTargetEvents=function(){if(this.props.trigger){var e=this.props.trigger.split(" ");-1===e.indexOf("manual")&&((e.indexOf("click")>-1||e.indexOf("legacy")>-1)&&document.addEventListener("click",this.handleDocumentClick,!0),this._targets&&this._targets.length&&(e.indexOf("hover")>-1&&(this.addEventOnTargets("mouseover",this.showWithDelay,!0),this.addEventOnTargets("mouseout",this.hideWithDelay,!0)),e.indexOf("focus")>-1&&(this.addEventOnTargets("focusin",this.show,!0),this.addEventOnTargets("focusout",this.hide,!0)),this.addEventOnTargets("keydown",this.onEscKeyDown,!0)))}},n.removeTargetEvents=function(){this._targets&&(this.removeEventOnTargets("mouseover",this.showWithDelay,!0),this.removeEventOnTargets("mouseout",this.hideWithDelay,!0),this.removeEventOnTargets("keydown",this.onEscKeyDown,!0),this.removeEventOnTargets("focusin",this.show,!0),this.removeEventOnTargets("focusout",this.hide,!0)),document.removeEventListener("click",this.handleDocumentClick,!0)},n.updateTarget=function(){var e=Z(this.props.target,!0);e!==this._targets&&(this.removeTargetEvents(),this._targets=e?Array.from(e):[],this.currentTargetElement=this.currentTargetElement||this._targets[0],this.addTargetEvents())},n.toggle=function(e){return this.props.disabled||!this._isMounted?e&&e.preventDefault():this.props.toggle(e)},n.render=function(){var e=this;this.props.isOpen&&this.updateTarget();var t=this.currentTargetElement||this._targets[0];if(!t)return null;var n=this.props,o=n.className,r=n.cssModule,i=n.innerClassName,s=n.isOpen,a=n.hideArrow,l=n.boundariesElement,u=n.placement,c=n.placementPrefix,h=n.arrowClassName,f=n.popperClassName,p=n.container,m=n.modifiers,g=n.strategy,v=n.offset,y=n.fade,x=n.flip,_=n.children,w=T(this.props,Object.keys(uo)),j=N(f,r),C=N(i,r);return d.default.createElement(ao,{className:o,target:t,isOpen:s,hideArrow:a,boundariesElement:l,placement:u,placementPrefix:c,arrowClassName:h,popperClassName:j,container:p,modifiers:m,strategy:g,offset:v,cssModule:r,fade:y,flip:x},(function(t){var n=t.update;return d.default.createElement("div",b({},w,{ref:e.getRef,className:C,role:"tooltip",onMouseOver:e.onMouseOverTooltipContent,onMouseLeave:e.onMouseLeaveTooltipContent,onKeyDown:e.onEscKeyDown}),"function"==typeof _?_({update:n}):_)}))},t}(d.default.Component);mo.propTypes=uo,mo.defaultProps=ho;var go=mo;function vo(e){var t=f.default("popover","show",e.popperClassName),n=f.default("popover-inner",e.innerClassName);return d.default.createElement(go,b({},e,{arrowClassName:"popover-arrow",popperClassName:t,innerClassName:n}))}vo.propTypes=uo,vo.defaultProps={placement:"right",placementPrefix:"bs-popover",trigger:"click",offset:[0,8]};var bo=["defaultOpen"],yo=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={isOpen:t.defaultOpen||!1},n.toggle=n.toggle.bind(w(n)),n}y(t,e);var n=t.prototype;return n.toggle=function(){this.setState((function(e){return{isOpen:!e.isOpen}}))},n.render=function(){return d.default.createElement(vo,b({isOpen:this.state.isOpen,toggle:this.toggle},T(this.props,bo)))},t}(o.Component);yo.propTypes=g({defaultOpen:h.default.bool},vo.propTypes);var xo=["className","cssModule","tag"],_o={tag:B,className:h.default.string,cssModule:h.default.object};function wo(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,xo),i=N(f.default(t,"popover-header"),n);return d.default.createElement(o,b({},r,{className:i}))}wo.propTypes=_o,wo.defaultProps={tag:"h3"};var jo=["className","cssModule","tag"],Co={tag:B,className:h.default.string,cssModule:h.default.object};function Eo(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,jo),i=N(f.default(t,"popover-body"),n);return d.default.createElement(o,b({},r,{className:i}))}Eo.propTypes=Co,Eo.defaultProps={tag:"div"};var So=["children","className","barClassName","cssModule","value","min","max","animated","striped","color","bar","multi","tag","style","barStyle","barAriaValueText","barAriaLabelledBy"],Oo={animated:h.default.bool,bar:h.default.bool,barAriaLabelledBy:h.default.string,barAriaValueText:h.default.string,barClassName:h.default.string,barStyle:h.default.object,children:h.default.node,className:h.default.string,cssModule:h.default.object,color:h.default.string,max:h.default.oneOfType([h.default.string,h.default.number]),min:h.default.oneOfType([h.default.string,h.default.number]),multi:h.default.bool,striped:h.default.bool,style:h.default.object,tag:B,value:h.default.oneOfType([h.default.string,h.default.number])};function No(e){var t=e.children,n=e.className,o=e.barClassName,r=e.cssModule,i=e.value,s=e.min,a=e.max,l=e.animated,u=e.striped,c=e.color,h=e.bar,p=e.multi,m=e.tag,v=e.style,y=e.barStyle,x=e.barAriaValueText,w=e.barAriaLabelledBy,j=_(e,So),C=$(i)/$(a)*100,E=N(f.default(n,"progress"),r),S={className:N(f.default("progress-bar",h&&n||o,l?"progress-bar-animated":null,c?"bg-"+c:null,u||l?"progress-bar-striped":null),r),style:g(g(g({},h?v:{}),y),{},{width:C+"%"}),role:"progressbar","aria-valuenow":i,"aria-valuemin":s,"aria-valuemax":a,"aria-valuetext":x,"aria-labelledby":w,children:t};return h?d.default.createElement(m,b({},j,S)):d.default.createElement(m,b({},j,{style:v,className:E}),p?t:d.default.createElement("div",S))}No.propTypes=Oo,No.defaultProps={tag:"div",value:0,min:0,max:100,style:{},barStyle:{}};var To={children:h.default.node.isRequired,node:h.default.any},Mo=function(e){function t(){return e.apply(this,arguments)||this}y(t,e);var n=t.prototype;return n.componentWillUnmount=function(){this.defaultNode&&document.body.removeChild(this.defaultNode),this.defaultNode=null},n.render=function(){return H?(this.props.node||this.defaultNode||(this.defaultNode=document.createElement("div"),document.body.appendChild(this.defaultNode)),p.default.createPortal(this.props.children,this.props.node||this.defaultNode)):null},t}(d.default.Component);Mo.propTypes=To;var ko=Mo;function Ro(){}var Po=h.default.shape(kt.propTypes),Io={autoFocus:h.default.bool,backdrop:h.default.oneOfType([h.default.bool,h.default.oneOf(["static"])]),backdropClassName:h.default.string,backdropTransition:Po,centered:h.default.bool,children:h.default.node,contentClassName:h.default.string,className:h.default.string,container:D,cssModule:h.default.object,external:h.default.node,fade:h.default.bool,fullscreen:h.default.oneOfType([h.default.bool,h.default.oneOf(["sm","md","lg","xl"])]),innerRef:h.default.oneOfType([h.default.object,h.default.string,h.default.func]),isOpen:h.default.bool,keyboard:h.default.bool,labelledBy:h.default.string,modalClassName:h.default.string,modalTransition:Po,onClosed:h.default.func,onEnter:h.default.func,onExit:h.default.func,onOpened:h.default.func,returnFocusAfterClose:h.default.bool,role:h.default.string,scrollable:h.default.bool,size:h.default.string,toggle:h.default.func,trapFocus:h.default.bool,unmountOnClose:h.default.bool,wrapClassName:h.default.string,zIndex:h.default.oneOfType([h.default.number,h.default.string])},Ao=Object.keys(Io),Do={isOpen:!1,autoFocus:!0,centered:!1,scrollable:!1,role:"dialog",backdrop:!0,keyboard:!0,zIndex:1050,fade:!0,onOpened:Ro,onClosed:Ro,modalTransition:{timeout:F.Modal},backdropTransition:{mountOnEnter:!0,timeout:F.Fade},unmountOnClose:!0,returnFocusAfterClose:!0,container:"body",trapFocus:!1},Bo=function(e){function t(t){var n;return(n=e.call(this,t)||this)._element=null,n._originalBodyPadding=null,n._originalBodyOverflow=null,n.getFocusableChildren=n.getFocusableChildren.bind(w(n)),n.handleBackdropClick=n.handleBackdropClick.bind(w(n)),n.handleBackdropMouseDown=n.handleBackdropMouseDown.bind(w(n)),n.handleEscape=n.handleEscape.bind(w(n)),n.handleStaticBackdropAnimation=n.handleStaticBackdropAnimation.bind(w(n)),n.handleTab=n.handleTab.bind(w(n)),n.onOpened=n.onOpened.bind(w(n)),n.onClosed=n.onClosed.bind(w(n)),n.manageFocusAfterClose=n.manageFocusAfterClose.bind(w(n)),n.clearBackdropAnimationTimeout=n.clearBackdropAnimationTimeout.bind(w(n)),n.trapFocus=n.trapFocus.bind(w(n)),n.state={isOpen:!1,showStaticBackdropAnimation:!1},n}y(t,e);var n=t.prototype;return n.componentDidMount=function(){var e=this.props,t=e.isOpen,n=e.autoFocus,o=e.onEnter;t&&(this.init(),this.setState({isOpen:!0}),n&&this.setFocus()),o&&o(),document.addEventListener("focus",this.trapFocus,!0),this._isMounted=!0},n.componentDidUpdate=function(e,t){if(this.props.isOpen&&!e.isOpen)return this.init(),void this.setState({isOpen:!0});this.props.autoFocus&&this.state.isOpen&&!t.isOpen&&this.setFocus(),this._element&&e.zIndex!==this.props.zIndex&&(this._element.style.zIndex=this.props.zIndex)},n.componentWillUnmount=function(){this.clearBackdropAnimationTimeout(),this.props.onExit&&this.props.onExit(),this._element&&(this.destroy(),(this.props.isOpen||this.state.isOpen)&&this.close()),document.removeEventListener("focus",this.trapFocus,!0),this._isMounted=!1},n.handleBackdropClick=function(e){if(e.target===this._mouseDownElement){e.stopPropagation();var t=this._dialog?this._dialog.parentNode:null;if(t&&e.target===t&&"static"===this.props.backdrop&&this.handleStaticBackdropAnimation(),!this.props.isOpen||!0!==this.props.backdrop)return;t&&e.target===t&&this.props.toggle&&this.props.toggle(e)}},n.handleTab=function(e){if(9===e.which&&!(this.modalIndex<t.openCount-1)){var n=this.getFocusableChildren(),o=n.length;if(0!==o){for(var r=this.getFocusedChild(),i=0,s=0;s<o;s+=1)if(n[s]===r){i=s;break}e.shiftKey&&0===i?(e.preventDefault(),n[o-1].focus()):e.shiftKey||i!==o-1||(e.preventDefault(),n[0].focus())}}},n.handleBackdropMouseDown=function(e){this._mouseDownElement=e.target},n.handleEscape=function(e){this.props.isOpen&&e.keyCode===K.esc&&this.props.toggle&&(this.props.keyboard?(e.preventDefault(),e.stopPropagation(),this.props.toggle(e)):"static"===this.props.backdrop&&(e.preventDefault(),e.stopPropagation(),this.handleStaticBackdropAnimation()))},n.handleStaticBackdropAnimation=function(){var e=this;this.clearBackdropAnimationTimeout(),this.setState({showStaticBackdropAnimation:!0}),this._backdropAnimationTimeout=setTimeout((function(){e.setState({showStaticBackdropAnimation:!1})}),100)},n.onOpened=function(e,t){this.props.onOpened(),(this.props.modalTransition.onEntered||Ro)(e,t)},n.onClosed=function(e){var t=this.props.unmountOnClose;this.props.onClosed(),(this.props.modalTransition.onExited||Ro)(e),t&&this.destroy(),this.close(),this._isMounted&&this.setState({isOpen:!1})},n.setFocus=function(){this._dialog&&this._dialog.parentNode&&"function"==typeof this._dialog.parentNode.focus&&this._dialog.parentNode.focus()},n.getFocusableChildren=function(){return this._element.querySelectorAll(ee.join(", "))},n.getFocusedChild=function(){var e,t=this.getFocusableChildren();try{e=document.activeElement}catch(n){e=t[0]}return e},n.trapFocus=function(e){if(this.props.trapFocus&&this._element&&!(this._dialog&&this._dialog.parentNode===e.target||this.modalIndex<t.openCount-1)){for(var n=this.getFocusableChildren(),o=0;o<n.length;o+=1)if(n[o]===e.target)return;n.length>0&&(e.preventDefault(),e.stopPropagation(),n[0].focus())}},n.init=function(){try{this._triggeringElement=document.activeElement}catch(e){this._triggeringElement=null}this._element||(this._element=document.createElement("div"),this._element.setAttribute("tabindex","-1"),this._element.style.position="relative",this._element.style.zIndex=this.props.zIndex,this._mountContainer=Z(this.props.container),this._mountContainer.appendChild(this._element)),this._originalBodyPadding=S(),this._originalBodyOverflow=window.getComputedStyle(document.body).overflow,O(),0===t.openCount&&(document.body.className=f.default(document.body.className,N("modal-open",this.props.cssModule)),document.body.style.overflow="hidden"),this.modalIndex=t.openCount,t.openCount+=1},n.destroy=function(){this._element&&(this._mountContainer.removeChild(this._element),this._element=null),this.manageFocusAfterClose()},n.manageFocusAfterClose=function(){if(this._triggeringElement){var e=this.props.returnFocusAfterClose;this._triggeringElement.focus&&e&&this._triggeringElement.focus(),this._triggeringElement=null}},n.close=function(){if(t.openCount<=1){var e=N("modal-open",this.props.cssModule),n=new RegExp("(^| )"+e+"( |$)");document.body.className=document.body.className.replace(n," ").trim(),document.body.style.overflow=this._originalBodyOverflow}this.manageFocusAfterClose(),t.openCount=Math.max(0,t.openCount-1),C(this._originalBodyPadding)},n.clearBackdropAnimationTimeout=function(){this._backdropAnimationTimeout&&(clearTimeout(this._backdropAnimationTimeout),this._backdropAnimationTimeout=void 0)},n.renderModalDialog=function(){var e,t=this,n=T(this.props,Ao);return d.default.createElement("div",b({},n,{className:N(f.default("modal-dialog",this.props.className,(e={},e["modal-"+this.props.size]=this.props.size,e["modal-dialog-centered"]=this.props.centered,e["modal-dialog-scrollable"]=this.props.scrollable,e["modal-fullscreen"]=!0===this.props.fullscreen,e["modal-fullscreen-"+this.props.fullscreen+"-down"]="string"==typeof this.props.fullscreen,e)),this.props.cssModule),role:"document",ref:function(e){t._dialog=e}}),d.default.createElement("div",{className:N(f.default("modal-content",this.props.contentClassName),this.props.cssModule)},this.props.children))},n.render=function(){var e=this.props.unmountOnClose;if(this._element&&(this.state.isOpen||!e)){var t=!!this._element&&!this.state.isOpen&&!e;this._element.style.display=t?"none":"block";var n=this.props,o=n.wrapClassName,r=n.modalClassName,i=n.backdropClassName,s=n.cssModule,a=n.isOpen,l=n.backdrop,u=n.role,c=n.labelledBy,h=n.external,p=n.innerRef,m={onClick:this.handleBackdropClick,onMouseDown:this.handleBackdropMouseDown,onKeyUp:this.handleEscape,onKeyDown:this.handleTab,style:{display:"block"},"aria-labelledby":c,role:u,tabIndex:"-1"},v=this.props.fade,y=g(g(g({},kt.defaultProps),this.props.modalTransition),{},{baseClass:v?this.props.modalTransition.baseClass:"",timeout:v?this.props.modalTransition.timeout:0}),x=g(g(g({},kt.defaultProps),this.props.backdropTransition),{},{baseClass:v?this.props.backdropTransition.baseClass:"",timeout:v?this.props.backdropTransition.timeout:0}),_=l&&(v?d.default.createElement(kt,b({},x,{in:a&&!!l,cssModule:s,className:N(f.default("modal-backdrop",i),s)})):d.default.createElement("div",{className:N(f.default("modal-backdrop","show",i),s)}));return d.default.createElement(ko,{node:this._element},d.default.createElement("div",{className:N(o)},d.default.createElement(kt,b({},m,y,{in:a,onEntered:this.onOpened,onExited:this.onClosed,cssModule:s,className:N(f.default("modal",r,this.state.showStaticBackdropAnimation&&"modal-static"),s),innerRef:p}),h,this.renderModalDialog()),_))}return null},t}(d.default.Component);Bo.propTypes=Io,Bo.defaultProps=Do,Bo.openCount=0;var Fo=Bo,Lo=["className","cssModule","children","toggle","tag","wrapTag","closeAriaLabel","close"],Uo={children:h.default.node,className:h.default.string,close:h.default.object,closeAriaLabel:h.default.string,cssModule:h.default.object,tag:B,toggle:h.default.func,wrapTag:B};function Ko(e){var t,n=e.className,o=e.cssModule,r=e.children,i=e.toggle,s=e.tag,a=e.wrapTag,l=e.closeAriaLabel,u=e.close,c=_(e,Lo),h=N(f.default(n,"modal-header"),o);return!u&&i&&(t=d.default.createElement("button",{type:"button",onClick:i,className:N("btn-close",o),"aria-label":l})),d.default.createElement(a,b({},c,{className:h}),d.default.createElement(s,{className:N("modal-title",o)},r),u||t)}Ko.propTypes=Uo,Ko.defaultProps={tag:"h5",wrapTag:"div",closeAriaLabel:"Close"};var Wo=["className","cssModule","tag"],Ho={className:h.default.string,cssModule:h.default.object,tag:B};function zo(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,Wo),i=N(f.default(t,"modal-body"),n);return d.default.createElement(o,b({},r,{className:i}))}zo.propTypes=Ho,zo.defaultProps={tag:"div"};var Vo=["className","cssModule","tag"],qo={className:h.default.string,cssModule:h.default.object,tag:B};function $o(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,Vo),i=N(f.default(t,"modal-footer"),n);return d.default.createElement(o,b({},r,{className:i}))}function Jo(e){var t=f.default("tooltip","show",e.popperClassName),n=f.default("tooltip-inner",e.innerClassName);return d.default.createElement(go,b({},e,{arrowClassName:"tooltip-arrow",popperClassName:t,innerClassName:n}))}$o.propTypes=qo,$o.defaultProps={tag:"div"},Jo.propTypes=uo,Jo.defaultProps={placement:"top",autohide:!0,placementPrefix:"bs-tooltip",trigger:"hover focus"};var Go=["className","cssModule","size","bordered","borderless","striped","dark","hover","responsive","tag","responsiveTag","innerRef"],Yo={bordered:h.default.bool,borderless:h.default.bool,className:h.default.string,cssModule:h.default.object,dark:h.default.bool,hover:h.default.bool,innerRef:h.default.oneOfType([h.default.func,h.default.string,h.default.object]),responsive:h.default.oneOfType([h.default.bool,h.default.string]),responsiveTag:B,size:h.default.string,striped:h.default.bool,tag:B};function Zo(e){var t=e.className,n=e.cssModule,o=e.size,r=e.bordered,i=e.borderless,s=e.striped,a=e.dark,l=e.hover,u=e.responsive,c=e.tag,h=e.responsiveTag,p=e.innerRef,m=_(e,Go),g=N(f.default(t,"table",!!o&&"table-"+o,!!r&&"table-bordered",!!i&&"table-borderless",!!s&&"table-striped",!!a&&"table-dark",!!l&&"table-hover"),n),v=d.default.createElement(c,b({},m,{ref:p,className:g}));if(u){var y=N(!0===u?"table-responsive":"table-responsive-"+u,n);return d.default.createElement(h,{className:y},v)}return v}Zo.propTypes=Yo,Zo.defaultProps={tag:"table",responsiveTag:"div"};var Xo=["className","cssModule","tag","flush","horizontal","numbered"],Qo={className:h.default.string,cssModule:h.default.object,flush:h.default.bool,horizontal:h.default.oneOfType([h.default.bool,h.default.string]),numbered:h.default.bool,tag:B};function er(e){var t=e.className,n=e.cssModule,o=e.tag,r=e.flush,i=e.horizontal,s=e.numbered,a=_(e,Xo),l=N(f.default(t,"list-group",r?"list-group-flush":function(e){return!1!==e&&(!0===e||"xs"===e?"list-group-horizontal":"list-group-horizontal-"+e)}(i),{"list-group-numbered":s}),n);return d.default.createElement(o,b({},a,{className:l}))}er.propTypes=Qo,er.defaultProps={tag:"ul",horizontal:!1,numbered:!1};var tr=["className","cssModule","inline","tag","innerRef"],nr={children:h.default.node,inline:h.default.bool,tag:B,innerRef:h.default.oneOfType([h.default.object,h.default.func,h.default.string]),className:h.default.string,cssModule:h.default.object},or=function(e){function t(t){var n;return(n=e.call(this,t)||this).getRef=n.getRef.bind(w(n)),n.submit=n.submit.bind(w(n)),n}y(t,e);var n=t.prototype;return n.getRef=function(e){this.props.innerRef&&this.props.innerRef(e),this.ref=e},n.submit=function(){this.ref&&this.ref.submit()},n.render=function(){var e=this.props,t=e.className,n=e.cssModule,o=e.inline,r=e.tag,i=e.innerRef,s=_(e,tr),a=N(f.default(t,!!o&&"form-inline"),n);return d.default.createElement(r,b({},s,{ref:i,className:a}))},t}(o.Component);or.propTypes=nr,or.defaultProps={tag:"form"};var rr=or,ir=["className","cssModule","valid","tooltip","tag"],sr={children:h.default.node,tag:B,className:h.default.string,cssModule:h.default.object,valid:h.default.bool,tooltip:h.default.bool};function ar(e){var t=e.className,n=e.cssModule,o=e.valid,r=e.tooltip,i=e.tag,s=_(e,ir),a=r?"tooltip":"feedback",l=N(f.default(t,o?"valid-"+a:"invalid-"+a),n);return d.default.createElement(i,b({},s,{className:l}))}ar.propTypes=sr,ar.defaultProps={tag:"div",valid:void 0};var lr=["className","cssModule","row","disabled","check","inline","floating","tag","switch"],ur={children:h.default.node,row:h.default.bool,check:h.default.bool,switch:h.default.bool,inline:h.default.bool,floating:h.default.bool,disabled:h.default.bool,tag:B,className:h.default.string,cssModule:h.default.object};function cr(e){var t=e.className,n=e.cssModule,o=e.row,r=e.disabled,i=e.check,s=e.inline,a=e.floating,l=e.tag,u=e.switch,c=_(e,lr),h=i||u,p=N(f.default(t,!!o&&"row",h?"form-check":"mb-3",!!u&&"form-switch",!(!h||!s)&&"form-check-inline",!(!h||!r)&&"disabled",a&&"form-floating"),n);return"fieldset"===l&&(c.disabled=r),d.default.createElement(l,b({},c,{className:p}))}cr.propTypes=ur,cr.defaultProps={tag:"div"};var dr=["className","cssModule","inline","color","tag"],hr={children:h.default.node,inline:h.default.bool,tag:B,color:h.default.string,className:h.default.string,cssModule:h.default.object};function fr(e){var t=e.className,n=e.cssModule,o=e.inline,r=e.color,i=e.tag,s=_(e,dr),a=N(f.default(t,!o&&"form-text",!!r&&"text-"+r),n);return d.default.createElement(i,b({},s,{className:a}))}fr.propTypes=hr,fr.defaultProps={tag:"small",color:"muted"};var pr=["className","cssModule","type","bsSize","valid","invalid","tag","addon","plaintext","innerRef"],mr={children:h.default.node,type:h.default.string,size:h.default.oneOfType([h.default.number,h.default.string]),bsSize:h.default.string,valid:h.default.bool,invalid:h.default.bool,tag:B,innerRef:h.default.oneOfType([h.default.object,h.default.func,h.default.string]),plaintext:h.default.bool,addon:h.default.bool,className:h.default.string,cssModule:h.default.object},gr=function(e){function t(t){var n;return(n=e.call(this,t)||this).getRef=n.getRef.bind(w(n)),n.focus=n.focus.bind(w(n)),n}y(t,e);var n=t.prototype;return n.getRef=function(e){this.props.innerRef&&this.props.innerRef(e),this.ref=e},n.focus=function(){this.ref&&this.ref.focus()},n.render=function(){var e=this.props,t=e.className,n=e.cssModule,o=e.type,r=e.bsSize,i=e.valid,s=e.invalid,a=e.tag,l=e.addon,u=e.plaintext,c=e.innerRef,h=_(e,pr),p=["switch","radio","checkbox"].indexOf(o)>-1,m="select"===o,g=a||(m||"textarea"===o?o:"input"),v="form-control";u?(v+="-plaintext",g=a||"input"):"range"===o?v="form-range":m?v="form-select":p&&(v=l?null:"form-check-input"),h.size&&/\D/g.test(h.size)&&(R('Please use the prop "bsSize" instead of the "size" to bootstrap\'s input sizing.'),r=h.size,delete h.size);var y=N(f.default(t,s&&"is-invalid",i&&"is-valid",!!r&&(m?"form-select-"+r:"form-control-"+r),v),n);return("input"===g||a&&"function"==typeof a)&&(h.type="switch"===o?"checkbox":o),h.children&&!u&&"select"!==o&&"string"==typeof g&&"select"!==g&&(R('Input with a type of "'+o+'" cannot have children. Please use "value"/"defaultValue" instead.'),delete h.children),d.default.createElement(g,b({},h,{ref:c,className:y,"aria-invalid":s}))},t}(d.default.Component);gr.propTypes=mr,gr.defaultProps={type:"text"};var vr=gr,br=["className","cssModule","tag","type","size"],yr={className:h.default.string,cssModule:h.default.object,size:h.default.string,tag:B,type:h.default.string};function xr(e){var t=e.className,n=e.cssModule,o=e.tag,r=e.size,i=_(e,br),s=N(f.default(t,"input-group",r?"input-group-"+r:null),n);return"dropdown"===e.type?d.default.createElement(st,b({},i,{className:s})):d.default.createElement(o,b({},i,{className:s}))}xr.propTypes=yr,xr.defaultProps={tag:"div"};var _r=["className","cssModule","tag"],wr={className:h.default.string,cssModule:h.default.object,tag:B};function jr(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,_r),i=N(f.default(t,"input-group-text"),n);return d.default.createElement(o,b({},r,{className:i}))}jr.propTypes=wr,jr.defaultProps={tag:"span"};var Cr=["className","cssModule","hidden","widths","tag","check","size","for"],Er=h.default.oneOfType([h.default.number,h.default.string]),Sr=h.default.oneOfType([h.default.bool,h.default.string,h.default.number,h.default.shape({size:Er,order:Er,offset:Er})]),Or={children:h.default.node,hidden:h.default.bool,check:h.default.bool,size:h.default.string,for:h.default.string,tag:B,className:h.default.string,cssModule:h.default.object,xs:Sr,sm:Sr,md:Sr,lg:Sr,xl:Sr,xxl:Sr,widths:h.default.array},Nr=function(e,t,n){return!0===n||""===n?e?"col":"col-"+t:"auto"===n?e?"col-auto":"col-"+t+"-auto":e?"col-"+n:"col-"+t+"-"+n};function Tr(e){var t=e.className,n=e.cssModule,o=e.hidden,r=e.widths,i=e.tag,s=e.check,a=e.size,l=e.for,u=_(e,Cr),c=[];r.forEach((function(t,o){var r=e[t];if(delete u[t],r||""===r){var i,s=!o;if(q(r)){var a,l=s?"-":"-"+t+"-";i=Nr(s,t,r.size),c.push(N(f.default(((a={})[i]=r.size||""===r.size,a["order"+l+r.order]=r.order||0===r.order,a["offset"+l+r.offset]=r.offset||0===r.offset,a))),n)}else i=Nr(s,t,r),c.push(i)}}));var h=a||c.length,p=!(s||h),m=N(f.default(t,!!o&&"visually-hidden",!!s&&"form-check-label",!!a&&"col-form-label-"+a,c,!!h&&"col-form-label",!!p&&"form-label"),n);return d.default.createElement(i,b({htmlFor:l},u,{className:m}))}Tr.propTypes=Or,Tr.defaultProps={tag:"label",widths:["xs","sm","md","lg","xl","xxl"]};var Mr=["body","bottom","className","cssModule","heading","left","list","middle","object","right","tag","top"],kr={body:h.default.bool,bottom:h.default.bool,children:h.default.node,className:h.default.string,cssModule:h.default.object,heading:h.default.bool,left:h.default.bool,list:h.default.bool,middle:h.default.bool,object:h.default.bool,right:h.default.bool,tag:B,top:h.default.bool};function Rr(e){var t,n=e.body,o=e.bottom,r=e.className,i=e.cssModule,s=e.heading,a=e.left,l=e.list,u=e.middle,c=e.object,h=e.right,p=e.tag,m=e.top,g=_(e,Mr);t=s?"h4":g.href?"a":g.src||c?"img":l?"ul":"div";var v=p||t,y=N(f.default(r,{"media-body":n,"media-heading":s,"media-left":a,"media-right":h,"media-top":m,"media-bottom":o,"media-middle":u,"media-object":c,"media-list":l,media:!(n||s||a||h||m||o||u||c||l)}),i);return d.default.createElement(v,b({},g,{className:y}))}function Pr(){}Rr.propTypes=kr;var Ir=h.default.shape(kt.propTypes),Ar={autoFocus:h.default.bool,backdrop:h.default.bool,backdropClassName:h.default.string,backdropTransition:Ir,children:h.default.node,className:h.default.string,container:D,cssModule:h.default.object,direction:h.default.oneOf(["start","end","bottom","top"]),fade:h.default.bool,innerRef:h.default.oneOfType([h.default.object,h.default.string,h.default.func]),isOpen:h.default.bool,keyboard:h.default.bool,labelledBy:h.default.string,offcanvasTransition:Ir,onClosed:h.default.func,onEnter:h.default.func,onExit:h.default.func,style:h.default.object,onOpened:h.default.func,returnFocusAfterClose:h.default.bool,role:h.default.string,scrollable:h.default.bool,toggle:h.default.func,trapFocus:h.default.bool,unmountOnClose:h.default.bool,zIndex:h.default.oneOfType([h.default.number,h.default.string])},Dr=Object.keys(Ar),Br={isOpen:!1,autoFocus:!0,direction:"start",scrollable:!1,role:"dialog",backdrop:!0,keyboard:!0,zIndex:1050,fade:!0,onOpened:Pr,onClosed:Pr,offcanvasTransition:{timeout:F.Offcanvas},backdropTransition:{mountOnEnter:!0,timeout:F.Fade},unmountOnClose:!0,returnFocusAfterClose:!0,container:"body",trapFocus:!1},Fr=function(e){function t(t){var n;return(n=e.call(this,t)||this)._element=null,n._originalBodyPadding=null,n.getFocusableChildren=n.getFocusableChildren.bind(w(n)),n.handleBackdropClick=n.handleBackdropClick.bind(w(n)),n.handleBackdropMouseDown=n.handleBackdropMouseDown.bind(w(n)),n.handleEscape=n.handleEscape.bind(w(n)),n.handleTab=n.handleTab.bind(w(n)),n.onOpened=n.onOpened.bind(w(n)),n.onClosed=n.onClosed.bind(w(n)),n.manageFocusAfterClose=n.manageFocusAfterClose.bind(w(n)),n.clearBackdropAnimationTimeout=n.clearBackdropAnimationTimeout.bind(w(n)),n.trapFocus=n.trapFocus.bind(w(n)),n.state={isOpen:!1},n}y(t,e);var n=t.prototype;return n.componentDidMount=function(){var e=this.props,t=e.isOpen,n=e.autoFocus,o=e.onEnter;t&&(this.init(),this.setState({isOpen:!0}),n&&this.setFocus()),o&&o(),document.addEventListener("focus",this.trapFocus,!0),this._isMounted=!0},n.componentDidUpdate=function(e,t){if(this.props.isOpen&&!e.isOpen)return this.init(),void this.setState({isOpen:!0});this.props.autoFocus&&this.state.isOpen&&!t.isOpen&&this.setFocus(),this._element&&e.zIndex!==this.props.zIndex&&(this._element.style.zIndex=this.props.zIndex)},n.componentWillUnmount=function(){this.clearBackdropAnimationTimeout(),this.props.onExit&&this.props.onExit(),this._element&&(this.destroy(),(this.props.isOpen||this.state.isOpen)&&this.close()),document.removeEventListener("focus",this.trapFocus,!0),this._isMounted=!1},n.handleBackdropClick=function(e){if(e.target===this._mouseDownElement){e.stopPropagation();var t=this._backdrop;if(!this.props.isOpen||!0!==this.props.backdrop)return;t&&e.target===t&&this.props.toggle&&this.props.toggle(e)}},n.handleTab=function(e){if(9===e.which&&!(this.offcanvasIndex<t.openCount-1)){var n=this.getFocusableChildren(),o=n.length;if(0!==o){for(var r=this.getFocusedChild(),i=0,s=0;s<o;s+=1)if(n[s]===r){i=s;break}e.shiftKey&&0===i?(e.preventDefault(),n[o-1].focus()):e.shiftKey||i!==o-1||(e.preventDefault(),n[0].focus())}}},n.handleBackdropMouseDown=function(e){this._mouseDownElement=e.target},n.handleEscape=function(e){this.props.isOpen&&e.keyCode===K.esc&&this.props.toggle&&this.props.keyboard&&(e.preventDefault(),e.stopPropagation(),this.props.toggle(e))},n.onOpened=function(e,t){this.props.onOpened(),(this.props.offcanvasTransition.onEntered||Pr)(e,t)},n.onClosed=function(e){var t=this.props.unmountOnClose;this.props.onClosed(),(this.props.offcanvasTransition.onExited||Pr)(e),t&&this.destroy(),this.close(),this._isMounted&&this.setState({isOpen:!1})},n.setFocus=function(){this._dialog&&"function"==typeof this._dialog.focus&&this._dialog.focus()},n.getFocusableChildren=function(){return this._element.querySelectorAll(ee.join(", "))},n.getFocusedChild=function(){var e,t=this.getFocusableChildren();try{e=document.activeElement}catch(n){e=t[0]}return e},n.trapFocus=function(e){if(this.props.trapFocus&&this._element&&this._dialog!==e.target&&!(this.offcanvasIndex<t.openCount-1)){for(var n=this.getFocusableChildren(),o=0;o<n.length;o+=1)if(n[o]===e.target)return;n.length>0&&(e.preventDefault(),e.stopPropagation(),n[0].focus())}},n.init=function(){try{this._triggeringElement=document.activeElement}catch(e){this._triggeringElement=null}this._element||(this._element=document.createElement("div"),this._element.setAttribute("tabindex","-1"),this._element.style.position="relative",this._element.style.zIndex=this.props.zIndex,this._mountContainer=Z(this.props.container),this._mountContainer.appendChild(this._element)),this._originalBodyPadding=S(),O(),0===t.openCount&&this.props.backdrop&&!this.props.scrollable&&(document.body.style.overflow="hidden"),this.offcanvasIndex=t.openCount,t.openCount+=1},n.destroy=function(){this._element&&(this._mountContainer.removeChild(this._element),this._element=null),this.manageFocusAfterClose()},n.manageFocusAfterClose=function(){if(this._triggeringElement){var e=this.props.returnFocusAfterClose;this._triggeringElement.focus&&e&&this._triggeringElement.focus(),this._triggeringElement=null}},n.close=function(){this.manageFocusAfterClose(),t.openCount=Math.max(0,t.openCount-1),document.body.style.overflow=null,C(this._originalBodyPadding)},n.clearBackdropAnimationTimeout=function(){this._backdropAnimationTimeout&&(clearTimeout(this._backdropAnimationTimeout),this._backdropAnimationTimeout=void 0)},n.render=function(){var e=this,t=this.props,n=t.direction,o=t.unmountOnClose;if(this._element&&(this.state.isOpen||!o)){var r=!!this._element&&!this.state.isOpen&&!o;this._element.style.display=r?"none":"block";var i=this.props,s=i.className,a=i.backdropClassName,l=i.cssModule,u=i.isOpen,c=i.backdrop,h=i.role,p=i.labelledBy,m=i.style,v={onKeyUp:this.handleEscape,onKeyDown:this.handleTab,"aria-labelledby":p,role:h,tabIndex:"-1"},y=this.props.fade,x=g(g(g({},kt.defaultProps),this.props.offcanvasTransition),{},{baseClass:y?this.props.offcanvasTransition.baseClass:"",timeout:y?this.props.offcanvasTransition.timeout:0}),_=g(g(g({},kt.defaultProps),this.props.backdropTransition),{},{baseClass:y?this.props.backdropTransition.baseClass:"",timeout:y?this.props.backdropTransition.timeout:0}),w=c&&(y?d.default.createElement(kt,b({},_,{in:u&&!!c,innerRef:function(t){e._backdrop=t},cssModule:l,className:N(f.default("offcanvas-backdrop",a),l),onClick:this.handleBackdropClick,onMouseDown:this.handleBackdropMouseDown})):d.default.createElement("div",{className:N(f.default("offcanvas-backdrop","show",a),l),onClick:this.handleBackdropClick,onMouseDown:this.handleBackdropMouseDown})),j=T(this.props,Dr);return d.default.createElement(ko,{node:this._element},d.default.createElement(kt,b({},j,v,x,{in:u,onEntered:this.onOpened,onExited:this.onClosed,cssModule:l,className:N(f.default("offcanvas",s,"offcanvas-"+n),l),innerRef:function(t){e._dialog=t},style:g(g({},m),{},{visibility:u?"visible":"hidden"})}),this.props.children),w)}return null},t}(d.default.Component);Fr.propTypes=Ar,Fr.defaultProps=Br,Fr.openCount=0;var Lr=Fr,Ur=["className","cssModule","tag"],Kr={tag:B,className:h.default.string,cssModule:h.default.object};function Wr(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,Ur),i=N(f.default(t,"offcanvas-body"),n);return d.default.createElement(o,b({},r,{className:i}))}Wr.propTypes=Kr,Wr.defaultProps={tag:"div"};var Hr=["children","className","close","closeAriaLabel","cssModule","tag","toggle","wrapTag"],zr={children:h.default.node,className:h.default.string,close:h.default.object,closeAriaLabel:h.default.string,cssModule:h.default.object,tag:B,toggle:h.default.func,wrapTag:B};function Vr(e){var t,n=e.children,o=e.className,r=e.close,i=e.closeAriaLabel,s=e.cssModule,a=e.tag,l=e.toggle,u=e.wrapTag,c=_(e,Hr),h=N(f.default(o,"offcanvas-header"),s);return!r&&l&&(t=d.default.createElement("button",{type:"button",onClick:l,className:N("btn-close",s),"aria-label":i})),d.default.createElement(u,b({},c,{className:h}),d.default.createElement(a,{className:N("offcanvas-title",s)},n),r||t)}Vr.propTypes=zr,Vr.defaultProps={closeAriaLabel:"Close",tag:"h5",wrapTag:"div"};var qr=["className","listClassName","cssModule","size","tag","listTag","aria-label"],$r={children:h.default.node,className:h.default.string,listClassName:h.default.string,cssModule:h.default.object,size:h.default.string,tag:B,listTag:B,"aria-label":h.default.string};function Jr(e){var t,n=e.className,o=e.listClassName,r=e.cssModule,i=e.size,s=e.tag,a=e.listTag,l=e["aria-label"],u=_(e,qr),c=N(f.default(n),r),h=N(f.default(o,"pagination",((t={})["pagination-"+i]=!!i,t)),r);return d.default.createElement(s,{className:c,"aria-label":l},d.default.createElement(a,b({},u,{className:h})))}Jr.propTypes=$r,Jr.defaultProps={tag:"nav",listTag:"ul","aria-label":"pagination"};var Gr=["active","className","cssModule","disabled","tag"],Yr={active:h.default.bool,children:h.default.node,className:h.default.string,cssModule:h.default.object,disabled:h.default.bool,tag:B};function Zr(e){var t=e.active,n=e.className,o=e.cssModule,r=e.disabled,i=e.tag,s=_(e,Gr),a=N(f.default(n,"page-item",{active:t,disabled:r}),o);return d.default.createElement(i,b({},s,{className:a}))}Zr.propTypes=Yr,Zr.defaultProps={tag:"li"};var Xr=["className","cssModule","next","previous","first","last","tag"],Qr={"aria-label":h.default.string,children:h.default.node,className:h.default.string,cssModule:h.default.object,next:h.default.bool,previous:h.default.bool,first:h.default.bool,last:h.default.bool,tag:B};function ei(e){var t,n=e.className,o=e.cssModule,r=e.next,i=e.previous,s=e.first,a=e.last,l=e.tag,u=_(e,Xr),c=N(f.default(n,"page-link"),o);i?t="Previous":r?t="Next":s?t="First":a&&(t="Last");var h,p=e["aria-label"]||t;i?h="‹":r?h="›":s?h="«":a&&(h="»");var m=e.children;return m&&Array.isArray(m)&&0===m.length&&(m=null),u.href||"a"!==l||(l="button"),(i||r||s||a)&&(m=[d.default.createElement("span",{"aria-hidden":"true",key:"caret"},m||h),d.default.createElement("span",{className:"visually-hidden",key:"ariaLabel"},p)]),d.default.createElement(l,b({},u,{className:c,"aria-label":p}),m)}ei.propTypes=Qr,ei.defaultProps={tag:"a"};var ti=d.default.createContext({}),ni={tag:B,activeTab:h.default.any,className:h.default.string,cssModule:h.default.object},oi=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={activeTab:n.props.activeTab},n}return y(t,e),t.getDerivedStateFromProps=function(e,t){return t.activeTab!==e.activeTab?{activeTab:e.activeTab}:null},t.prototype.render=function(){var e=this.props,t=e.className,n=e.cssModule,o=e.tag,r=T(this.props,Object.keys(ni)),i=N(f.default("tab-content",t),n);return d.default.createElement(ti.Provider,{value:{activeTabId:this.state.activeTab}},d.default.createElement(o,b({},r,{className:i})))},t}(o.Component),ri=oi;oi.propTypes=ni,oi.defaultProps={tag:"div"};var ii=["className","cssModule","tabId","tag"],si={tag:B,className:h.default.string,cssModule:h.default.object,tabId:h.default.any};function ai(e){var t=e.className,n=e.cssModule,o=e.tabId,r=e.tag,i=_(e,ii),s=function(e){return N(f.default("tab-pane",t,{active:o===e}),n)};return d.default.createElement(ti.Consumer,null,(function(e){var t=e.activeTabId;return d.default.createElement(r,b({},i,{className:s(t)}))}))}ai.propTypes=si,ai.defaultProps={tag:"div"};var li=["className","closeClassName","closeAriaLabel","cssModule","tag","color","isOpen","toggle","children","transition","fade","innerRef"],ui={children:h.default.node,className:h.default.string,closeClassName:h.default.string,closeAriaLabel:h.default.string,color:h.default.string,cssModule:h.default.object,fade:h.default.bool,innerRef:h.default.oneOfType([h.default.object,h.default.string,h.default.func]),isOpen:h.default.bool,tag:B,toggle:h.default.func,transition:h.default.shape(kt.propTypes)},ci={color:"success",isOpen:!0,tag:"div",closeAriaLabel:"Close",fade:!0,transition:g(g({},kt.defaultProps),{},{unmountOnExit:!0})};function di(e){var t=e.className,n=e.closeClassName,o=e.closeAriaLabel,r=e.cssModule,i=e.tag,s=e.color,a=e.isOpen,l=e.toggle,u=e.children,c=e.transition,h=e.fade,p=e.innerRef,m=_(e,li),v=N(f.default(t,"alert","alert-"+s,{"alert-dismissible":l}),r),y=N(f.default("btn-close",n),r),x=g(g(g({},kt.defaultProps),c),{},{baseClass:h?c.baseClass:"",timeout:h?c.timeout:0});return d.default.createElement(kt,b({},m,x,{tag:i,className:v,in:a,role:"alert",innerRef:p}),l?d.default.createElement("button",{type:"button",className:y,"aria-label":o,onClick:l}):null,u)}di.propTypes=ui,di.defaultProps=ci;var hi=["className","cssModule","tag","isOpen","children","transition","fade","innerRef"],fi={children:h.default.node,className:h.default.string,cssModule:h.default.object,fade:h.default.bool,isOpen:h.default.bool,tag:B,transition:h.default.shape(kt.propTypes),innerRef:h.default.oneOfType([h.default.object,h.default.string,h.default.func])},pi={isOpen:!0,tag:"div",fade:!0,transition:g(g({},kt.defaultProps),{},{unmountOnExit:!0})};function mi(e){var t=e.className,n=e.cssModule,o=e.tag,r=e.isOpen,i=e.children,s=e.transition,a=e.fade,l=e.innerRef,u=_(e,hi),c=N(f.default(t,"toast"),n),h=g(g(g({},kt.defaultProps),s),{},{baseClass:a?s.baseClass:"",timeout:a?s.timeout:0});return d.default.createElement(kt,b({},u,h,{tag:o,className:c,in:r,role:"alert",innerRef:l}),i)}mi.propTypes=fi,mi.defaultProps=pi;var gi=["className","cssModule","innerRef","tag"],vi={tag:B,className:h.default.string,cssModule:h.default.object,innerRef:h.default.oneOfType([h.default.object,h.default.string,h.default.func])};function bi(e){var t=e.className,n=e.cssModule,o=e.innerRef,r=e.tag,i=_(e,gi),s=N(f.default(t,"toast-body"),n);return d.default.createElement(r,b({},i,{className:s,ref:o}))}bi.propTypes=vi,bi.defaultProps={tag:"div"};var yi=["className","cssModule","children","toggle","tag","wrapTag","closeAriaLabel","close","tagClassName","icon"],xi={tag:B,icon:h.default.oneOfType([h.default.string,h.default.node]),wrapTag:B,toggle:h.default.func,className:h.default.string,cssModule:h.default.object,children:h.default.node,closeAriaLabel:h.default.string,charCode:h.default.oneOfType([h.default.string,h.default.number]),close:h.default.object,tagClassName:h.default.string};function _i(e){var t,n,o=e.className,r=e.cssModule,i=e.children,s=e.toggle,a=e.tag,l=e.wrapTag,u=e.closeAriaLabel,c=e.close,h=e.tagClassName,p=e.icon,m=_(e,yi),g=N(f.default(o,"toast-header"),r);return!c&&s&&(t=d.default.createElement("button",{type:"button",onClick:s,className:N("btn-close",r),"aria-label":u})),"string"==typeof p?n=d.default.createElement("svg",{className:N("rounded text-"+p),width:"20",height:"20",xmlns:"http://www.w3.org/2000/svg",preserveAspectRatio:"xMidYMid slice",focusable:"false",role:"img"},d.default.createElement("rect",{fill:"currentColor",width:"100%",height:"100%"})):p&&(n=p),d.default.createElement(l,b({},m,{className:g}),n,d.default.createElement(a,{className:N(f.default(h,{"ms-2":null!=n}),r)},i),c||t)}_i.propTypes=xi,_i.defaultProps={tag:"strong",wrapTag:"div",tagClassName:"me-auto",closeAriaLabel:"Close"};var wi=["className","cssModule","tag","active","disabled","action","color"],ji={action:h.default.bool,active:h.default.bool,className:h.default.string,cssModule:h.default.object,color:h.default.string,disabled:h.default.bool,tag:B},Ci=function(e){e.preventDefault()};function Ei(e){var t=e.className,n=e.cssModule,o=e.tag,r=e.active,i=e.disabled,s=e.action,a=e.color,l=_(e,wi),u=N(f.default(t,!!r&&"active",!!i&&"disabled",!!s&&"list-group-item-action",!!a&&"list-group-item-"+a,"list-group-item"),n);return i&&(l.onClick=Ci),d.default.createElement(o,b({},l,{className:u}))}Ei.propTypes=ji,Ei.defaultProps={tag:"li"};var Si=["className","cssModule","tag"],Oi={className:h.default.string,cssModule:h.default.object,tag:B};function Ni(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,Si),i=N(f.default(t,"list-group-item-heading"),n);return d.default.createElement(o,b({},r,{className:i}))}Ni.propTypes=Oi,Ni.defaultProps={tag:"h5"};var Ti=["className","cssModule","tag"],Mi={className:h.default.string,cssModule:h.default.object,tag:B};function ki(e){var t=e.className,n=e.cssModule,o=e.tag,r=_(e,Ti),i=N(f.default(t,"list-group-item-text"),n);return d.default.createElement(o,b({},r,{className:i}))}ki.propTypes=Mi,ki.defaultProps={tag:"p"};var Ri=["className","cssModule","tag","type"],Pi={className:h.default.string,cssModule:h.default.object,tag:B,type:h.default.string},Ii=o.forwardRef((function(e,t){var n=e.className,o=e.cssModule,r=e.tag,i=e.type,s=_(e,Ri),a=N(f.default(n,!!i&&"list-"+i),o);return d.default.createElement(r,b({},s,{className:a,ref:t}))}));Ii.name="List",Ii.propTypes=Pi,Ii.defaultProps={tag:"ul"};var Ai=Ii,Di=["className","cssModule","tag"],Bi={className:h.default.string,cssModule:h.default.object,tag:B},Fi=o.forwardRef((function(e,t){var n=e.className,o=e.cssModule,r=e.tag,i=_(e,Di),s=N(f.default(n,"list-inline-item"),o);return d.default.createElement(r,b({},i,{className:s,ref:t}))}));Fi.name="ListInlineItem",Fi.propTypes=Bi,Fi.defaultProps={tag:"li"};var Li=Fi,Ui=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={isOpen:!0},n.toggle=n.toggle.bind(w(n)),n}y(t,e);var n=t.prototype;return n.toggle=function(){this.setState((function(e){return{isOpen:!e.isOpen}}))},n.render=function(){return d.default.createElement(di,b({isOpen:this.state.isOpen,toggle:this.toggle},this.props))},t}(o.Component),Ki=["defaultOpen"],Wi=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={isOpen:t.defaultOpen||!1},n.toggle=n.toggle.bind(w(n)),n}y(t,e);var n=t.prototype;return n.toggle=function(){this.setState((function(e){return{isOpen:!e.isOpen}}))},n.render=function(){return d.default.createElement(lt,b({isOpen:this.state.isOpen,toggle:this.toggle},T(this.props,Ki)))},t}(o.Component);Wi.propTypes=g({defaultOpen:h.default.bool},lt.propTypes);var Hi=["toggleEvents","defaultOpen"],zi={defaultOpen:h.default.bool,toggler:h.default.string.isRequired,toggleEvents:h.default.arrayOf(h.default.string)},Vi={toggleEvents:X},qi=function(e){function t(t){var n;return(n=e.call(this,t)||this).togglers=null,n.removeEventListeners=null,n.toggle=n.toggle.bind(w(n)),n.state={isOpen:t.defaultOpen||!1},n}y(t,e);var n=t.prototype;return n.componentDidMount=function(){this.togglers=G(this.props.toggler),this.togglers.length&&(this.removeEventListeners=Q(this.togglers,this.toggle,this.props.toggleEvents))},n.componentWillUnmount=function(){this.togglers.length&&this.removeEventListeners&&this.removeEventListeners()},n.toggle=function(e){this.setState((function(e){return{isOpen:!e.isOpen}})),e.preventDefault()},n.render=function(){return d.default.createElement(Zt,b({isOpen:this.state.isOpen},T(this.props,Hi)))},t}(o.Component);qi.propTypes=zi,qi.defaultProps=Vi;var $i=qi,Ji=["defaultOpen"],Gi=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={isOpen:t.defaultOpen||!1},n.toggle=n.toggle.bind(w(n)),n}y(t,e);var n=t.prototype;return n.toggle=function(e){var t=this;this.setState((function(e){return{isOpen:!e.isOpen}}),(function(){t.props.onToggle&&t.props.onToggle(e,t.state.isOpen)}))},n.render=function(){return d.default.createElement(st,b({isOpen:this.state.isOpen,toggle:this.toggle},T(this.props,Ji)))},t}(o.Component);Gi.propTypes=g({defaultOpen:h.default.bool,onToggle:h.default.func},st.propTypes);var Yi=["defaultOpen"],Zi=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={isOpen:t.defaultOpen||!1},n.toggle=n.toggle.bind(w(n)),n}y(t,e);var n=t.prototype;return n.toggle=function(){this.setState((function(e){return{isOpen:!e.isOpen}}))},n.render=function(){return d.default.createElement(Jo,b({isOpen:this.state.isOpen,toggle:this.toggle},T(this.props,Yi)))},t}(o.Component);Zi.propTypes=g({defaultOpen:h.default.bool},Jo.propTypes);var Xi=["className","cssModule","type","size","color","children","tag"],Qi={tag:B,type:h.default.oneOf(["border","grow"]),size:h.default.oneOf(["sm"]),color:h.default.oneOf(["primary","secondary","success","danger","warning","info","light","dark"]),className:h.default.string,cssModule:h.default.object,children:h.default.string};function es(e){var t=e.className,n=e.cssModule,o=e.type,r=e.size,i=e.color,s=e.children,a=e.tag,l=_(e,Xi),u=N(f.default(t,!!r&&"spinner-"+o+"-"+r,"spinner-"+o,!!i&&"text-"+i),n);return d.default.createElement(a,b({role:"status"},l,{className:u}),s&&d.default.createElement("span",{className:N("visually-hidden",n)},s))}es.propTypes=Qi,es.defaultProps={tag:"div",type:"border",children:"Loading..."};var ts=["className","cssModule","color","innerRef","tag","animation","size","widths"],ns=g(g({},ve.propTypes),{},{color:h.default.string,tag:B,animation:h.default.oneOf(["glow","wave"]),innerRef:h.default.oneOfType([h.default.object,h.default.func,h.default.string]),size:h.default.oneOf(["lg","sm","xs"])});function os(e){var t=e.className,n=e.cssModule,o=e.color,r=e.innerRef,i=e.tag,s=e.animation,a=e.size,l=e.widths,u=_(e,ts),c=ge(u,n,l),h=c.attributes,p=c.colClasses,m=N(f.default(t,p,"placeholder"+(s?"-"+s:""),!!a&&"placeholder-"+a,!!o&&"bg-"+o),n);return d.default.createElement(i,b({},h,{className:m,ref:r}))}os.propTypes=ns,os.defaultProps={tag:"span"};var rs=["cssModule","className","tag"],is={size:h.default.string,color:h.default.string,outline:h.default.bool,className:h.default.string,tag:B,cssModule:h.default.object},ss={color:"primary",tag:Ze};function as(e){var t=e.cssModule,n=e.className,o=_(e,rs),r=ge(o,t),i=r.attributes,s=r.colClasses,a=N(f.default("placeholder",n,s),t);return d.default.createElement(Ze,b({},i,{className:a,disabled:!0}))}as.propTypes=is,as.defaultProps=ss,"object"==typeof window&&"function"!=typeof window.CustomEvent&&(window.CustomEvent=function(e,t){t=t||{bubbles:!1,cancelable:!1,detail:null};var n=document.createEvent("CustomEvent");return n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n}),"function"!=typeof Object.values&&(Object.values=function(e){return Object.keys(e).map((function(t){return e[t]}))}),t.Accordion=At,t.AccordionBody=en,t.AccordionContext=Rt,t.AccordionHeader=Kt,t.AccordionItem=zt,t.Alert=di,t.Badge=on,t.Breadcrumb=We,t.BreadcrumbItem=Ve,t.Button=Ze,t.ButtonDropdown=lt,t.ButtonGroup=dt,t.ButtonToggle=et,t.ButtonToolbar=pt,t.Card=an,t.CardBody=yn,t.CardColumns=gn,t.CardDeck=fn,t.CardFooter=En,t.CardGroup=cn,t.CardHeader=Nn,t.CardImg=kn,t.CardImgOverlay=In,t.CardLink=wn,t.CardSubtitle=Yn,t.CardText=Qn,t.CardTitle=no,t.Carousel=Un,t.CarouselCaption=Hn,t.CarouselControl=Kn,t.CarouselIndicators=Wn,t.CarouselItem=Bn,t.CloseButton=Je,t.Col=ve,t.Collapse=Zt,t.Container=re,t.Dropdown=st,t.DropdownContext=tt,t.DropdownItem=bt,t.DropdownMenu=jt,t.DropdownToggle=Ot,t.Fade=kt,t.Form=rr,t.FormFeedback=ar,t.FormGroup=cr,t.FormText=fr,t.Input=vr,t.InputGroup=xr,t.InputGroupText=jr,t.Label=Tr,t.List=Ai,t.ListGroup=er,t.ListGroupItem=Ei,t.ListGroupItemHeading=Ni,t.ListGroupItemText=ki,t.ListInlineItem=Li,t.Media=Rr,t.Modal=Fo,t.ModalBody=zo,t.ModalFooter=$o,t.ModalHeader=Ko,t.Nav=Re,t.NavItem=Ae,t.NavLink=Le,t.Navbar=xe,t.NavbarBrand=je,t.NavbarText=Se,t.NavbarToggler=Te,t.Offcanvas=Lr,t.OffcanvasBody=Wr,t.OffcanvasHeader=Vr,t.Pagination=Jr,t.PaginationItem=Zr,t.PaginationLink=ei,t.Placeholder=os,t.PlaceholderButton=as,t.Polyfill={__proto__:null},t.Popover=vo,t.PopoverBody=Eo,t.PopoverHeader=wo,t.PopperContent=ao,t.PopperTargetHelper=lo,t.Progress=No,t.Row=le,t.Spinner=es,t.TabContent=ri,t.TabPane=ai,t.Table=Zo,t.Toast=mi,t.ToastBody=bi,t.ToastHeader=_i,t.Tooltip=Jo,t.UncontrolledAccordion=Ft,t.UncontrolledAlert=Ui,t.UncontrolledButtonDropdown=Wi,t.UncontrolledCarousel=$n,t.UncontrolledCollapse=$i,t.UncontrolledDropdown=Gi,t.UncontrolledPopover=yo,t.UncontrolledTooltip=Zi,t.Util=te},7462:(e,t,n)=>{"use strict";function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},o.apply(this,arguments)}n.d(t,{Z:()=>o})}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={exports:{}};return e[o].call(i.exports,i,i.exports,n),i.exports}n.amdO={},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(2272)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,